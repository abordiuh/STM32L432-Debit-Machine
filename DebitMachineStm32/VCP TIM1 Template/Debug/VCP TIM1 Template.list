
D:\Conestoga\Embedded programing\debitSTM32\VCP TIM1 Template\Debug\VCP TIM1 Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  08004ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000150  2000006c  08004f34  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001bc  08004f34  000201bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000115e7  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002947  00000000  00000000  00031683  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000082e4  00000000  00000000  00033fca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000be0  00000000  00000000  0003c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e88  00000000  00000000  0003ce90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005a29  00000000  00000000  0003dd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000046dc  00000000  00000000  00043741  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00047e1d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002dcc  00000000  00000000  00047e9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bc4 	.word	0x08004bc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004bc4 	.word	0x08004bc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97e 	b.w	8000584 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460e      	mov	r6, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9d08      	ldr	r5, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d150      	bne.n	8000352 <__udivmoddi4+0xb2>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96c      	bls.n	8000390 <__udivmoddi4+0xf0>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0420 	rsb	r4, lr, #32
 80002c4:	fa20 f404 	lsr.w	r4, r0, r4
 80002c8:	fa01 f60e 	lsl.w	r6, r1, lr
 80002cc:	ea44 0c06 	orr.w	ip, r4, r6
 80002d0:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbbc f0f9 	udiv	r0, ip, r9
 80002e2:	fa1f f887 	uxth.w	r8, r7
 80002e6:	fb09 c610 	mls	r6, r9, r0, ip
 80002ea:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80002ee:	fb00 f308 	mul.w	r3, r0, r8
 80002f2:	42b3      	cmp	r3, r6
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0x6a>
 80002f6:	19f6      	adds	r6, r6, r7
 80002f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fc:	f080 8122 	bcs.w	8000544 <__udivmoddi4+0x2a4>
 8000300:	42b3      	cmp	r3, r6
 8000302:	f240 811f 	bls.w	8000544 <__udivmoddi4+0x2a4>
 8000306:	3802      	subs	r0, #2
 8000308:	443e      	add	r6, r7
 800030a:	1af6      	subs	r6, r6, r3
 800030c:	b2a2      	uxth	r2, r4
 800030e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000312:	fb09 6613 	mls	r6, r9, r3, r6
 8000316:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800031a:	fb03 f808 	mul.w	r8, r3, r8
 800031e:	45a0      	cmp	r8, r4
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x96>
 8000322:	19e4      	adds	r4, r4, r7
 8000324:	f103 32ff 	add.w	r2, r3, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x2a0>
 800032c:	45a0      	cmp	r8, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x2a0>
 8000332:	3b02      	subs	r3, #2
 8000334:	443c      	add	r4, r7
 8000336:	ebc8 0404 	rsb	r4, r8, r4
 800033a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	2d00      	cmp	r5, #0
 8000342:	d062      	beq.n	800040a <__udivmoddi4+0x16a>
 8000344:	fa24 f40e 	lsr.w	r4, r4, lr
 8000348:	2300      	movs	r3, #0
 800034a:	602c      	str	r4, [r5, #0]
 800034c:	606b      	str	r3, [r5, #4]
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	428b      	cmp	r3, r1
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0xc6>
 8000356:	2d00      	cmp	r5, #0
 8000358:	d055      	beq.n	8000406 <__udivmoddi4+0x166>
 800035a:	2100      	movs	r1, #0
 800035c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000360:	4608      	mov	r0, r1
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	f040 8090 	bne.w	8000490 <__udivmoddi4+0x1f0>
 8000370:	42b3      	cmp	r3, r6
 8000372:	d302      	bcc.n	800037a <__udivmoddi4+0xda>
 8000374:	4282      	cmp	r2, r0
 8000376:	f200 80f8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 800037a:	1a84      	subs	r4, r0, r2
 800037c:	eb66 0603 	sbc.w	r6, r6, r3
 8000380:	2001      	movs	r0, #1
 8000382:	46b4      	mov	ip, r6
 8000384:	2d00      	cmp	r5, #0
 8000386:	d040      	beq.n	800040a <__udivmoddi4+0x16a>
 8000388:	e885 1010 	stmia.w	r5, {r4, ip}
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	b912      	cbnz	r2, 8000398 <__udivmoddi4+0xf8>
 8000392:	2701      	movs	r7, #1
 8000394:	fbb7 f7f2 	udiv	r7, r7, r2
 8000398:	fab7 fe87 	clz	lr, r7
 800039c:	f1be 0f00 	cmp.w	lr, #0
 80003a0:	d135      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a2:	1bf3      	subs	r3, r6, r7
 80003a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	fb08 3610 	mls	r6, r8, r0, r3
 80003b8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80003bc:	fb0c f300 	mul.w	r3, ip, r0
 80003c0:	42b3      	cmp	r3, r6
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19f6      	adds	r6, r6, r7
 80003c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42b3      	cmp	r3, r6
 80003ce:	f200 80ce 	bhi.w	800056e <__udivmoddi4+0x2ce>
 80003d2:	4610      	mov	r0, r2
 80003d4:	1af6      	subs	r6, r6, r3
 80003d6:	b2a2      	uxth	r2, r4
 80003d8:	fbb6 f3f8 	udiv	r3, r6, r8
 80003dc:	fb08 6613 	mls	r6, r8, r3, r6
 80003e0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80003e4:	fb0c fc03 	mul.w	ip, ip, r3
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f103 32ff 	add.w	r2, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b5 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 80003fa:	4613      	mov	r3, r2
 80003fc:	ebcc 0404 	rsb	r4, ip, r4
 8000400:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000404:	e79c      	b.n	8000340 <__udivmoddi4+0xa0>
 8000406:	4629      	mov	r1, r5
 8000408:	4628      	mov	r0, r5
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0120 	rsb	r1, lr, #32
 8000412:	fa06 f30e 	lsl.w	r3, r6, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f901 	lsr.w	r9, r0, r1
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	40ce      	lsrs	r6, r1
 8000424:	ea49 0903 	orr.w	r9, r9, r3
 8000428:	fbb6 faf8 	udiv	sl, r6, r8
 800042c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000430:	fb08 661a 	mls	r6, r8, sl, r6
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800043c:	fb0a f20c 	mul.w	r2, sl, ip
 8000440:	429a      	cmp	r2, r3
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d90a      	bls.n	800045e <__udivmoddi4+0x1be>
 8000448:	19db      	adds	r3, r3, r7
 800044a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800044e:	f080 8087 	bcs.w	8000560 <__udivmoddi4+0x2c0>
 8000452:	429a      	cmp	r2, r3
 8000454:	f240 8084 	bls.w	8000560 <__udivmoddi4+0x2c0>
 8000458:	f1aa 0a02 	sub.w	sl, sl, #2
 800045c:	443b      	add	r3, r7
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fa1f f989 	uxth.w	r9, r9
 8000464:	fbb3 f1f8 	udiv	r1, r3, r8
 8000468:	fb08 3311 	mls	r3, r8, r1, r3
 800046c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000470:	fb01 f60c 	mul.w	r6, r1, ip
 8000474:	429e      	cmp	r6, r3
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0x1e8>
 8000478:	19db      	adds	r3, r3, r7
 800047a:	f101 32ff 	add.w	r2, r1, #4294967295
 800047e:	d26b      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 8000480:	429e      	cmp	r6, r3
 8000482:	d969      	bls.n	8000558 <__udivmoddi4+0x2b8>
 8000484:	3902      	subs	r1, #2
 8000486:	443b      	add	r3, r7
 8000488:	1b9b      	subs	r3, r3, r6
 800048a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800048e:	e78e      	b.n	80003ae <__udivmoddi4+0x10e>
 8000490:	f1c1 0e20 	rsb	lr, r1, #32
 8000494:	fa22 f40e 	lsr.w	r4, r2, lr
 8000498:	408b      	lsls	r3, r1
 800049a:	4323      	orrs	r3, r4
 800049c:	fa20 f70e 	lsr.w	r7, r0, lr
 80004a0:	fa06 f401 	lsl.w	r4, r6, r1
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	fa26 f60e 	lsr.w	r6, r6, lr
 80004ac:	433c      	orrs	r4, r7
 80004ae:	fbb6 f9fc 	udiv	r9, r6, ip
 80004b2:	0c27      	lsrs	r7, r4, #16
 80004b4:	fb0c 6619 	mls	r6, ip, r9, r6
 80004b8:	fa1f f883 	uxth.w	r8, r3
 80004bc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 80004c0:	fb09 f708 	mul.w	r7, r9, r8
 80004c4:	42b7      	cmp	r7, r6
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	fa00 fa01 	lsl.w	sl, r0, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x242>
 80004d0:	18f6      	adds	r6, r6, r3
 80004d2:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d6:	d241      	bcs.n	800055c <__udivmoddi4+0x2bc>
 80004d8:	42b7      	cmp	r7, r6
 80004da:	d93f      	bls.n	800055c <__udivmoddi4+0x2bc>
 80004dc:	f1a9 0902 	sub.w	r9, r9, #2
 80004e0:	441e      	add	r6, r3
 80004e2:	1bf6      	subs	r6, r6, r7
 80004e4:	b2a0      	uxth	r0, r4
 80004e6:	fbb6 f4fc 	udiv	r4, r6, ip
 80004ea:	fb0c 6614 	mls	r6, ip, r4, r6
 80004ee:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 80004f2:	fb04 f808 	mul.w	r8, r4, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x26a>
 80004fa:	18ff      	adds	r7, r7, r3
 80004fc:	f104 30ff 	add.w	r0, r4, #4294967295
 8000500:	d228      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d926      	bls.n	8000554 <__udivmoddi4+0x2b4>
 8000506:	3c02      	subs	r4, #2
 8000508:	441f      	add	r7, r3
 800050a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800050e:	ebc8 0707 	rsb	r7, r8, r7
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	4644      	mov	r4, r8
 800051a:	464e      	mov	r6, r9
 800051c:	d314      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	d029      	beq.n	8000574 <__udivmoddi4+0x2d4>
 8000520:	b365      	cbz	r5, 800057c <__udivmoddi4+0x2dc>
 8000522:	ebba 0304 	subs.w	r3, sl, r4
 8000526:	eb67 0706 	sbc.w	r7, r7, r6
 800052a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800052e:	40cb      	lsrs	r3, r1
 8000530:	40cf      	lsrs	r7, r1
 8000532:	ea4e 0303 	orr.w	r3, lr, r3
 8000536:	e885 0088 	stmia.w	r5, {r3, r7}
 800053a:	2100      	movs	r1, #0
 800053c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000540:	4613      	mov	r3, r2
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x96>
 8000544:	4610      	mov	r0, r2
 8000546:	e6e0      	b.n	800030a <__udivmoddi4+0x6a>
 8000548:	ebb8 0402 	subs.w	r4, r8, r2
 800054c:	eb69 0603 	sbc.w	r6, r9, r3
 8000550:	3801      	subs	r0, #1
 8000552:	e7e5      	b.n	8000520 <__udivmoddi4+0x280>
 8000554:	4604      	mov	r4, r0
 8000556:	e7d8      	b.n	800050a <__udivmoddi4+0x26a>
 8000558:	4611      	mov	r1, r2
 800055a:	e795      	b.n	8000488 <__udivmoddi4+0x1e8>
 800055c:	4681      	mov	r9, r0
 800055e:	e7c0      	b.n	80004e2 <__udivmoddi4+0x242>
 8000560:	468a      	mov	sl, r1
 8000562:	e77c      	b.n	800045e <__udivmoddi4+0x1be>
 8000564:	3b02      	subs	r3, #2
 8000566:	443c      	add	r4, r7
 8000568:	e748      	b.n	80003fc <__udivmoddi4+0x15c>
 800056a:	4608      	mov	r0, r1
 800056c:	e70a      	b.n	8000384 <__udivmoddi4+0xe4>
 800056e:	3802      	subs	r0, #2
 8000570:	443e      	add	r6, r7
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x134>
 8000574:	45c2      	cmp	sl, r8
 8000576:	d3e7      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000578:	463e      	mov	r6, r7
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x280>
 800057c:	4629      	mov	r1, r5
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000588:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800058c:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 f876 	bl	8000688 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800059c:	2200      	movs	r2, #0
 800059e:	4621      	mov	r1, r4
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f000 f83c 	bl	8000620 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005a8:	2000      	movs	r0, #0
 80005aa:	bd10      	pop	{r4, pc}
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b2:	2003      	movs	r0, #3
 80005b4:	f000 f822 	bl	80005fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff ffe5 	bl	8000588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005be:	f002 fa89 	bl	8002ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005c2:	2000      	movs	r0, #0
 80005c4:	bd08      	pop	{r3, pc}
	...

080005c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005c8:	4a02      	ldr	r2, [pc, #8]	; (80005d4 <HAL_IncTick+0xc>)
 80005ca:	6813      	ldr	r3, [r2, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200000a0 	.word	0x200000a0

080005d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005d8:	4b01      	ldr	r3, [pc, #4]	; (80005e0 <HAL_GetTick+0x8>)
 80005da:	6818      	ldr	r0, [r3, #0]
}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000a0 	.word	0x200000a0

080005e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e4:	b538      	push	{r3, r4, r5, lr}
 80005e6:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80005e8:	f7ff fff6 	bl	80005d8 <HAL_GetTick>
 80005ec:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80005ee:	f7ff fff3 	bl	80005d8 <HAL_GetTick>
 80005f2:	1b40      	subs	r0, r0, r5
 80005f4:	42a0      	cmp	r0, r4
 80005f6:	d3fa      	bcc.n	80005ee <HAL_Delay+0xa>
  {
  }
}
 80005f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080005fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005fe:	68d3      	ldr	r3, [r2, #12]
 8000600:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000604:	041b      	lsls	r3, r3, #16
 8000606:	0c1b      	lsrs	r3, r3, #16
 8000608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800060c:	0200      	lsls	r0, r0, #8
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000616:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000618:	60d3      	str	r3, [r2, #12]
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <HAL_NVIC_SetPriority+0x60>)
 8000622:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000624:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000628:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000630:	2c04      	cmp	r4, #4
 8000632:	bf28      	it	cs
 8000634:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000636:	2d06      	cmp	r5, #6

  return (
 8000638:	f04f 0501 	mov.w	r5, #1
 800063c:	fa05 f404 	lsl.w	r4, r5, r4
 8000640:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000644:	bf8c      	ite	hi
 8000646:	3b03      	subhi	r3, #3
 8000648:	2300      	movls	r3, #0

  return (
 800064a:	400c      	ands	r4, r1
 800064c:	409c      	lsls	r4, r3
 800064e:	fa05 f303 	lsl.w	r3, r5, r3
 8000652:	3b01      	subs	r3, #1
 8000654:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000656:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000658:	ea42 0204 	orr.w	r2, r2, r4
 800065c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	bfaf      	iteee	ge
 8000662:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	f000 000f 	andlt.w	r0, r0, #15
 800066a:	4b06      	ldrlt	r3, [pc, #24]	; (8000684 <HAL_NVIC_SetPriority+0x64>)
 800066c:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	bfa5      	ittet	ge
 8000670:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000674:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	bf00      	nop
 8000680:	e000ed00 	.word	0xe000ed00
 8000684:	e000ed14 	.word	0xe000ed14

08000688 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000688:	3801      	subs	r0, #1
 800068a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800068e:	d20a      	bcs.n	80006a6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000694:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	21f0      	movs	r1, #240	; 0xf0
 8000698:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80006a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e010 	.word	0xe000e010
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006b6:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006b8:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006ba:	bf0c      	ite	eq
 80006bc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006c0:	f022 0204 	bicne.w	r2, r2, #4
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	4770      	bx	lr
 80006c8:	e000e010 	.word	0xe000e010

080006cc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006cc:	4770      	bx	lr

080006ce <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80006ce:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006d0:	f7ff fffc 	bl	80006cc <HAL_SYSTICK_Callback>
 80006d4:	bd08      	pop	{r3, pc}
	...

080006d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006dc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006de:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e0:	f8df c168 	ldr.w	ip, [pc, #360]	; 800084c <HAL_GPIO_Init+0x174>
 80006e4:	4c57      	ldr	r4, [pc, #348]	; (8000844 <HAL_GPIO_Init+0x16c>)
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006e6:	9301      	str	r3, [sp, #4]
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80006e8:	f04f 080f 	mov.w	r8, #15
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 80006ec:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006ee:	9a01      	ldr	r2, [sp, #4]
 80006f0:	40da      	lsrs	r2, r3
 80006f2:	f000 80a4 	beq.w	800083e <HAL_GPIO_Init+0x166>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006f6:	2201      	movs	r2, #1
 80006f8:	fa02 f903 	lsl.w	r9, r2, r3

    if(iocurrent)
 80006fc:	9a01      	ldr	r2, [sp, #4]
 80006fe:	ea12 0509 	ands.w	r5, r2, r9
 8000702:	f000 809a 	beq.w	800083a <HAL_GPIO_Init+0x162>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000706:	684a      	ldr	r2, [r1, #4]
 8000708:	f022 0a10 	bic.w	sl, r2, #16
 800070c:	f1ba 0f02 	cmp.w	sl, #2
 8000710:	d113      	bne.n	800073a <HAL_GPIO_Init+0x62>
 8000712:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000716:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800071a:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800071e:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000722:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000726:	fa08 f60b 	lsl.w	r6, r8, fp
 800072a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800072e:	690e      	ldr	r6, [r1, #16]
 8000730:	fa06 f60b 	lsl.w	r6, r6, fp
 8000734:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000736:	f8ce 6020 	str.w	r6, [lr, #32]
 800073a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800073e:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000740:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000742:	fa06 f60e 	lsl.w	r6, r6, lr
 8000746:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000748:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800074c:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800074e:	fa0b fb0e 	lsl.w	fp, fp, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000752:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000756:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800075a:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 800075e:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000760:	d811      	bhi.n	8000786 <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000762:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000764:	ea06 0a07 	and.w	sl, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000768:	68cf      	ldr	r7, [r1, #12]
 800076a:	fa07 f70e 	lsl.w	r7, r7, lr
 800076e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000772:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000774:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000776:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800077a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800077e:	409f      	lsls	r7, r3
 8000780:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000784:	6047      	str	r7, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000786:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000788:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800078a:	688f      	ldr	r7, [r1, #8]
 800078c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000790:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000792:	60c6      	str	r6, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000794:	00d6      	lsls	r6, r2, #3
 8000796:	d550      	bpl.n	800083a <HAL_GPIO_Init+0x162>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000798:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 800079c:	f046 0601 	orr.w	r6, r6, #1
 80007a0:	f8cc 6060 	str.w	r6, [ip, #96]	; 0x60
 80007a4:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80007a8:	f006 0601 	and.w	r6, r6, #1
 80007ac:	9603      	str	r6, [sp, #12]
 80007ae:	9e03      	ldr	r6, [sp, #12]
 80007b0:	f023 0603 	bic.w	r6, r3, #3
 80007b4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80007b8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007bc:	f003 0903 	and.w	r9, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80007c0:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007c2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80007c6:	fa08 fe09 	lsl.w	lr, r8, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80007ca:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007ce:	ea27 0a0e 	bic.w	sl, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80007d2:	d00b      	beq.n	80007ec <HAL_GPIO_Init+0x114>
 80007d4:	4f1c      	ldr	r7, [pc, #112]	; (8000848 <HAL_GPIO_Init+0x170>)
 80007d6:	42b8      	cmp	r0, r7
 80007d8:	d00b      	beq.n	80007f2 <HAL_GPIO_Init+0x11a>
 80007da:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80007de:	42b8      	cmp	r0, r7
 80007e0:	bf14      	ite	ne
 80007e2:	f04f 0e07 	movne.w	lr, #7
 80007e6:	f04f 0e02 	moveq.w	lr, #2
 80007ea:	e004      	b.n	80007f6 <HAL_GPIO_Init+0x11e>
 80007ec:	f04f 0e00 	mov.w	lr, #0
 80007f0:	e001      	b.n	80007f6 <HAL_GPIO_Init+0x11e>
 80007f2:	f04f 0e01 	mov.w	lr, #1
 80007f6:	fa0e f909 	lsl.w	r9, lr, r9
 80007fa:	ea49 070a 	orr.w	r7, r9, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 80007fe:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000800:	4e10      	ldr	r6, [pc, #64]	; (8000844 <HAL_GPIO_Init+0x16c>)
 8000802:	6836      	ldr	r6, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8000804:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000806:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~((uint32_t)iocurrent);
 800080a:	bf0c      	ite	eq
 800080c:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800080e:	432e      	orrne	r6, r5
        }
        EXTI->IMR1 = temp;
 8000810:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR1;
 8000812:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000814:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;

        temp = EXTI->EMR1;
        temp &= ~((uint32_t)iocurrent);
 8000818:	bf0c      	ite	eq
 800081a:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800081c:	432e      	orrne	r6, r5
        }
        EXTI->EMR1 = temp;
 800081e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000820:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000822:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~((uint32_t)iocurrent);
 8000826:	bf0c      	ite	eq
 8000828:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800082a:	432e      	orrne	r6, r5
        }
        EXTI->RTSR1 = temp;
 800082c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR1;
 800082e:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000830:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
 8000832:	bf54      	ite	pl
 8000834:	403e      	andpl	r6, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000836:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR1 = temp;
 8000838:	60e6      	str	r6, [r4, #12]
      }
    }
    
    position++;
 800083a:	3301      	adds	r3, #1
 800083c:	e757      	b.n	80006ee <HAL_GPIO_Init+0x16>
  }
}
 800083e:	b005      	add	sp, #20
 8000840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000844:	40010400 	.word	0x40010400
 8000848:	48000400 	.word	0x48000400
 800084c:	40021000 	.word	0x40021000

08000850 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000850:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000852:	4219      	tst	r1, r3
}
 8000854:	bf14      	ite	ne
 8000856:	2001      	movne	r0, #1
 8000858:	2000      	moveq	r0, #0
 800085a:	4770      	bx	lr

0800085c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800085c:	b10a      	cbz	r2, 8000862 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800085e:	6181      	str	r1, [r0, #24]
 8000860:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000862:	6281      	str	r1, [r0, #40]	; 0x28
 8000864:	4770      	bx	lr
	...

08000868 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <HAL_PWREx_GetVoltageRange+0xc>)
 800086a:	6818      	ldr	r0, [r3, #0]
}
 800086c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40007000 	.word	0x40007000

08000878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_PWREx_ControlVoltageScaling+0x60>)
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800087a:	681a      	ldr	r2, [r3, #0]
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800087c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000880:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000884:	d11a      	bne.n	80008bc <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000886:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800088a:	d020      	beq.n	80008ce <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800088e:	4913      	ldr	r1, [pc, #76]	; (80008dc <HAL_PWREx_ControlVoltageScaling+0x64>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000890:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000898:	601a      	str	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800089c:	6812      	ldr	r2, [r2, #0]
 800089e:	fbb2 f1f1 	udiv	r1, r2, r1
 80008a2:	2232      	movs	r2, #50	; 0x32
 80008a4:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80008a6:	b122      	cbz	r2, 80008b2 <HAL_PWREx_ControlVoltageScaling+0x3a>
 80008a8:	6959      	ldr	r1, [r3, #20]
 80008aa:	0549      	lsls	r1, r1, #21
 80008ac:	d501      	bpl.n	80008b2 <HAL_PWREx_ControlVoltageScaling+0x3a>
      {
        wait_loop_index--;
 80008ae:	3a01      	subs	r2, #1
 80008b0:	e7f9      	b.n	80008a6 <HAL_PWREx_ControlVoltageScaling+0x2e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_PWREx_ControlVoltageScaling+0x60>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	055b      	lsls	r3, r3, #21
 80008b8:	d40b      	bmi.n	80008d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
 80008ba:	e008      	b.n	80008ce <HAL_PWREx_ControlVoltageScaling+0x56>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80008bc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c0:	bf1f      	itttt	ne
 80008c2:	681a      	ldrne	r2, [r3, #0]
 80008c4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80008c8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80008cc:	601a      	strne	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 80008ce:	2000      	movs	r0, #0
 80008d0:	4770      	bx	lr
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
      {
        return HAL_TIMEOUT;
 80008d2:	2003      	movs	r0, #3
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
}  
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40007000 	.word	0x40007000
 80008dc:	000f4240 	.word	0x000f4240
 80008e0:	20000000 	.word	0x20000000

080008e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80008e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008e6:	4d1e      	ldr	r5, [pc, #120]	; (8000960 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80008e8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008ea:	00d9      	lsls	r1, r3, #3
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80008ec:	4604      	mov	r4, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008ee:	d502      	bpl.n	80008f6 <RCC_SetFlashLatencyFromMSIRange+0x12>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80008f0:	f7ff ffba 	bl	8000868 <HAL_PWREx_GetVoltageRange>
 80008f4:	e00e      	b.n	8000914 <RCC_SetFlashLatencyFromMSIRange+0x30>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	65ab      	str	r3, [r5, #88]	; 0x58
 80008fe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000908:	f7ff ffae 	bl	8000868 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800090c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800090e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000912:	65ab      	str	r3, [r5, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000914:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000918:	d106      	bne.n	8000928 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    if(msirange > RCC_MSIRANGE_8)
 800091a:	2c80      	cmp	r4, #128	; 0x80
 800091c:	d90c      	bls.n	8000938 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800091e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000920:	bf8c      	ite	hi
 8000922:	2302      	movhi	r3, #2
 8000924:	2301      	movls	r3, #1
 8000926:	e00c      	b.n	8000942 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8000928:	2c80      	cmp	r4, #128	; 0x80
 800092a:	d807      	bhi.n	800093c <RCC_SetFlashLatencyFromMSIRange+0x58>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800092c:	d008      	beq.n	8000940 <RCC_SetFlashLatencyFromMSIRange+0x5c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800092e:	f1a4 0270 	sub.w	r2, r4, #112	; 0x70
 8000932:	4253      	negs	r3, r2
 8000934:	4153      	adcs	r3, r2
 8000936:	e004      	b.n	8000942 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000938:	2300      	movs	r3, #0
 800093a:	e002      	b.n	8000942 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  else
  {
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800093c:	2303      	movs	r3, #3
 800093e:	e000      	b.n	8000942 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000940:	2302      	movs	r3, #2
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8000942:	4908      	ldr	r1, [pc, #32]	; (8000964 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000944:	680a      	ldr	r2, [r1, #0]
 8000946:	f022 0207 	bic.w	r2, r2, #7
 800094a:	431a      	orrs	r2, r3
 800094c:	600a      	str	r2, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800094e:	6808      	ldr	r0, [r1, #0]
 8000950:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000954:	1ac0      	subs	r0, r0, r3
 8000956:	bf18      	it	ne
 8000958:	2001      	movne	r0, #1
 800095a:	b003      	add	sp, #12
 800095c:	bd30      	pop	{r4, r5, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000968:	b570      	push	{r4, r5, r6, lr}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800096a:	4c4a      	ldr	r4, [pc, #296]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x12c>)
 800096c:	68a3      	ldr	r3, [r4, #8]
 800096e:	f013 0f0c 	tst.w	r3, #12
 8000972:	d009      	beq.n	8000988 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000974:	68a3      	ldr	r3, [r4, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000976:	f003 030c 	and.w	r3, r3, #12
 800097a:	2b0c      	cmp	r3, #12
 800097c:	d126      	bne.n	80009cc <HAL_RCC_GetSysClockFreq+0x64>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800097e:	68e3      	ldr	r3, [r4, #12]
 8000980:	f003 0303 	and.w	r3, r3, #3
 8000984:	2b01      	cmp	r3, #1
 8000986:	d121      	bne.n	80009cc <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000988:	6822      	ldr	r2, [r4, #0]
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x12c>)
 800098c:	0712      	lsls	r2, r2, #28
 800098e:	d40a      	bmi.n	80009a6 <HAL_RCC_GetSysClockFreq+0x3e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8000990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000994:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000998:	fa92 f2a2 	rbit	r2, r2
 800099c:	fab2 f282 	clz	r2, r2
 80009a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80009a4:	e007      	b.n	80009b6 <HAL_RCC_GetSysClockFreq+0x4e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	22f0      	movs	r2, #240	; 0xf0
 80009aa:	fa92 f2a2 	rbit	r2, r2
 80009ae:	fab2 f282 	clz	r2, r2
 80009b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009b6:	40d3      	lsrs	r3, r2
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80009b8:	4a37      	ldr	r2, [pc, #220]	; (8000a98 <HAL_RCC_GetSysClockFreq+0x130>)
 80009ba:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80009be:	68a3      	ldr	r3, [r4, #8]
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80009c0:	f013 0f0c 	tst.w	r3, #12
 80009c4:	bf0c      	ite	eq
 80009c6:	4630      	moveq	r0, r6
 80009c8:	2000      	movne	r0, #0
 80009ca:	e011      	b.n	80009f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80009cc:	68a3      	ldr	r3, [r4, #8]
 80009ce:	f003 030c 	and.w	r3, r3, #12
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d007      	beq.n	80009e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x12c>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f003 030c 	and.w	r3, r3, #12
 80009de:	2b08      	cmp	r3, #8
 80009e0:	d104      	bne.n	80009ec <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80009e2:	482e      	ldr	r0, [pc, #184]	; (8000a9c <HAL_RCC_GetSysClockFreq+0x134>)
 80009e4:	e000      	b.n	80009e8 <HAL_RCC_GetSysClockFreq+0x80>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80009e6:	482e      	ldr	r0, [pc, #184]	; (8000aa0 <HAL_RCC_GetSysClockFreq+0x138>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80009e8:	2600      	movs	r6, #0
 80009ea:	e001      	b.n	80009f0 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 80009ec:	2000      	movs	r0, #0
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80009ee:	4606      	mov	r6, r0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80009f0:	68a3      	ldr	r3, [r4, #8]
 80009f2:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x12c>)
 80009f4:	f003 030c 	and.w	r3, r3, #12
 80009f8:	2b0c      	cmp	r3, #12
 80009fa:	d149      	bne.n	8000a90 <HAL_RCC_GetSysClockFreq+0x128>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80009fc:	68d1      	ldr	r1, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 80009fe:	68d3      	ldr	r3, [r2, #12]
 8000a00:	2070      	movs	r0, #112	; 0x70
 8000a02:	fa90 f0a0 	rbit	r0, r0
 8000a06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000a0a:	fab0 f080 	clz	r0, r0
 8000a0e:	fa23 f000 	lsr.w	r0, r3, r0

    switch (pllsource)
 8000a12:	f001 0303 	and.w	r3, r1, #3
 8000a16:	2b02      	cmp	r3, #2

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8000a18:	f100 0501 	add.w	r5, r0, #1
 8000a1c:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00

    switch (pllsource)
 8000a20:	d00c      	beq.n	8000a3c <HAL_RCC_GetSysClockFreq+0xd4>
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d119      	bne.n	8000a5a <HAL_RCC_GetSysClockFreq+0xf2>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000a26:	68d3      	ldr	r3, [r2, #12]
 8000a28:	fa91 f1a1 	rbit	r1, r1
 8000a2c:	fab1 f181 	clz	r1, r1
 8000a30:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000a34:	fa23 f101 	lsr.w	r1, r3, r1
 8000a38:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <HAL_RCC_GetSysClockFreq+0x134>)
 8000a3a:	e009      	b.n	8000a50 <HAL_RCC_GetSysClockFreq+0xe8>
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;

    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000a3c:	68d3      	ldr	r3, [r2, #12]
 8000a3e:	fa91 f1a1 	rbit	r1, r1
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_RCC_GetSysClockFreq+0x138>)
 8000a44:	fab1 f181 	clz	r1, r1
 8000a48:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000a4c:	fa23 f101 	lsr.w	r1, r3, r1
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000a50:	fbb2 f0f5 	udiv	r0, r2, r5
 8000a54:	fb00 f301 	mul.w	r3, r0, r1
      break;
 8000a58:	e00b      	b.n	8000a72 <HAL_RCC_GetSysClockFreq+0x10a>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000a5a:	68d2      	ldr	r2, [r2, #12]
 8000a5c:	fa91 f1a1 	rbit	r1, r1
 8000a60:	fab1 f181 	clz	r1, r1
 8000a64:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8000a68:	40ca      	lsrs	r2, r1
 8000a6a:	fbb6 f0f5 	udiv	r0, r6, r5
 8000a6e:	fb00 f302 	mul.w	r3, r0, r2
      break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8000a72:	68e2      	ldr	r2, [r4, #12]
 8000a74:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
 8000a78:	fa90 f0a0 	rbit	r0, r0
 8000a7c:	fab0 f080 	clz	r0, r0
    sysclockfreq = pllvco/pllr;
 8000a80:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
 8000a84:	fa22 f000 	lsr.w	r0, r2, r0
 8000a88:	3001      	adds	r0, #1
 8000a8a:	0040      	lsls	r0, r0, #1
 8000a8c:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 8000a90:	bd70      	pop	{r4, r5, r6, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	08004cd0 	.word	0x08004cd0
 8000a9c:	007a1200 	.word	0x007a1200
 8000aa0:	00f42400 	.word	0x00f42400

08000aa4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000aa4:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000aaa:	06dd      	lsls	r5, r3, #27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aac:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000aae:	f140 808f 	bpl.w	8000bd0 <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000ab2:	4d9e      	ldr	r5, [pc, #632]	; (8000d2c <HAL_RCC_OscConfig+0x288>)
 8000ab4:	68ab      	ldr	r3, [r5, #8]
 8000ab6:	f013 0f0c 	tst.w	r3, #12
 8000aba:	d153      	bne.n	8000b64 <HAL_RCC_OscConfig+0xc0>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000abc:	682b      	ldr	r3, [r5, #0]
 8000abe:	0798      	lsls	r0, r3, #30
 8000ac0:	d503      	bpl.n	8000aca <HAL_RCC_OscConfig+0x26>
 8000ac2:	69a3      	ldr	r3, [r4, #24]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f000 8256 	beq.w	8000f76 <HAL_RCC_OscConfig+0x4d2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000aca:	682a      	ldr	r2, [r5, #0]
 8000acc:	4b97      	ldr	r3, [pc, #604]	; (8000d2c <HAL_RCC_OscConfig+0x288>)
 8000ace:	6a20      	ldr	r0, [r4, #32]
 8000ad0:	0711      	lsls	r1, r2, #28
 8000ad2:	bf56      	itet	pl
 8000ad4:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8000ad8:	681b      	ldrmi	r3, [r3, #0]
 8000ada:	091b      	lsrpl	r3, r3, #4
 8000adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ae0:	4283      	cmp	r3, r0
 8000ae2:	d216      	bcs.n	8000b12 <HAL_RCC_OscConfig+0x6e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ae4:	f7ff fefe 	bl	80008e4 <RCC_SetFlashLatencyFromMSIRange>
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	f040 8244 	bne.w	8000f76 <HAL_RCC_OscConfig+0x4d2>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000aee:	682b      	ldr	r3, [r5, #0]
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	602b      	str	r3, [r5, #0]
 8000af6:	682b      	ldr	r3, [r5, #0]
 8000af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000afc:	6a23      	ldr	r3, [r4, #32]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b02:	686b      	ldr	r3, [r5, #4]
 8000b04:	69e2      	ldr	r2, [r4, #28]
 8000b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b0e:	606b      	str	r3, [r5, #4]
 8000b10:	e014      	b.n	8000b3c <HAL_RCC_OscConfig+0x98>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b12:	682b      	ldr	r3, [r5, #0]
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	602b      	str	r3, [r5, #0]
 8000b1a:	682b      	ldr	r3, [r5, #0]
 8000b1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b20:	4303      	orrs	r3, r0
 8000b22:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b24:	686b      	ldr	r3, [r5, #4]
 8000b26:	69e2      	ldr	r2, [r4, #28]
 8000b28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b30:	606b      	str	r3, [r5, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b32:	f7ff fed7 	bl	80008e4 <RCC_SetFlashLatencyFromMSIRange>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	f040 821d 	bne.w	8000f76 <HAL_RCC_OscConfig+0x4d2>
            return HAL_ERROR;
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000b3c:	f7ff ff14 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 8000b40:	68ab      	ldr	r3, [r5, #8]
 8000b42:	22f0      	movs	r2, #240	; 0xf0
 8000b44:	fa92 f2a2 	rbit	r2, r2
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b50:	40d3      	lsrs	r3, r2
 8000b52:	4a77      	ldr	r2, [pc, #476]	; (8000d30 <HAL_RCC_OscConfig+0x28c>)
 8000b54:	5cd3      	ldrb	r3, [r2, r3]
 8000b56:	40d8      	lsrs	r0, r3
 8000b58:	4b76      	ldr	r3, [pc, #472]	; (8000d34 <HAL_RCC_OscConfig+0x290>)
 8000b5a:	6018      	str	r0, [r3, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff fd13 	bl	8000588 <HAL_InitTick>
 8000b62:	e035      	b.n	8000bd0 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b64:	6983      	ldr	r3, [r0, #24]
 8000b66:	b31b      	cbz	r3, 8000bb0 <HAL_RCC_OscConfig+0x10c>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000b68:	682b      	ldr	r3, [r5, #0]
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b70:	f7ff fd32 	bl	80005d8 <HAL_GetTick>
 8000b74:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000b76:	682a      	ldr	r2, [r5, #0]
 8000b78:	4b6c      	ldr	r3, [pc, #432]	; (8000d2c <HAL_RCC_OscConfig+0x288>)
 8000b7a:	0792      	lsls	r2, r2, #30
 8000b7c:	d406      	bmi.n	8000b8c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b7e:	f7ff fd2b 	bl	80005d8 <HAL_GetTick>
 8000b82:	1b80      	subs	r0, r0, r6
 8000b84:	2802      	cmp	r0, #2
 8000b86:	d9f6      	bls.n	8000b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b88:	2003      	movs	r0, #3
 8000b8a:	e1f5      	b.n	8000f78 <HAL_RCC_OscConfig+0x4d4>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	f042 0208 	orr.w	r2, r2, #8
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8000b9a:	6a22      	ldr	r2, [r4, #32]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	69e1      	ldr	r1, [r4, #28]
 8000ba4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000ba8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	e00f      	b.n	8000bd0 <HAL_RCC_OscConfig+0x12c>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	f023 0301 	bic.w	r3, r3, #1
 8000bb6:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fd0e 	bl	80005d8 <HAL_GetTick>
 8000bbc:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000bbe:	682b      	ldr	r3, [r5, #0]
 8000bc0:	079f      	lsls	r7, r3, #30
 8000bc2:	d505      	bpl.n	8000bd0 <HAL_RCC_OscConfig+0x12c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bc4:	f7ff fd08 	bl	80005d8 <HAL_GetTick>
 8000bc8:	1b80      	subs	r0, r0, r6
 8000bca:	2802      	cmp	r0, #2
 8000bcc:	d9f7      	bls.n	8000bbe <HAL_RCC_OscConfig+0x11a>
 8000bce:	e7db      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	07de      	lsls	r6, r3, #31
 8000bd4:	d403      	bmi.n	8000bde <HAL_RCC_OscConfig+0x13a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	079d      	lsls	r5, r3, #30
 8000bda:	d448      	bmi.n	8000c6e <HAL_RCC_OscConfig+0x1ca>
 8000bdc:	e09f      	b.n	8000d1e <HAL_RCC_OscConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8000bde:	4d53      	ldr	r5, [pc, #332]	; (8000d2c <HAL_RCC_OscConfig+0x288>)
 8000be0:	68ab      	ldr	r3, [r5, #8]
 8000be2:	f003 030c 	and.w	r3, r3, #12
 8000be6:	2b08      	cmp	r3, #8
 8000be8:	d009      	beq.n	8000bfe <HAL_RCC_OscConfig+0x15a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bea:	68ab      	ldr	r3, [r5, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b0c      	cmp	r3, #12
 8000bf2:	d10b      	bne.n	8000c0c <HAL_RCC_OscConfig+0x168>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bf4:	68eb      	ldr	r3, [r5, #12]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d106      	bne.n	8000c0c <HAL_RCC_OscConfig+0x168>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	0398      	lsls	r0, r3, #14
 8000c02:	d5e8      	bpl.n	8000bd6 <HAL_RCC_OscConfig+0x132>
 8000c04:	6863      	ldr	r3, [r4, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1e5      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x132>
 8000c0a:	e1b4      	b.n	8000f76 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c0c:	6863      	ldr	r3, [r4, #4]
 8000c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c12:	d006      	beq.n	8000c22 <HAL_RCC_OscConfig+0x17e>
 8000c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c18:	d108      	bne.n	8000c2c <HAL_RCC_OscConfig+0x188>
 8000c1a:	682b      	ldr	r3, [r5, #0]
 8000c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c20:	602b      	str	r3, [r5, #0]
 8000c22:	682b      	ldr	r3, [r5, #0]
 8000c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c28:	602b      	str	r3, [r5, #0]
 8000c2a:	e008      	b.n	8000c3e <HAL_RCC_OscConfig+0x19a>
 8000c2c:	682a      	ldr	r2, [r5, #0]
 8000c2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c32:	602a      	str	r2, [r5, #0]
 8000c34:	682a      	ldr	r2, [r5, #0]
 8000c36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c3a:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c3c:	b15b      	cbz	r3, 8000c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c3e:	f7ff fccb 	bl	80005d8 <HAL_GetTick>
 8000c42:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000c44:	682b      	ldr	r3, [r5, #0]
 8000c46:	0399      	lsls	r1, r3, #14
 8000c48:	d4c5      	bmi.n	8000bd6 <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c4a:	f7ff fcc5 	bl	80005d8 <HAL_GetTick>
 8000c4e:	1b80      	subs	r0, r0, r6
 8000c50:	2864      	cmp	r0, #100	; 0x64
 8000c52:	d9f7      	bls.n	8000c44 <HAL_RCC_OscConfig+0x1a0>
 8000c54:	e798      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c56:	f7ff fcbf 	bl	80005d8 <HAL_GetTick>
 8000c5a:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000c5c:	682b      	ldr	r3, [r5, #0]
 8000c5e:	039a      	lsls	r2, r3, #14
 8000c60:	d5b9      	bpl.n	8000bd6 <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c62:	f7ff fcb9 	bl	80005d8 <HAL_GetTick>
 8000c66:	1b80      	subs	r0, r0, r6
 8000c68:	2864      	cmp	r0, #100	; 0x64
 8000c6a:	d9f7      	bls.n	8000c5c <HAL_RCC_OscConfig+0x1b8>
 8000c6c:	e78c      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000c6e:	4d2f      	ldr	r5, [pc, #188]	; (8000d2c <HAL_RCC_OscConfig+0x288>)
 8000c70:	68ab      	ldr	r3, [r5, #8]
 8000c72:	f003 030c 	and.w	r3, r3, #12
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	d009      	beq.n	8000c8e <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c7a:	68ab      	ldr	r3, [r5, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000c7c:	f003 030c 	and.w	r3, r3, #12
 8000c80:	2b0c      	cmp	r3, #12
 8000c82:	d11a      	bne.n	8000cba <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c84:	68eb      	ldr	r3, [r5, #12]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d115      	bne.n	8000cba <HAL_RCC_OscConfig+0x216>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c8e:	682b      	ldr	r3, [r5, #0]
 8000c90:	055b      	lsls	r3, r3, #21
 8000c92:	d503      	bpl.n	8000c9c <HAL_RCC_OscConfig+0x1f8>
 8000c94:	68e3      	ldr	r3, [r4, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 816d 	beq.w	8000f76 <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9c:	686b      	ldr	r3, [r5, #4]
 8000c9e:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 8000ca2:	fa92 f2a2 	rbit	r2, r2
 8000ca6:	6921      	ldr	r1, [r4, #16]
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb0:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	606b      	str	r3, [r5, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cb8:	e031      	b.n	8000d1e <HAL_RCC_OscConfig+0x27a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cba:	68e3      	ldr	r3, [r4, #12]
 8000cbc:	b1fb      	cbz	r3, 8000cfe <HAL_RCC_OscConfig+0x25a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cbe:	682b      	ldr	r3, [r5, #0]
 8000cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fc87 	bl	80005d8 <HAL_GetTick>
 8000cca:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	4817      	ldr	r0, [pc, #92]	; (8000d2c <HAL_RCC_OscConfig+0x288>)
 8000cd0:	055f      	lsls	r7, r3, #21
 8000cd2:	d405      	bmi.n	8000ce0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cd4:	f7ff fc80 	bl	80005d8 <HAL_GetTick>
 8000cd8:	1b80      	subs	r0, r0, r6
 8000cda:	2802      	cmp	r0, #2
 8000cdc:	d9f6      	bls.n	8000ccc <HAL_RCC_OscConfig+0x228>
 8000cde:	e753      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce0:	6843      	ldr	r3, [r0, #4]
 8000ce2:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 8000ce6:	fa92 f2a2 	rbit	r2, r2
 8000cea:	6921      	ldr	r1, [r4, #16]
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	6043      	str	r3, [r0, #4]
 8000cfc:	e00f      	b.n	8000d1e <HAL_RCC_OscConfig+0x27a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cfe:	682b      	ldr	r3, [r5, #0]
 8000d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d04:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d06:	f7ff fc67 	bl	80005d8 <HAL_GetTick>
 8000d0a:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000d0c:	682b      	ldr	r3, [r5, #0]
 8000d0e:	0558      	lsls	r0, r3, #21
 8000d10:	d505      	bpl.n	8000d1e <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d12:	f7ff fc61 	bl	80005d8 <HAL_GetTick>
 8000d16:	1b80      	subs	r0, r0, r6
 8000d18:	2802      	cmp	r0, #2
 8000d1a:	d9f7      	bls.n	8000d0c <HAL_RCC_OscConfig+0x268>
 8000d1c:	e734      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	0719      	lsls	r1, r3, #28
 8000d22:	d409      	bmi.n	8000d38 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	075a      	lsls	r2, r3, #29
 8000d28:	d42f      	bmi.n	8000d8a <HAL_RCC_OscConfig+0x2e6>
 8000d2a:	e097      	b.n	8000e5c <HAL_RCC_OscConfig+0x3b8>
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	08004cb5 	.word	0x08004cb5
 8000d34:	20000000 	.word	0x20000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d38:	6963      	ldr	r3, [r4, #20]
 8000d3a:	4d91      	ldr	r5, [pc, #580]	; (8000f80 <HAL_RCC_OscConfig+0x4dc>)
 8000d3c:	b193      	cbz	r3, 8000d64 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d3e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d4a:	f7ff fc45 	bl	80005d8 <HAL_GetTick>
 8000d4e:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000d50:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000d54:	079b      	lsls	r3, r3, #30
 8000d56:	d4e5      	bmi.n	8000d24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d58:	f7ff fc3e 	bl	80005d8 <HAL_GetTick>
 8000d5c:	1b80      	subs	r0, r0, r6
 8000d5e:	2802      	cmp	r0, #2
 8000d60:	d9f6      	bls.n	8000d50 <HAL_RCC_OscConfig+0x2ac>
 8000d62:	e711      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d64:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d70:	f7ff fc32 	bl	80005d8 <HAL_GetTick>
 8000d74:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000d76:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000d7a:	079f      	lsls	r7, r3, #30
 8000d7c:	d5d2      	bpl.n	8000d24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d7e:	f7ff fc2b 	bl	80005d8 <HAL_GetTick>
 8000d82:	1b80      	subs	r0, r0, r6
 8000d84:	2802      	cmp	r0, #2
 8000d86:	d9f6      	bls.n	8000d76 <HAL_RCC_OscConfig+0x2d2>
 8000d88:	e6fe      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000d8a:	4d7d      	ldr	r5, [pc, #500]	; (8000f80 <HAL_RCC_OscConfig+0x4dc>)
 8000d8c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000d8e:	00d8      	lsls	r0, r3, #3
 8000d90:	d40a      	bmi.n	8000da8 <HAL_RCC_OscConfig+0x304>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	65ab      	str	r3, [r5, #88]	; 0x58
 8000d9a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000da4:	2701      	movs	r7, #1
 8000da6:	e000      	b.n	8000daa <HAL_RCC_OscConfig+0x306>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8000da8:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000daa:	4e76      	ldr	r6, [pc, #472]	; (8000f84 <HAL_RCC_OscConfig+0x4e0>)
 8000dac:	6833      	ldr	r3, [r6, #0]
 8000dae:	05d9      	lsls	r1, r3, #23
 8000db0:	d503      	bpl.n	8000dba <HAL_RCC_OscConfig+0x316>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db2:	68a3      	ldr	r3, [r4, #8]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d111      	bne.n	8000ddc <HAL_RCC_OscConfig+0x338>
 8000db8:	e018      	b.n	8000dec <HAL_RCC_OscConfig+0x348>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dba:	6833      	ldr	r3, [r6, #0]
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc0:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fc09 	bl	80005d8 <HAL_GetTick>
 8000dc6:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dc8:	6833      	ldr	r3, [r6, #0]
 8000dca:	05da      	lsls	r2, r3, #23
 8000dcc:	d4f1      	bmi.n	8000db2 <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dce:	f7ff fc03 	bl	80005d8 <HAL_GetTick>
 8000dd2:	ebc8 0000 	rsb	r0, r8, r0
 8000dd6:	2802      	cmp	r0, #2
 8000dd8:	d9f6      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x324>
 8000dda:	e6d5      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ddc:	2b05      	cmp	r3, #5
 8000dde:	d10c      	bne.n	8000dfa <HAL_RCC_OscConfig+0x356>
 8000de0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8000dec:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8000df8:	e00c      	b.n	8000e14 <HAL_RCC_OscConfig+0x370>
 8000dfa:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000dfe:	f022 0201 	bic.w	r2, r2, #1
 8000e02:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8000e06:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000e0a:	f022 0204 	bic.w	r2, r2, #4
 8000e0e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e12:	b173      	cbz	r3, 8000e32 <HAL_RCC_OscConfig+0x38e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e14:	f7ff fbe0 	bl	80005d8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e18:	f241 3888 	movw	r8, #5000	; 0x1388

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e1c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000e1e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000e22:	079b      	lsls	r3, r3, #30
 8000e24:	d40e      	bmi.n	8000e44 <HAL_RCC_OscConfig+0x3a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e26:	f7ff fbd7 	bl	80005d8 <HAL_GetTick>
 8000e2a:	1b80      	subs	r0, r0, r6
 8000e2c:	4540      	cmp	r0, r8
 8000e2e:	d9f6      	bls.n	8000e1e <HAL_RCC_OscConfig+0x37a>
 8000e30:	e6aa      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e32:	f7ff fbd1 	bl	80005d8 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e36:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e3a:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000e3c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000e40:	0798      	lsls	r0, r3, #30
 8000e42:	d405      	bmi.n	8000e50 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e44:	b157      	cbz	r7, 8000e5c <HAL_RCC_OscConfig+0x3b8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e46:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e4e:	e005      	b.n	8000e5c <HAL_RCC_OscConfig+0x3b8>
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e50:	f7ff fbc2 	bl	80005d8 <HAL_GetTick>
 8000e54:	1b80      	subs	r0, r0, r6
 8000e56:	4540      	cmp	r0, r8
 8000e58:	d9f0      	bls.n	8000e3c <HAL_RCC_OscConfig+0x398>
 8000e5a:	e695      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	0699      	lsls	r1, r3, #26
 8000e60:	d402      	bmi.n	8000e68 <HAL_RCC_OscConfig+0x3c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000e62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e64:	bb4a      	cbnz	r2, 8000eba <HAL_RCC_OscConfig+0x416>
 8000e66:	e05f      	b.n	8000f28 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e6a:	4d45      	ldr	r5, [pc, #276]	; (8000f80 <HAL_RCC_OscConfig+0x4dc>)
 8000e6c:	b193      	cbz	r3, 8000e94 <HAL_RCC_OscConfig+0x3f0>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000e6e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fbad 	bl	80005d8 <HAL_GetTick>
 8000e7e:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000e80:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000e84:	079a      	lsls	r2, r3, #30
 8000e86:	d4ec      	bmi.n	8000e62 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e88:	f7ff fba6 	bl	80005d8 <HAL_GetTick>
 8000e8c:	1b80      	subs	r0, r0, r6
 8000e8e:	2802      	cmp	r0, #2
 8000e90:	d9f6      	bls.n	8000e80 <HAL_RCC_OscConfig+0x3dc>
 8000e92:	e679      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000e94:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea0:	f7ff fb9a 	bl	80005d8 <HAL_GetTick>
 8000ea4:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8000ea6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000eaa:	079b      	lsls	r3, r3, #30
 8000eac:	d5d9      	bpl.n	8000e62 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000eae:	f7ff fb93 	bl	80005d8 <HAL_GetTick>
 8000eb2:	1b80      	subs	r0, r0, r6
 8000eb4:	2802      	cmp	r0, #2
 8000eb6:	d9f6      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x402>
 8000eb8:	e666      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eba:	4d31      	ldr	r5, [pc, #196]	; (8000f80 <HAL_RCC_OscConfig+0x4dc>)
 8000ebc:	68ab      	ldr	r3, [r5, #8]
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	2b0c      	cmp	r3, #12
 8000ec4:	d057      	beq.n	8000f76 <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec6:	682b      	ldr	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ec8:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ece:	602b      	str	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ed0:	d138      	bne.n	8000f44 <HAL_RCC_OscConfig+0x4a0>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed2:	f7ff fb81 	bl	80005d8 <HAL_GetTick>
 8000ed6:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	4829      	ldr	r0, [pc, #164]	; (8000f80 <HAL_RCC_OscConfig+0x4dc>)
 8000edc:	019f      	lsls	r7, r3, #6
 8000ede:	d425      	bmi.n	8000f2c <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ee0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8000ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ee4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ee6:	06f6      	lsls	r6, r6, #27
 8000ee8:	ea46 2103 	orr.w	r1, r6, r3, lsl #8
 8000eec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000eee:	3a01      	subs	r2, #1
 8000ef0:	430b      	orrs	r3, r1
 8000ef2:	ea43 1102 	orr.w	r1, r3, r2, lsl #4
 8000ef6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ef8:	085b      	lsrs	r3, r3, #1
 8000efa:	3b01      	subs	r3, #1
 8000efc:	ea41 5243 	orr.w	r2, r1, r3, lsl #21
 8000f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	3b01      	subs	r3, #1
 8000f06:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
 8000f0a:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f0c:	6803      	ldr	r3, [r0, #0]
 8000f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f12:	6003      	str	r3, [r0, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000f14:	68c3      	ldr	r3, [r0, #12]
 8000f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f1a:	60c3      	str	r3, [r0, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fb5c 	bl	80005d8 <HAL_GetTick>
 8000f20:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000f22:	682b      	ldr	r3, [r5, #0]
 8000f24:	0199      	lsls	r1, r3, #6
 8000f26:	d507      	bpl.n	8000f38 <HAL_RCC_OscConfig+0x494>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000f28:	2000      	movs	r0, #0
 8000f2a:	e025      	b.n	8000f78 <HAL_RCC_OscConfig+0x4d4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f2c:	f7ff fb54 	bl	80005d8 <HAL_GetTick>
 8000f30:	1b80      	subs	r0, r0, r6
 8000f32:	2802      	cmp	r0, #2
 8000f34:	d9d0      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x434>
 8000f36:	e627      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f38:	f7ff fb4e 	bl	80005d8 <HAL_GetTick>
 8000f3c:	1b00      	subs	r0, r0, r4
 8000f3e:	2802      	cmp	r0, #2
 8000f40:	d9ef      	bls.n	8000f22 <HAL_RCC_OscConfig+0x47e>
 8000f42:	e621      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	011a      	lsls	r2, r3, #4
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000f48:	bf5e      	ittt	pl
 8000f4a:	68eb      	ldrpl	r3, [r5, #12]
 8000f4c:	f023 0303 	bicpl.w	r3, r3, #3
 8000f50:	60eb      	strpl	r3, [r5, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000f52:	68eb      	ldr	r3, [r5, #12]
 8000f54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5c:	60eb      	str	r3, [r5, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fb3b 	bl	80005d8 <HAL_GetTick>
 8000f62:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	019b      	lsls	r3, r3, #6
 8000f68:	d5de      	bpl.n	8000f28 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6a:	f7ff fb35 	bl	80005d8 <HAL_GetTick>
 8000f6e:	1b00      	subs	r0, r0, r4
 8000f70:	2802      	cmp	r0, #2
 8000f72:	d9f7      	bls.n	8000f64 <HAL_RCC_OscConfig+0x4c0>
 8000f74:	e608      	b.n	8000b88 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f76:	2001      	movs	r0, #1
    }
  }
  return HAL_OK;
}
 8000f78:	b002      	add	sp, #8
 8000f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40007000 	.word	0x40007000

08000f88 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f88:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <HAL_RCC_ClockConfig+0x160>)
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f96:	4605      	mov	r5, r0
 8000f98:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f9a:	d30a      	bcc.n	8000fb2 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f9c:	6829      	ldr	r1, [r5, #0]
 8000f9e:	0788      	lsls	r0, r1, #30
 8000fa0:	d514      	bpl.n	8000fcc <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa2:	4852      	ldr	r0, [pc, #328]	; (80010ec <HAL_RCC_ClockConfig+0x164>)
 8000fa4:	6883      	ldr	r3, [r0, #8]
 8000fa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000faa:	68ab      	ldr	r3, [r5, #8]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	6083      	str	r3, [r0, #8]
 8000fb0:	e00c      	b.n	8000fcc <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb2:	6813      	ldr	r3, [r2, #0]
 8000fb4:	f023 0307 	bic.w	r3, r3, #7
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	4299      	cmp	r1, r3
 8000fc4:	d0ea      	beq.n	8000f9c <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fcc:	07ca      	lsls	r2, r1, #31
 8000fce:	d406      	bmi.n	8000fde <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fd0:	4a45      	ldr	r2, [pc, #276]	; (80010e8 <HAL_RCC_ClockConfig+0x160>)
 8000fd2:	6813      	ldr	r3, [r2, #0]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	429e      	cmp	r6, r3
 8000fda:	d351      	bcc.n	8001080 <HAL_RCC_ClockConfig+0xf8>
 8000fdc:	e05a      	b.n	8001094 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fde:	686b      	ldr	r3, [r5, #4]
 8000fe0:	4c42      	ldr	r4, [pc, #264]	; (80010ec <HAL_RCC_ClockConfig+0x164>)
 8000fe2:	2b02      	cmp	r3, #2
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000fe4:	6822      	ldr	r2, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fe6:	d102      	bne.n	8000fee <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000fe8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000fec:	e00a      	b.n	8001004 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d102      	bne.n	8000ff8 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000ff2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000ff6:	e005      	b.n	8001004 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000ff8:	b913      	cbnz	r3, 8001000 <HAL_RCC_ClockConfig+0x78>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000ffa:	f012 0f02 	tst.w	r2, #2
 8000ffe:	e001      	b.n	8001004 <HAL_RCC_ClockConfig+0x7c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001000:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001004:	d0df      	beq.n	8000fc6 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001006:	68a2      	ldr	r2, [r4, #8]
 8001008:	f022 0203 	bic.w	r2, r2, #3
 800100c:	4313      	orrs	r3, r2
 800100e:	60a3      	str	r3, [r4, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001010:	f7ff fae2 	bl	80005d8 <HAL_GetTick>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001014:	686b      	ldr	r3, [r5, #4]
 8001016:	2b02      	cmp	r3, #2
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001018:	4607      	mov	r7, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800101a:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800101e:	d10c      	bne.n	800103a <HAL_RCC_ClockConfig+0xb2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001020:	68a3      	ldr	r3, [r4, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b08      	cmp	r3, #8
 8001028:	d0d2      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800102a:	f7ff fad5 	bl	80005d8 <HAL_GetTick>
 800102e:	1bc0      	subs	r0, r0, r7
 8001030:	4540      	cmp	r0, r8
 8001032:	d9f5      	bls.n	8001020 <HAL_RCC_ClockConfig+0x98>
        {
          return HAL_TIMEOUT;
 8001034:	2003      	movs	r0, #3
 8001036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800103a:	2b03      	cmp	r3, #3
 800103c:	d10a      	bne.n	8001054 <HAL_RCC_ClockConfig+0xcc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800103e:	68a3      	ldr	r3, [r4, #8]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b0c      	cmp	r3, #12
 8001046:	d0c3      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001048:	f7ff fac6 	bl	80005d8 <HAL_GetTick>
 800104c:	1bc0      	subs	r0, r0, r7
 800104e:	4540      	cmp	r0, r8
 8001050:	d9f5      	bls.n	800103e <HAL_RCC_ClockConfig+0xb6>
 8001052:	e7ef      	b.n	8001034 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001054:	b973      	cbnz	r3, 8001074 <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001056:	68a3      	ldr	r3, [r4, #8]
 8001058:	f013 0f0c 	tst.w	r3, #12
 800105c:	d0b8      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800105e:	f7ff fabb 	bl	80005d8 <HAL_GetTick>
 8001062:	1bc0      	subs	r0, r0, r7
 8001064:	4540      	cmp	r0, r8
 8001066:	d9f6      	bls.n	8001056 <HAL_RCC_ClockConfig+0xce>
 8001068:	e7e4      	b.n	8001034 <HAL_RCC_ClockConfig+0xac>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800106a:	f7ff fab5 	bl	80005d8 <HAL_GetTick>
 800106e:	1bc0      	subs	r0, r0, r7
 8001070:	4540      	cmp	r0, r8
 8001072:	d8df      	bhi.n	8001034 <HAL_RCC_ClockConfig+0xac>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001074:	68a3      	ldr	r3, [r4, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b04      	cmp	r3, #4
 800107c:	d1f5      	bne.n	800106a <HAL_RCC_ClockConfig+0xe2>
 800107e:	e7a7      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001080:	6813      	ldr	r3, [r2, #0]
 8001082:	f023 0307 	bic.w	r3, r3, #7
 8001086:	4333      	orrs	r3, r6
 8001088:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800108a:	6813      	ldr	r3, [r2, #0]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	429e      	cmp	r6, r3
 8001092:	d198      	bne.n	8000fc6 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001094:	6829      	ldr	r1, [r5, #0]
 8001096:	4c15      	ldr	r4, [pc, #84]	; (80010ec <HAL_RCC_ClockConfig+0x164>)
 8001098:	f011 0f04 	tst.w	r1, #4
 800109c:	d005      	beq.n	80010aa <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800109e:	68a3      	ldr	r3, [r4, #8]
 80010a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010a4:	68eb      	ldr	r3, [r5, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60a3      	str	r3, [r4, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010aa:	070b      	lsls	r3, r1, #28
 80010ac:	d506      	bpl.n	80010bc <HAL_RCC_ClockConfig+0x134>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010ae:	68a3      	ldr	r3, [r4, #8]
 80010b0:	692a      	ldr	r2, [r5, #16]
 80010b2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010ba:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80010bc:	f7ff fc54 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 80010c0:	68a3      	ldr	r3, [r4, #8]
 80010c2:	22f0      	movs	r2, #240	; 0xf0
 80010c4:	fa92 f2a2 	rbit	r2, r2
 80010c8:	fab2 f282 	clz	r2, r2
 80010cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010d0:	40d3      	lsrs	r3, r2
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_RCC_ClockConfig+0x168>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	40d8      	lsrs	r0, r3
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_RCC_ClockConfig+0x16c>)
 80010da:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fa53 	bl	8000588 <HAL_InitTick>

  return HAL_OK;
 80010e2:	2000      	movs	r0, #0
}
 80010e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010e8:	40022000 	.word	0x40022000
 80010ec:	40021000 	.word	0x40021000
 80010f0:	08004cb5 	.word	0x08004cb5
 80010f4:	20000000 	.word	0x20000000

080010f8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80010f8:	4b01      	ldr	r3, [pc, #4]	; (8001100 <HAL_RCC_GetHCLKFreq+0x8>)
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000000 	.word	0x20000000

08001104 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001106:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	fa92 f2a2 	rbit	r2, r2
 8001110:	fab2 f282 	clz	r2, r2
 8001114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001118:	40d3      	lsrs	r3, r2
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_RCC_GetPCLK1Freq+0x28>)
 800111c:	5cd3      	ldrb	r3, [r2, r3]
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001120:	6810      	ldr	r0, [r2, #0]
}
 8001122:	40d8      	lsrs	r0, r3
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	08004cc5 	.word	0x08004cc5
 8001130:	20000000 	.word	0x20000000

08001134 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001136:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	fa92 f2a2 	rbit	r2, r2
 8001140:	fab2 f282 	clz	r2, r2
 8001144:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001148:	40d3      	lsrs	r3, r2
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_RCC_GetPCLK2Freq+0x28>)
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001150:	6810      	ldr	r0, [r2, #0]
}
 8001152:	40d8      	lsrs	r0, r3
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	08004cc5 	.word	0x08004cc5
 8001160:	20000000 	.word	0x20000000

08001164 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001166:	4b5a      	ldr	r3, [pc, #360]	; (80012d0 <RCCEx_PLLSAI1_Config+0x16c>)
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	f012 0f03 	tst.w	r2, #3
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800116e:	4604      	mov	r4, r0
 8001170:	460e      	mov	r6, r1
 8001172:	461d      	mov	r5, r3
 8001174:	6800      	ldr	r0, [r0, #0]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001176:	d013      	beq.n	80011a0 <RCCEx_PLLSAI1_Config+0x3c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	f002 0203 	and.w	r2, r2, #3
 800117e:	4282      	cmp	r2, r0
 8001180:	d124      	bne.n	80011cc <RCCEx_PLLSAI1_Config+0x68>
       || 
 8001182:	b31a      	cbz	r2, 80011cc <RCCEx_PLLSAI1_Config+0x68>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	2370      	movs	r3, #112	; 0x70
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	fab3 f183 	clz	r1, r3
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
 8001190:	f002 0370 	and.w	r3, r2, #112	; 0x70
 8001194:	40cb      	lsrs	r3, r1
 8001196:	6862      	ldr	r2, [r4, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	4293      	cmp	r3, r2
 800119c:	d116      	bne.n	80011cc <RCCEx_PLLSAI1_Config+0x68>
 800119e:	e025      	b.n	80011ec <RCCEx_PLLSAI1_Config+0x88>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80011a0:	2802      	cmp	r0, #2
 80011a2:	d008      	beq.n	80011b6 <RCCEx_PLLSAI1_Config+0x52>
 80011a4:	2803      	cmp	r0, #3
 80011a6:	d00a      	beq.n	80011be <RCCEx_PLLSAI1_Config+0x5a>
 80011a8:	2801      	cmp	r0, #1
 80011aa:	d10f      	bne.n	80011cc <RCCEx_PLLSAI1_Config+0x68>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	079f      	lsls	r7, r3, #30
 80011b0:	f140 808d 	bpl.w	80012ce <RCCEx_PLLSAI1_Config+0x16a>
 80011b4:	e00c      	b.n	80011d0 <RCCEx_PLLSAI1_Config+0x6c>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80011bc:	e005      	b.n	80011ca <RCCEx_PLLSAI1_Config+0x66>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	0391      	lsls	r1, r2, #14
 80011c2:	d405      	bmi.n	80011d0 <RCCEx_PLLSAI1_Config+0x6c>
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80011ca:	d101      	bne.n	80011d0 <RCCEx_PLLSAI1_Config+0x6c>
 80011cc:	2001      	movs	r0, #1
 80011ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    if(status == HAL_OK)
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 80011d0:	68e9      	ldr	r1, [r5, #12]
 80011d2:	2370      	movs	r3, #112	; 0x70
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	fab3 f283 	clz	r2, r3
 80011dc:	6863      	ldr	r3, [r4, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	4093      	lsls	r3, r2
 80011e2:	f021 0273 	bic.w	r2, r1, #115	; 0x73
 80011e6:	4310      	orrs	r0, r2
 80011e8:	4318      	orrs	r0, r3
 80011ea:	60e8      	str	r0, [r5, #12]
  }
  
  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80011f2:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011f4:	f7ff f9f0 	bl	80005d8 <HAL_GetTick>
 80011f8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80011fa:	682b      	ldr	r3, [r5, #0]
 80011fc:	4934      	ldr	r1, [pc, #208]	; (80012d0 <RCCEx_PLLSAI1_Config+0x16c>)
 80011fe:	011a      	lsls	r2, r3, #4
 8001200:	d506      	bpl.n	8001210 <RCCEx_PLLSAI1_Config+0xac>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001202:	f7ff f9e9 	bl	80005d8 <HAL_GetTick>
 8001206:	1bc0      	subs	r0, r0, r7
 8001208:	2802      	cmp	r0, #2
 800120a:	d9f6      	bls.n	80011fa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_TIMEOUT;
 800120c:	2003      	movs	r0, #3
 800120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001210:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8001214:	68a7      	ldr	r7, [r4, #8]
      }
    }

    if(status == HAL_OK)    
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001216:	b9b6      	cbnz	r6, 8001246 <RCCEx_PLLSAI1_Config+0xe2>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001218:	6908      	ldr	r0, [r1, #16]
 800121a:	fa93 f2a3 	rbit	r2, r3
 800121e:	f04f 4678 	mov.w	r6, #4160749568	; 0xf8000000
 8001222:	fab2 f282 	clz	r2, r2
 8001226:	fa96 f6a6 	rbit	r6, r6
 800122a:	fa07 f302 	lsl.w	r3, r7, r2
 800122e:	68e2      	ldr	r2, [r4, #12]
 8001230:	fab6 f686 	clz	r6, r6
 8001234:	40b2      	lsls	r2, r6
 8001236:	4313      	orrs	r3, r2
 8001238:	f020 4278 	bic.w	r2, r0, #4160749568	; 0xf8000000
 800123c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001240:	431a      	orrs	r2, r3
 8001242:	610a      	str	r2, [r1, #16]
 8001244:	e02d      	b.n	80012a2 <RCCEx_PLLSAI1_Config+0x13e>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001246:	2e01      	cmp	r6, #1
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001248:	6908      	ldr	r0, [r1, #16]
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800124a:	d113      	bne.n	8001274 <RCCEx_PLLSAI1_Config+0x110>
 800124c:	fa93 f2a3 	rbit	r2, r3
 8001250:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001254:	fab2 f282 	clz	r2, r2
 8001258:	fa93 f3a3 	rbit	r3, r3
 800125c:	6926      	ldr	r6, [r4, #16]
 800125e:	0876      	lsrs	r6, r6, #1
 8001260:	fab3 f383 	clz	r3, r3
 8001264:	3e01      	subs	r6, #1
 8001266:	409e      	lsls	r6, r3
 8001268:	fa07 f302 	lsl.w	r3, r7, r2
 800126c:	4333      	orrs	r3, r6
 800126e:	f420 02c0 	bic.w	r2, r0, #6291456	; 0x600000
 8001272:	e012      	b.n	800129a <RCCEx_PLLSAI1_Config+0x136>
 8001274:	fa93 f2a3 	rbit	r2, r3
 8001278:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800127c:	fab2 f282 	clz	r2, r2
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	6966      	ldr	r6, [r4, #20]
 8001286:	0876      	lsrs	r6, r6, #1
 8001288:	fab3 f383 	clz	r3, r3
 800128c:	3e01      	subs	r6, #1
 800128e:	409e      	lsls	r6, r3
 8001290:	fa07 f302 	lsl.w	r3, r7, r2
 8001294:	4333      	orrs	r3, r6
 8001296:	f020 62c0 	bic.w	r2, r0, #100663296	; 0x6000000
 800129a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800129e:	4313      	orrs	r3, r2
 80012a0:	610b      	str	r3, [r1, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80012a2:	682b      	ldr	r3, [r5, #0]
 80012a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012a8:	602b      	str	r3, [r5, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012aa:	f7ff f995 	bl	80005d8 <HAL_GetTick>
 80012ae:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <RCCEx_PLLSAI1_Config+0x16c>)
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	d405      	bmi.n	80012c4 <RCCEx_PLLSAI1_Config+0x160>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80012b8:	f7ff f98e 	bl	80005d8 <HAL_GetTick>
 80012bc:	1b80      	subs	r0, r0, r6
 80012be:	2802      	cmp	r0, #2
 80012c0:	d9f6      	bls.n	80012b0 <RCCEx_PLLSAI1_Config+0x14c>
 80012c2:	e7a3      	b.n	800120c <RCCEx_PLLSAI1_Config+0xa8>
      }

      if(status == HAL_OK)    
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80012c4:	6911      	ldr	r1, [r2, #16]
 80012c6:	69a3      	ldr	r3, [r4, #24]
 80012c8:	430b      	orrs	r3, r1
 80012ca:	6113      	str	r3, [r2, #16]
 80012cc:	2000      	movs	r0, #0
      }
    }
  }
  
  return status;
}
 80012ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80012d8:	6805      	ldr	r5, [r0, #0]
 80012da:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012de:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80012e0:	d01f      	beq.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80012e2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80012e4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80012e8:	d004      	beq.n	80012f4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80012ea:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80012ee:	d00c      	beq.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x36>
 80012f0:	b9b1      	cbnz	r1, 8001320 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80012f2:	e005      	b.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80012f4:	4a96      	ldr	r2, [pc, #600]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012f6:	68d3      	ldr	r3, [r2, #12]
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80012fe:	e004      	b.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x36>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001300:	3004      	adds	r0, #4
 8001302:	f7ff ff2f 	bl	8001164 <RCCEx_PLLSAI1_Config>
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 8001306:	4605      	mov	r5, r0
 8001308:	b958      	cbnz	r0, 8001322 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800130a:	4991      	ldr	r1, [pc, #580]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800130c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001310:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001314:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001316:	4313      	orrs	r3, r2
 8001318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800131c:	2500      	movs	r5, #0
 800131e:	e000      	b.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001320:	2501      	movs	r5, #1
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	039e      	lsls	r6, r3, #14
 8001326:	d55a      	bpl.n	80013de <HAL_RCCEx_PeriphCLKConfig+0x10a>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001328:	4e89      	ldr	r6, [pc, #548]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800132a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800132c:	00d8      	lsls	r0, r3, #3
 800132e:	d40a      	bmi.n	8001346 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001330:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001336:	65b3      	str	r3, [r6, #88]	; 0x58
 8001338:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001342:	2701      	movs	r7, #1
 8001344:	e000      	b.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0x74>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001346:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001348:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8001554 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800134c:	f8d8 3000 	ldr.w	r3, [r8]
 8001350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001354:	f8c8 3000 	str.w	r3, [r8]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001358:	f7ff f93e 	bl	80005d8 <HAL_GetTick>
 800135c:	4681      	mov	r9, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800135e:	f8d8 3000 	ldr.w	r3, [r8]
 8001362:	05d9      	lsls	r1, r3, #23
 8001364:	d406      	bmi.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001366:	f7ff f937 	bl	80005d8 <HAL_GetTick>
 800136a:	ebc9 0000 	rsb	r0, r9, r0
 800136e:	2802      	cmp	r0, #2
 8001370:	d9f5      	bls.n	800135e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001372:	e02e      	b.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 8001374:	bb75      	cbnz	r5, 80013d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001376:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800137a:	4a75      	ldr	r2, [pc, #468]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800137c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001380:	d014      	beq.n	80013ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001382:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001384:	428b      	cmp	r3, r1
 8001386:	d011      	beq.n	80013ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001388:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800138c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8001390:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001394:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001398:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800139c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 80013a0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80013a4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80013a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80013ac:	07da      	lsls	r2, r3, #31
 80013ae:	f140 80c2 	bpl.w	8001536 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff f911 	bl	80005d8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b6:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	4680      	mov	r8, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80013bc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80013c0:	079b      	lsls	r3, r3, #30
 80013c2:	f100 80b8 	bmi.w	8001536 <HAL_RCCEx_PeriphCLKConfig+0x262>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff f907 	bl	80005d8 <HAL_GetTick>
 80013ca:	ebc8 0000 	rsb	r0, r8, r0
 80013ce:	4548      	cmp	r0, r9
 80013d0:	d9f4      	bls.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0xe8>

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 80013d2:	2503      	movs	r5, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013d4:	b11f      	cbz	r7, 80013de <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d6:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80013d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013dc:	65b3      	str	r3, [r6, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	07df      	lsls	r7, r3, #31
 80013e2:	d508      	bpl.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80013e4:	485a      	ldr	r0, [pc, #360]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013e6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80013ea:	f022 0103 	bic.w	r1, r2, #3
 80013ee:	6a22      	ldr	r2, [r4, #32]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80013f6:	079e      	lsls	r6, r3, #30
 80013f8:	d508      	bpl.n	800140c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80013fa:	4855      	ldr	r0, [pc, #340]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013fc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001400:	f022 010c 	bic.w	r1, r2, #12
 8001404:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001406:	430a      	orrs	r2, r1
 8001408:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800140c:	0698      	lsls	r0, r3, #26
 800140e:	d508      	bpl.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001410:	484f      	ldr	r0, [pc, #316]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001412:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001416:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 800141a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800141c:	430a      	orrs	r2, r1
 800141e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001422:	0599      	lsls	r1, r3, #22
 8001424:	d508      	bpl.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001426:	484a      	ldr	r0, [pc, #296]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001428:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800142c:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8001430:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001432:	430a      	orrs	r2, r1
 8001434:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001438:	055a      	lsls	r2, r3, #21
 800143a:	d508      	bpl.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800143c:	4844      	ldr	r0, [pc, #272]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800143e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001442:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8001446:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001448:	430a      	orrs	r2, r1
 800144a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800144e:	065f      	lsls	r7, r3, #25
 8001450:	d508      	bpl.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0x190>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001452:	483f      	ldr	r0, [pc, #252]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001454:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001458:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800145c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800145e:	430a      	orrs	r2, r1
 8001460:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001464:	05de      	lsls	r6, r3, #23
 8001466:	d508      	bpl.n	800147a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001468:	4839      	ldr	r0, [pc, #228]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800146a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800146e:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8001472:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001474:	430a      	orrs	r2, r1
 8001476:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800147a:	0498      	lsls	r0, r3, #18
 800147c:	d51a      	bpl.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800147e:	4a34      	ldr	r2, [pc, #208]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001480:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001482:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001486:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800148a:	430b      	orrs	r3, r1

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800148c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001494:	d104      	bne.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001496:	68d3      	ldr	r3, [r2, #12]
 8001498:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800149c:	60d3      	str	r3, [r2, #12]
 800149e:	e009      	b.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80014a0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014a4:	d106      	bne.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014a6:	2101      	movs	r1, #1
 80014a8:	1d20      	adds	r0, r4, #4
 80014aa:	f7ff fe5b 	bl	8001164 <RCCEx_PLLSAI1_Config>
      
        if(ret != HAL_OK)
 80014ae:	2800      	cmp	r0, #0
 80014b0:	bf18      	it	ne
 80014b2:	4605      	movne	r5, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	0359      	lsls	r1, r3, #13
 80014b8:	d51a      	bpl.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80014ba:	4a25      	ldr	r2, [pc, #148]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80014be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014c2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014c6:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80014c8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80014cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80014d0:	d104      	bne.n	80014dc <HAL_RCCEx_PeriphCLKConfig+0x208>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80014d2:	68d3      	ldr	r3, [r2, #12]
 80014d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014d8:	60d3      	str	r3, [r2, #12]
 80014da:	e009      	b.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80014dc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80014e0:	d106      	bne.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014e2:	2101      	movs	r1, #1
 80014e4:	1d20      	adds	r0, r4, #4
 80014e6:	f7ff fe3d 	bl	8001164 <RCCEx_PLLSAI1_Config>
      
      if(ret != HAL_OK)
 80014ea:	2800      	cmp	r0, #0
 80014ec:	bf18      	it	ne
 80014ee:	4605      	movne	r5, r0
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	045a      	lsls	r2, r3, #17
 80014f4:	d512      	bpl.n	800151c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80014f6:	4916      	ldr	r1, [pc, #88]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80014fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80014fe:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001502:	4313      	orrs	r3, r2
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001504:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800150c:	d106      	bne.n	800151c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800150e:	2102      	movs	r1, #2
 8001510:	1d20      	adds	r0, r4, #4
 8001512:	f7ff fe27 	bl	8001164 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001516:	2800      	cmp	r0, #0
 8001518:	bf18      	it	ne
 800151a:	4605      	movne	r5, r0
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	041b      	lsls	r3, r3, #16
 8001520:	d512      	bpl.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001522:	490b      	ldr	r1, [pc, #44]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001524:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001528:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800152c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800152e:	4313      	orrs	r3, r2
 8001530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8001534:	e008      	b.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001536:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800153a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800153e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001540:	4313      	orrs	r3, r2
 8001542:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001546:	e745      	b.n	80013d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  }

#endif /* DFSDM1_Filter0 */

  return status;
}
 8001548:	4628      	mov	r0, r5
 800154a:	b003      	add	sp, #12
 800154c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	40007000 	.word	0x40007000

08001558 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001558:	6a03      	ldr	r3, [r0, #32]
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001560:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001562:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001564:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001566:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001568:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800156a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800156e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001572:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001574:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001576:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800157a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800157c:	4d12      	ldr	r5, [pc, #72]	; (80015c8 <TIM_OC1_SetConfig+0x70>)
 800157e:	42a8      	cmp	r0, r5
 8001580:	d006      	beq.n	8001590 <TIM_OC1_SetConfig+0x38>
 8001582:	4e12      	ldr	r6, [pc, #72]	; (80015cc <TIM_OC1_SetConfig+0x74>)
 8001584:	42b0      	cmp	r0, r6
 8001586:	d003      	beq.n	8001590 <TIM_OC1_SetConfig+0x38>
 8001588:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800158c:	42b0      	cmp	r0, r6
 800158e:	d114      	bne.n	80015ba <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001590:	68ce      	ldr	r6, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001592:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001596:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001598:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800159a:	f023 0304 	bic.w	r3, r3, #4
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800159e:	d006      	beq.n	80015ae <TIM_OC1_SetConfig+0x56>
 80015a0:	4d0a      	ldr	r5, [pc, #40]	; (80015cc <TIM_OC1_SetConfig+0x74>)
 80015a2:	42a8      	cmp	r0, r5
 80015a4:	d003      	beq.n	80015ae <TIM_OC1_SetConfig+0x56>
 80015a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015aa:	42a8      	cmp	r0, r5
 80015ac:	d105      	bne.n	80015ba <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80015ae:	694e      	ldr	r6, [r1, #20]
 80015b0:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80015b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80015b6:	4335      	orrs	r5, r6
 80015b8:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015ba:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80015bc:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80015be:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80015c0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015c2:	6203      	str	r3, [r0, #32]
 80015c4:	bd70      	pop	{r4, r5, r6, pc}
 80015c6:	bf00      	nop
 80015c8:	40012c00 	.word	0x40012c00
 80015cc:	40014000 	.word	0x40014000

080015d0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80015d0:	6a03      	ldr	r3, [r0, #32]
 80015d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015d8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015da:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80015dc:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80015de:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80015e0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80015e2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80015e6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80015ea:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80015ec:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80015ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80015f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80015f6:	4d0f      	ldr	r5, [pc, #60]	; (8001634 <TIM_OC3_SetConfig+0x64>)
 80015f8:	42a8      	cmp	r0, r5
 80015fa:	d107      	bne.n	800160c <TIM_OC3_SetConfig+0x3c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80015fc:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80015fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001602:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800160a:	e005      	b.n	8001618 <TIM_OC3_SetConfig+0x48>
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800160c:	4d0a      	ldr	r5, [pc, #40]	; (8001638 <TIM_OC3_SetConfig+0x68>)
 800160e:	42a8      	cmp	r0, r5
 8001610:	d002      	beq.n	8001618 <TIM_OC3_SetConfig+0x48>
 8001612:	4d0a      	ldr	r5, [pc, #40]	; (800163c <TIM_OC3_SetConfig+0x6c>)
 8001614:	42a8      	cmp	r0, r5
 8001616:	d107      	bne.n	8001628 <TIM_OC3_SetConfig+0x58>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001618:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800161a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800161e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001622:	698d      	ldr	r5, [r1, #24]
 8001624:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001628:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800162a:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800162c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800162e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001630:	6203      	str	r3, [r0, #32]
}
 8001632:	bd30      	pop	{r4, r5, pc}
 8001634:	40012c00 	.word	0x40012c00
 8001638:	40014000 	.word	0x40014000
 800163c:	40014400 	.word	0x40014400

08001640 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001640:	6a03      	ldr	r3, [r0, #32]
 8001642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001646:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001648:	6a02      	ldr	r2, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800164a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800164c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800164e:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001650:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001656:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800165a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800165e:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001660:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001664:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001668:	4d0a      	ldr	r5, [pc, #40]	; (8001694 <TIM_OC4_SetConfig+0x54>)
 800166a:	42a8      	cmp	r0, r5
 800166c:	d007      	beq.n	800167e <TIM_OC4_SetConfig+0x3e>
 800166e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001672:	42a8      	cmp	r0, r5
 8001674:	d003      	beq.n	800167e <TIM_OC4_SetConfig+0x3e>
 8001676:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800167a:	42a8      	cmp	r0, r5
 800167c:	d104      	bne.n	8001688 <TIM_OC4_SetConfig+0x48>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800167e:	694d      	ldr	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001680:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001684:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001688:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800168a:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800168c:	684b      	ldr	r3, [r1, #4]
 800168e:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001690:	6202      	str	r2, [r0, #32]
 8001692:	bd30      	pop	{r4, r5, pc}
 8001694:	40012c00 	.word	0x40012c00

08001698 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001698:	6a03      	ldr	r3, [r0, #32]
 800169a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016a0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016a2:	6842      	ldr	r2, [r0, #4]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80016a4:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80016a6:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016a8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80016aa:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80016ae:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016b2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80016b4:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80016b6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80016ba:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80016be:	4d0b      	ldr	r5, [pc, #44]	; (80016ec <TIM_OC5_SetConfig+0x54>)
 80016c0:	42a8      	cmp	r0, r5
 80016c2:	d007      	beq.n	80016d4 <TIM_OC5_SetConfig+0x3c>
 80016c4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80016c8:	42a8      	cmp	r0, r5
 80016ca:	d003      	beq.n	80016d4 <TIM_OC5_SetConfig+0x3c>
 80016cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016d0:	42a8      	cmp	r0, r5
 80016d2:	d104      	bne.n	80016de <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80016d4:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80016d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80016da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016de:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80016e0:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80016e2:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80016e4:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016e6:	6203      	str	r3, [r0, #32]
 80016e8:	bd30      	pop	{r4, r5, pc}
 80016ea:	bf00      	nop
 80016ec:	40012c00 	.word	0x40012c00

080016f0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80016f0:	6a03      	ldr	r3, [r0, #32]
 80016f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016f6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016f8:	6a02      	ldr	r2, [r0, #32]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80016fa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016fc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80016fe:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001700:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800170a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800170e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001710:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8001714:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001718:	4d0a      	ldr	r5, [pc, #40]	; (8001744 <TIM_OC6_SetConfig+0x54>)
 800171a:	42a8      	cmp	r0, r5
 800171c:	d007      	beq.n	800172e <TIM_OC6_SetConfig+0x3e>
 800171e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001722:	42a8      	cmp	r0, r5
 8001724:	d003      	beq.n	800172e <TIM_OC6_SetConfig+0x3e>
 8001726:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800172a:	42a8      	cmp	r0, r5
 800172c:	d104      	bne.n	8001738 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800172e:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001730:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8001734:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001738:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800173a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800173c:	684b      	ldr	r3, [r1, #4]
 800173e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001740:	6202      	str	r2, [r0, #32]
 8001742:	bd30      	pop	{r4, r5, pc}
 8001744:	40012c00 	.word	0x40012c00

08001748 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001748:	4a18      	ldr	r2, [pc, #96]	; (80017ac <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800174a:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800174c:	4290      	cmp	r0, r2
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800174e:	b510      	push	{r4, lr}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001750:	d002      	beq.n	8001758 <TIM_Base_SetConfig+0x10>
 8001752:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001756:	d109      	bne.n	800176c <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001758:	684c      	ldr	r4, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800175a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800175e:	4290      	cmp	r0, r2
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001760:	ea43 0304 	orr.w	r3, r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001764:	d009      	beq.n	800177a <TIM_Base_SetConfig+0x32>
 8001766:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800176a:	d006      	beq.n	800177a <TIM_Base_SetConfig+0x32>
 800176c:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <TIM_Base_SetConfig+0x68>)
 800176e:	4290      	cmp	r0, r2
 8001770:	d003      	beq.n	800177a <TIM_Base_SetConfig+0x32>
 8001772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001776:	4290      	cmp	r0, r2
 8001778:	d103      	bne.n	8001782 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800177a:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800177c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001780:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001782:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001784:	688b      	ldr	r3, [r1, #8]
 8001786:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001788:	680b      	ldr	r3, [r1, #0]
 800178a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <TIM_Base_SetConfig+0x64>)
 800178e:	4298      	cmp	r0, r3
 8001790:	d007      	beq.n	80017a2 <TIM_Base_SetConfig+0x5a>
 8001792:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001796:	4298      	cmp	r0, r3
 8001798:	d003      	beq.n	80017a2 <TIM_Base_SetConfig+0x5a>
 800179a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800179e:	4298      	cmp	r0, r3
 80017a0:	d101      	bne.n	80017a6 <TIM_Base_SetConfig+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017a2:	690b      	ldr	r3, [r1, #16]
 80017a4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017a6:	2301      	movs	r3, #1
 80017a8:	6143      	str	r3, [r0, #20]
 80017aa:	bd10      	pop	{r4, pc}
 80017ac:	40012c00 	.word	0x40012c00
 80017b0:	40014000 	.word	0x40014000

080017b4 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017b4:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80017b6:	4604      	mov	r4, r0
 80017b8:	b1a0      	cbz	r0, 80017e4 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80017ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017c2:	b91b      	cbnz	r3, 80017cc <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017c4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017c8:	f001 f9ca 	bl	8002b60 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80017cc:	2302      	movs	r3, #2
 80017ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017d2:	6820      	ldr	r0, [r4, #0]
 80017d4:	1d21      	adds	r1, r4, #4
 80017d6:	f7ff ffb7 	bl	8001748 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80017da:	2301      	movs	r3, #1
 80017dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80017e0:	2000      	movs	r0, #0
 80017e2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80017e4:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 80017e6:	bd10      	pop	{r4, pc}

080017e8 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017e8:	6a03      	ldr	r3, [r0, #32]
 80017ea:	f023 0310 	bic.w	r3, r3, #16
 80017ee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017f0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017f2:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017f4:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80017f6:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80017f8:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80017fa:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80017fe:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001802:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001806:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001808:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800180c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001810:	4d0f      	ldr	r5, [pc, #60]	; (8001850 <TIM_OC2_SetConfig+0x68>)
 8001812:	42a8      	cmp	r0, r5
 8001814:	d107      	bne.n	8001826 <TIM_OC2_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001816:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800181c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001824:	e005      	b.n	8001832 <TIM_OC2_SetConfig+0x4a>

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001826:	4d0b      	ldr	r5, [pc, #44]	; (8001854 <TIM_OC2_SetConfig+0x6c>)
 8001828:	42a8      	cmp	r0, r5
 800182a:	d002      	beq.n	8001832 <TIM_OC2_SetConfig+0x4a>
 800182c:	4d0a      	ldr	r5, [pc, #40]	; (8001858 <TIM_OC2_SetConfig+0x70>)
 800182e:	42a8      	cmp	r0, r5
 8001830:	d107      	bne.n	8001842 <TIM_OC2_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001832:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001834:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001838:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800183c:	698d      	ldr	r5, [r1, #24]
 800183e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001842:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001844:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001846:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001848:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800184a:	6203      	str	r3, [r0, #32]
}
 800184c:	bd30      	pop	{r4, r5, pc}
 800184e:	bf00      	nop
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40014000 	.word	0x40014000
 8001858:	40014400 	.word	0x40014400

0800185c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 800185c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800185e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001862:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8001864:	4604      	mov	r4, r0
 8001866:	460d      	mov	r5, r1
 8001868:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800186c:	d07b      	beq.n	8001966 <HAL_TIM_PWM_ConfigChannel+0x10a>
 800186e:	2301      	movs	r3, #1

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 8001870:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001872:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8001876:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 800187a:	d03c      	beq.n	80018f6 <HAL_TIM_PWM_ConfigChannel+0x9a>
 800187c:	d813      	bhi.n	80018a6 <HAL_TIM_PWM_ConfigChannel+0x4a>
 800187e:	b34a      	cbz	r2, 80018d4 <HAL_TIM_PWM_ConfigChannel+0x78>
 8001880:	2a04      	cmp	r2, #4
 8001882:	d16a      	bne.n	800195a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001884:	6820      	ldr	r0, [r4, #0]
 8001886:	f7ff ffaf 	bl	80017e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800188a:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800188c:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001894:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001896:	699a      	ldr	r2, [r3, #24]
 8001898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800189c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800189e:	699a      	ldr	r2, [r3, #24]
 80018a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018a4:	e025      	b.n	80018f2 <HAL_TIM_PWM_ConfigChannel+0x96>
  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 80018a6:	2a10      	cmp	r2, #16
 80018a8:	d036      	beq.n	8001918 <HAL_TIM_PWM_ConfigChannel+0xbc>
 80018aa:	2a14      	cmp	r2, #20
 80018ac:	d044      	beq.n	8001938 <HAL_TIM_PWM_ConfigChannel+0xdc>
 80018ae:	2a0c      	cmp	r2, #12
 80018b0:	d153      	bne.n	800195a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	f7ff fec4 	bl	8001640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018b8:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80018ba:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018bc:	69da      	ldr	r2, [r3, #28]
 80018be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018c2:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018c4:	69da      	ldr	r2, [r3, #28]
 80018c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80018cc:	69da      	ldr	r2, [r3, #28]
 80018ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018d2:	e01f      	b.n	8001914 <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018d4:	6820      	ldr	r0, [r4, #0]
 80018d6:	f7ff fe3f 	bl	8001558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	f042 0208 	orr.w	r2, r2, #8
 80018e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	f022 0204 	bic.w	r2, r2, #4
 80018ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018ec:	6999      	ldr	r1, [r3, #24]
 80018ee:	692a      	ldr	r2, [r5, #16]
 80018f0:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80018f2:	619a      	str	r2, [r3, #24]
    }
    break;
 80018f4:	e031      	b.n	800195a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018f6:	6820      	ldr	r0, [r4, #0]
 80018f8:	f7ff fe6a 	bl	80015d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	f042 0208 	orr.w	r2, r2, #8
 8001904:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001906:	69da      	ldr	r2, [r3, #28]
 8001908:	f022 0204 	bic.w	r2, r2, #4
 800190c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800190e:	69d9      	ldr	r1, [r3, #28]
 8001910:	692a      	ldr	r2, [r5, #16]
 8001912:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001914:	61da      	str	r2, [r3, #28]
    }
    break;
 8001916:	e020      	b.n	800195a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001918:	6820      	ldr	r0, [r4, #0]
 800191a:	f7ff febd 	bl	8001698 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001922:	f042 0208 	orr.w	r2, r2, #8
 8001926:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800192a:	f022 0204 	bic.w	r2, r2, #4
 800192e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001930:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001932:	692a      	ldr	r2, [r5, #16]
 8001934:	430a      	orrs	r2, r1
 8001936:	e00f      	b.n	8001958 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001938:	6820      	ldr	r0, [r4, #0]
 800193a:	f7ff fed9 	bl	80016f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800193e:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8001940:	6909      	ldr	r1, [r1, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001942:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001948:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800194a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800194c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8001952:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001954:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001958:	655a      	str	r2, [r3, #84]	; 0x54

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800195a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800195c:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800195e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8001962:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8001966:	bd38      	pop	{r3, r4, r5, pc}

08001968 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001968:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800196a:	2301      	movs	r3, #1
 800196c:	6a04      	ldr	r4, [r0, #32]
 800196e:	408b      	lsls	r3, r1
 8001970:	ea24 0303 	bic.w	r3, r4, r3
 8001974:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001976:	6a03      	ldr	r3, [r0, #32]
 8001978:	408a      	lsls	r2, r1
 800197a:	ea42 0103 	orr.w	r1, r2, r3
 800197e:	6201      	str	r1, [r0, #32]
 8001980:	bd10      	pop	{r4, pc}
	...

08001984 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001984:	b510      	push	{r4, lr}
 8001986:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001988:	2200      	movs	r2, #0
 800198a:	6800      	ldr	r0, [r0, #0]
 800198c:	f7ff ffec 	bl	8001968 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	4a16      	ldr	r2, [pc, #88]	; (80019ec <HAL_TIM_PWM_Stop+0x68>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d007      	beq.n	80019a8 <HAL_TIM_PWM_Stop+0x24>
 8001998:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800199c:	4293      	cmp	r3, r2
 800199e:	d003      	beq.n	80019a8 <HAL_TIM_PWM_Stop+0x24>
 80019a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d10d      	bne.n	80019c4 <HAL_TIM_PWM_Stop+0x40>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80019a8:	6a19      	ldr	r1, [r3, #32]
 80019aa:	f241 1211 	movw	r2, #4369	; 0x1111
 80019ae:	400a      	ands	r2, r1
 80019b0:	b942      	cbnz	r2, 80019c4 <HAL_TIM_PWM_Stop+0x40>
 80019b2:	6a19      	ldr	r1, [r3, #32]
 80019b4:	f240 4244 	movw	r2, #1092	; 0x444
 80019b8:	400a      	ands	r2, r1
 80019ba:	b91a      	cbnz	r2, 80019c4 <HAL_TIM_PWM_Stop+0x40>
 80019bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019c4:	6a19      	ldr	r1, [r3, #32]
 80019c6:	f241 1211 	movw	r2, #4369	; 0x1111
 80019ca:	400a      	ands	r2, r1
 80019cc:	b942      	cbnz	r2, 80019e0 <HAL_TIM_PWM_Stop+0x5c>
 80019ce:	6a19      	ldr	r1, [r3, #32]
 80019d0:	f240 4244 	movw	r2, #1092	; 0x444
 80019d4:	400a      	ands	r2, r1
 80019d6:	b91a      	cbnz	r2, 80019e0 <HAL_TIM_PWM_Stop+0x5c>
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
}
 80019e6:	2000      	movs	r0, #0
 80019e8:	bd10      	pop	{r4, pc}
 80019ea:	bf00      	nop
 80019ec:	40012c00 	.word	0x40012c00

080019f0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80019f0:	b510      	push	{r4, lr}
  uint32_t tmp = 0;

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80019f2:	2304      	movs	r3, #4
 80019f4:	6a04      	ldr	r4, [r0, #32]
 80019f6:	408b      	lsls	r3, r1
 80019f8:	ea24 0303 	bic.w	r3, r4, r3
 80019fc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 80019fe:	6a03      	ldr	r3, [r0, #32]
 8001a00:	408a      	lsls	r2, r1
 8001a02:	ea42 0103 	orr.w	r1, r2, r3
 8001a06:	6201      	str	r1, [r0, #32]
 8001a08:	bd10      	pop	{r4, pc}

08001a0a <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a0a:	b510      	push	{r4, lr}
 8001a0c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8001a0e:	2204      	movs	r2, #4
 8001a10:	6800      	ldr	r0, [r0, #0]
 8001a12:	f7ff ffed 	bl	80019f0 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001a28:	2000      	movs	r0, #0
 8001a2a:	bd10      	pop	{r4, pc}

08001a2c <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8001a2c:	b510      	push	{r4, lr}
 8001a2e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6800      	ldr	r0, [r0, #0]
 8001a34:	f7ff ffdc 	bl	80019f0 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	6a19      	ldr	r1, [r3, #32]
 8001a3c:	f241 1211 	movw	r2, #4369	; 0x1111
 8001a40:	400a      	ands	r2, r1
 8001a42:	b942      	cbnz	r2, 8001a56 <HAL_TIMEx_OnePulseN_Stop+0x2a>
 8001a44:	6a19      	ldr	r1, [r3, #32]
 8001a46:	f240 4244 	movw	r2, #1092	; 0x444
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	b91a      	cbnz	r2, 8001a56 <HAL_TIMEx_OnePulseN_Stop+0x2a>
 8001a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a56:	6a19      	ldr	r1, [r3, #32]
 8001a58:	f241 1211 	movw	r2, #4369	; 0x1111
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	b942      	cbnz	r2, 8001a72 <HAL_TIMEx_OnePulseN_Stop+0x46>
 8001a60:	6a19      	ldr	r1, [r3, #32]
 8001a62:	f240 4244 	movw	r2, #1092	; 0x444
 8001a66:	400a      	ands	r2, r1
 8001a68:	b91a      	cbnz	r2, 8001a72 <HAL_TIMEx_OnePulseN_Stop+0x46>
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001a72:	2000      	movs	r0, #0
 8001a74:	bd10      	pop	{r4, pc}

08001a76 <HAL_TIMEx_PWMN_Stop>:
 8001a76:	f7ff bfd9 	b.w	8001a2c <HAL_TIMEx_OnePulseN_Stop>
	...

08001a7c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a7c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a80:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001a82:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a84:	d018      	beq.n	8001ab8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a86:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001a88:	4c0c      	ldr	r4, [pc, #48]	; (8001abc <HAL_TIMEx_MasterConfigSynchronization+0x40>)

  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a8a:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a8c:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001a8e:	42a2      	cmp	r2, r4
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001a90:	bf02      	ittt	eq
 8001a92:	684c      	ldreq	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001a94:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001a98:	4323      	orreq	r3, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a9a:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a9c:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001aa2:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001aa4:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001aa8:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001aaa:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001aac:	2300      	movs	r3, #0

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001aae:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8001ab0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ab8:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001aba:	bd30      	pop	{r4, r5, pc}
 8001abc:	40012c00 	.word	0x40012c00

08001ac0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001ac0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ac4:	2b01      	cmp	r3, #1
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8001ac6:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001ac8:	d034      	beq.n	8001b34 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001aca:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001acc:	6804      	ldr	r4, [r0, #0]
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001ace:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ad2:	688b      	ldr	r3, [r1, #8]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001ada:	684b      	ldr	r3, [r1, #4]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001ae2:	680b      	ldr	r3, [r1, #0]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001aea:	690b      	ldr	r3, [r1, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001af2:	694b      	ldr	r3, [r1, #20]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001af8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8001afc:	431a      	orrs	r2, r3
 8001afe:	698b      	ldr	r3, [r1, #24]
 8001b00:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001b04:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
 8001b0a:	4294      	cmp	r4, r2
 8001b0c:	d10c      	bne.n	8001b28 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001b0e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8001b10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001b14:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001b18:	69ca      	ldr	r2, [r1, #28]
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b24:	6a0b      	ldr	r3, [r1, #32]
 8001b26:	4313      	orrs	r3, r2
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001b28:	6463      	str	r3, [r4, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001b34:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001b36:	bd10      	pop	{r4, pc}
 8001b38:	40012c00 	.word	0x40012c00

08001b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b40:	6805      	ldr	r5, [r0, #0]
 8001b42:	6923      	ldr	r3, [r4, #16]
 8001b44:	68a2      	ldr	r2, [r4, #8]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b46:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b48:	6828      	ldr	r0, [r5, #0]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	6963      	ldr	r3, [r4, #20]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	ea43 0201 	orr.w	r2, r3, r1
 8001b54:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <UART_SetConfig+0x210>)
 8001b56:	4003      	ands	r3, r0
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b5c:	686b      	ldr	r3, [r5, #4]
 8001b5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001b62:	68e3      	ldr	r3, [r4, #12]
 8001b64:	4313      	orrs	r3, r2
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b66:	4a7a      	ldr	r2, [pc, #488]	; (8001d50 <UART_SetConfig+0x214>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b68:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b6a:	4295      	cmp	r5, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001b6c:	bf18      	it	ne
 8001b6e:	6a22      	ldrne	r2, [r4, #32]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b70:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001b72:	bf18      	it	ne
 8001b74:	4313      	orrne	r3, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b76:	68aa      	ldr	r2, [r5, #8]
 8001b78:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b80:	4b74      	ldr	r3, [pc, #464]	; (8001d54 <UART_SetConfig+0x218>)
 8001b82:	429d      	cmp	r5, r3
 8001b84:	d107      	bne.n	8001b96 <UART_SetConfig+0x5a>
 8001b86:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001b8a:	4a73      	ldr	r2, [pc, #460]	; (8001d58 <UART_SetConfig+0x21c>)
 8001b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	e009      	b.n	8001baa <UART_SetConfig+0x6e>
 8001b96:	4b71      	ldr	r3, [pc, #452]	; (8001d5c <UART_SetConfig+0x220>)
 8001b98:	429d      	cmp	r5, r3
 8001b9a:	d10b      	bne.n	8001bb4 <UART_SetConfig+0x78>
 8001b9c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001ba0:	4a6f      	ldr	r2, [pc, #444]	; (8001d60 <UART_SetConfig+0x224>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	f003 030c 	and.w	r3, r3, #12
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001baa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	d065      	beq.n	8001c7e <UART_SetConfig+0x142>
 8001bb2:	e099      	b.n	8001ce8 <UART_SetConfig+0x1ac>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bb4:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <UART_SetConfig+0x214>)
 8001bb6:	429d      	cmp	r5, r3
 8001bb8:	f040 8089 	bne.w	8001cce <UART_SetConfig+0x192>
 8001bbc:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001bc0:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001bc4:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001bc8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001bcc:	d014      	beq.n	8001bf8 <UART_SetConfig+0xbc>
 8001bce:	d805      	bhi.n	8001bdc <UART_SetConfig+0xa0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	f040 80b7 	bne.w	8001d44 <UART_SetConfig+0x208>
    tmpreg = 0;

    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8001bd6:	f7ff fa95 	bl	8001104 <HAL_RCC_GetPCLK1Freq>
      break;
 8001bda:	e010      	b.n	8001bfe <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bdc:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001be0:	d007      	beq.n	8001bf2 <UART_SetConfig+0xb6>
 8001be2:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001be6:	f040 80ad 	bne.w	8001d44 <UART_SetConfig+0x208>
 8001bea:	2508      	movs	r5, #8
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
      break;
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8001bec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bf0:	e008      	b.n	8001c04 <UART_SetConfig+0xc8>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bf2:	2502      	movs	r5, #2
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
      break;
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8001bf4:	485b      	ldr	r0, [pc, #364]	; (8001d64 <UART_SetConfig+0x228>)
 8001bf6:	e005      	b.n	8001c04 <UART_SetConfig+0xc8>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8001bf8:	f7fe feb6 	bl	8000968 <HAL_RCC_GetSysClockFreq>
      break;
 8001bfc:	2504      	movs	r5, #4
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	f000 809e 	beq.w	8001d40 <UART_SetConfig+0x204>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001c04:	6862      	ldr	r2, [r4, #4]
 8001c06:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001c0a:	4283      	cmp	r3, r0
 8001c0c:	f200 809a 	bhi.w	8001d44 <UART_SetConfig+0x208>
 8001c10:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001c14:	f200 8096 	bhi.w	8001d44 <UART_SetConfig+0x208>
      {
        ret = HAL_ERROR;
      }
      else
      {
        switch (clocksource)
 8001c18:	2d08      	cmp	r5, #8
 8001c1a:	d827      	bhi.n	8001c6c <UART_SetConfig+0x130>
 8001c1c:	e8df f005 	tbb	[pc, r5]
 8001c20:	26082605 	.word	0x26082605
 8001c24:	2626260e 	.word	0x2626260e
 8001c28:	1b          	.byte	0x1b
 8001c29:	00          	.byte	0x00
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c2a:	f7ff fa6b 	bl	8001104 <HAL_RCC_GetPCLK1Freq>
 8001c2e:	e007      	b.n	8001c40 <UART_SetConfig+0x104>
          break;
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001c30:	484d      	ldr	r0, [pc, #308]	; (8001d68 <UART_SetConfig+0x22c>)
 8001c32:	0855      	lsrs	r5, r2, #1
 8001c34:	2300      	movs	r3, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	1940      	adds	r0, r0, r5
 8001c3a:	e011      	b.n	8001c60 <UART_SetConfig+0x124>
          break;
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c3c:	f7fe fe94 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 8001c40:	6862      	ldr	r2, [r4, #4]
 8001c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c46:	0856      	lsrs	r6, r2, #1
 8001c48:	2700      	movs	r7, #0
 8001c4a:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001c4e:	2300      	movs	r3, #0
 8001c50:	4630      	mov	r0, r6
 8001c52:	4639      	mov	r1, r7
 8001c54:	e006      	b.n	8001c64 <UART_SetConfig+0x128>
          break;
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001c56:	0850      	lsrs	r0, r2, #1
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001c60:	f141 0100 	adc.w	r1, r1, #0
 8001c64:	f7fe fb04 	bl	8000270 <__aeabi_uldivmod>
          break;
 8001c68:	2200      	movs	r2, #0
 8001c6a:	e000      	b.n	8001c6e <UART_SetConfig+0x132>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 8001c6c:	2201      	movs	r2, #1
          break;
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <UART_SetConfig+0x230>)
 8001c70:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001c74:	4299      	cmp	r1, r3
 8001c76:	d865      	bhi.n	8001d44 <UART_SetConfig+0x208>
        {
           huart->Instance->BRR = tmpreg;
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	60d8      	str	r0, [r3, #12]
 8001c7c:	e063      	b.n	8001d46 <UART_SetConfig+0x20a>
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d828      	bhi.n	8001cd4 <UART_SetConfig+0x198>
 8001c82:	e8df f003 	tbb	[pc, r3]
 8001c86:	0805      	.short	0x0805
 8001c88:	2712270b 	.word	0x2712270b
 8001c8c:	2727      	.short	0x2727
 8001c8e:	1b          	.byte	0x1b
 8001c8f:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c90:	f7ff fa38 	bl	8001104 <HAL_RCC_GetPCLK1Freq>
 8001c94:	e00b      	b.n	8001cae <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c96:	f7ff fa4d 	bl	8001134 <HAL_RCC_GetPCLK2Freq>
 8001c9a:	e008      	b.n	8001cae <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001c9c:	6860      	ldr	r0, [r4, #4]
 8001c9e:	0842      	lsrs	r2, r0, #1
 8001ca0:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8001ca4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8001ca8:	e00c      	b.n	8001cc4 <UART_SetConfig+0x188>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001caa:	f7fe fe5d 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 8001cae:	6863      	ldr	r3, [r4, #4]
 8001cb0:	085a      	lsrs	r2, r3, #1
 8001cb2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8001cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cba:	e005      	b.n	8001cc8 <UART_SetConfig+0x18c>
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001cbc:	6860      	ldr	r0, [r4, #4]
 8001cbe:	0843      	lsrs	r3, r0, #1
 8001cc0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001cc4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001cc8:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cca:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8001ccc:	e004      	b.n	8001cd8 <UART_SetConfig+0x19c>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001cd2:	d137      	bne.n	8001d44 <UART_SetConfig+0x208>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001cd4:	2201      	movs	r2, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 8001cd6:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8001cd8:	f3c3 0042 	ubfx	r0, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001cdc:	6821      	ldr	r1, [r4, #0]
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8001cde:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8001ce2:	4303      	orrs	r3, r0
 8001ce4:	60cb      	str	r3, [r1, #12]
 8001ce6:	e02e      	b.n	8001d46 <UART_SetConfig+0x20a>
  }
  else
  {
    switch (clocksource)
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d82b      	bhi.n	8001d44 <UART_SetConfig+0x208>
 8001cec:	e8df f003 	tbb	[pc, r3]
 8001cf0:	2a0b0805 	.word	0x2a0b0805
 8001cf4:	2a2a2a14 	.word	0x2a2a2a14
 8001cf8:	1e          	.byte	0x1e
 8001cf9:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cfa:	f7ff fa03 	bl	8001104 <HAL_RCC_GetPCLK1Freq>
 8001cfe:	e00d      	b.n	8001d1c <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d00:	f7ff fa18 	bl	8001134 <HAL_RCC_GetPCLK2Freq>
 8001d04:	e00a      	b.n	8001d1c <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d06:	6861      	ldr	r1, [r4, #4]
 8001d08:	084a      	lsrs	r2, r1, #1
 8001d0a:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8001d0e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	e00f      	b.n	8001d38 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d18:	f7fe fe26 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 8001d1c:	6863      	ldr	r3, [r4, #4]
 8001d1e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001d22:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d26:	b280      	uxth	r0, r0
 8001d28:	60e8      	str	r0, [r5, #12]
 8001d2a:	e007      	b.n	8001d3c <UART_SetConfig+0x200>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d2c:	6862      	ldr	r2, [r4, #4]
 8001d2e:	0853      	lsrs	r3, r2, #1
 8001d30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d3c:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8001d3e:	e002      	b.n	8001d46 <UART_SetConfig+0x20a>
 8001d40:	4602      	mov	r2, r0
 8001d42:	e000      	b.n	8001d46 <UART_SetConfig+0x20a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001d44:	2201      	movs	r2, #1
    }
  }

  return ret;

}
 8001d46:	4610      	mov	r0, r2
 8001d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	efff69f3 	.word	0xefff69f3
 8001d50:	40008000 	.word	0x40008000
 8001d54:	40013800 	.word	0x40013800
 8001d58:	08004bec 	.word	0x08004bec
 8001d5c:	40004400 	.word	0x40004400
 8001d60:	08004bf0 	.word	0x08004bf0
 8001d64:	00f42400 	.word	0x00f42400
 8001d68:	f4240000 	.word	0xf4240000
 8001d6c:	000ffcff 	.word	0x000ffcff

08001d70 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d72:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001d74:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d76:	d506      	bpl.n	8001d86 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d78:	6804      	ldr	r4, [r0, #0]
 8001d7a:	6862      	ldr	r2, [r4, #4]
 8001d7c:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8001d80:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001d82:	430a      	orrs	r2, r1
 8001d84:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d86:	079c      	lsls	r4, r3, #30
 8001d88:	d506      	bpl.n	8001d98 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d8a:	6804      	ldr	r4, [r0, #0]
 8001d8c:	6862      	ldr	r2, [r4, #4]
 8001d8e:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8001d92:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001d94:	430a      	orrs	r2, r1
 8001d96:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d98:	0759      	lsls	r1, r3, #29
 8001d9a:	d506      	bpl.n	8001daa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d9c:	6804      	ldr	r4, [r0, #0]
 8001d9e:	6862      	ldr	r2, [r4, #4]
 8001da0:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8001da4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001da6:	430a      	orrs	r2, r1
 8001da8:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001daa:	071a      	lsls	r2, r3, #28
 8001dac:	d506      	bpl.n	8001dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001dae:	6804      	ldr	r4, [r0, #0]
 8001db0:	6862      	ldr	r2, [r4, #4]
 8001db2:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8001db6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001db8:	430a      	orrs	r2, r1
 8001dba:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001dbc:	06dc      	lsls	r4, r3, #27
 8001dbe:	d506      	bpl.n	8001dce <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001dc0:	6804      	ldr	r4, [r0, #0]
 8001dc2:	68a2      	ldr	r2, [r4, #8]
 8001dc4:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8001dc8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001dce:	0699      	lsls	r1, r3, #26
 8001dd0:	d506      	bpl.n	8001de0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001dd2:	6804      	ldr	r4, [r0, #0]
 8001dd4:	68a2      	ldr	r2, [r4, #8]
 8001dd6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8001dda:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001de0:	065a      	lsls	r2, r3, #25
 8001de2:	d50f      	bpl.n	8001e04 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001de4:	6801      	ldr	r1, [r0, #0]
 8001de6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001de8:	684a      	ldr	r2, [r1, #4]
 8001dea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001dee:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001df0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001df4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001df6:	d105      	bne.n	8001e04 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001df8:	684a      	ldr	r2, [r1, #4]
 8001dfa:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8001dfe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001e00:	4322      	orrs	r2, r4
 8001e02:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	d506      	bpl.n	8001e16 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e08:	6801      	ldr	r1, [r0, #0]
 8001e0a:	684b      	ldr	r3, [r1, #4]
 8001e0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001e10:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
 8001e16:	bd10      	pop	{r4, pc}

08001e18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e1c:	9d06      	ldr	r5, [sp, #24]
 8001e1e:	4604      	mov	r4, r0
 8001e20:	460f      	mov	r7, r1
 8001e22:	4616      	mov	r6, r2
 8001e24:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e26:	6821      	ldr	r1, [r4, #0]
 8001e28:	69ca      	ldr	r2, [r1, #28]
 8001e2a:	ea37 0302 	bics.w	r3, r7, r2
 8001e2e:	bf0c      	ite	eq
 8001e30:	2201      	moveq	r2, #1
 8001e32:	2200      	movne	r2, #0
 8001e34:	42b2      	cmp	r2, r6
 8001e36:	d11d      	bne.n	8001e74 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001e38:	1c6b      	adds	r3, r5, #1
 8001e3a:	d0f5      	beq.n	8001e28 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e3c:	b99d      	cbnz	r5, 8001e66 <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e46:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001e50:	2320      	movs	r3, #32
 8001e52:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001e56:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001e60:	2003      	movs	r0, #3
 8001e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e66:	f7fe fbb7 	bl	80005d8 <HAL_GetTick>
 8001e6a:	ebc8 0000 	rsb	r0, r8, r0
 8001e6e:	4285      	cmp	r5, r0
 8001e70:	d2d9      	bcs.n	8001e26 <UART_WaitOnFlagUntilTimeout+0xe>
 8001e72:	e7e4      	b.n	8001e3e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001e74:	2000      	movs	r0, #0
}
 8001e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e7a <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001e7e:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001e80:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001e84:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e86:	4604      	mov	r4, r0
 8001e88:	460d      	mov	r5, r1
 8001e8a:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001e8c:	d14b      	bne.n	8001f26 <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0))
 8001e8e:	2900      	cmp	r1, #0
 8001e90:	d047      	beq.n	8001f22 <HAL_UART_Transmit+0xa8>
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	d045      	beq.n	8001f22 <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e96:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d043      	beq.n	8001f26 <HAL_UART_Transmit+0xac>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ea8:	2321      	movs	r3, #33	; 0x21
 8001eaa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001eae:	f7fe fb93 	bl	80005d8 <HAL_GetTick>

    huart->TxXferSize = Size;
 8001eb2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001eb6:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8001eb8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0)
 8001ebc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	b302      	cbz	r2, 8001f06 <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 8001ec4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec8:	9700      	str	r7, [sp, #0]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4633      	mov	r3, r6
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f7ff ff9d 	bl	8001e18 <UART_WaitOnFlagUntilTimeout>
 8001ede:	b108      	cbz	r0, 8001ee4 <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	e021      	b.n	8001f28 <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee4:	68a3      	ldr	r3, [r4, #8]
 8001ee6:	6822      	ldr	r2, [r4, #0]
 8001ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eec:	d107      	bne.n	8001efe <HAL_UART_Transmit+0x84>
 8001eee:	6923      	ldr	r3, [r4, #16]
 8001ef0:	b92b      	cbnz	r3, 8001efe <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8001ef2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efa:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8001efc:	e7de      	b.n	8001ebc <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8001efe:	782b      	ldrb	r3, [r5, #0]
 8001f00:	8513      	strh	r3, [r2, #40]	; 0x28
 8001f02:	3501      	adds	r5, #1
 8001f04:	e7da      	b.n	8001ebc <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f06:	9700      	str	r7, [sp, #0]
 8001f08:	4633      	mov	r3, r6
 8001f0a:	2140      	movs	r1, #64	; 0x40
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff ff83 	bl	8001e18 <UART_WaitOnFlagUntilTimeout>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	d1e4      	bne.n	8001ee0 <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f16:	2320      	movs	r3, #32
 8001f18:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f1c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8001f20:	e002      	b.n	8001f28 <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 8001f22:	2001      	movs	r0, #1
 8001f24:	e000      	b.n	8001f28 <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001f26:	2002      	movs	r0, #2
  }
}
 8001f28:	b002      	add	sp, #8
 8001f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f2e <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f32:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f34:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001f38:	2b20      	cmp	r3, #32
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	460d      	mov	r5, r1
 8001f3e:	4616      	mov	r6, r2
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f40:	d15d      	bne.n	8001ffe <HAL_UART_Receive+0xd0>
  {
    if((pData == NULL ) || (Size == 0))
 8001f42:	2900      	cmp	r1, #0
 8001f44:	d059      	beq.n	8001ffa <HAL_UART_Receive+0xcc>
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	d057      	beq.n	8001ffa <HAL_UART_Receive+0xcc>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f4a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d055      	beq.n	8001ffe <HAL_UART_Receive+0xd0>
 8001f52:	2301      	movs	r3, #1
 8001f54:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f5c:	2322      	movs	r3, #34	; 0x22
 8001f5e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001f62:	f7fe fb39 	bl	80005d8 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001f66:	68a3      	ldr	r3, [r4, #8]
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8001f68:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001f70:	4607      	mov	r7, r0

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
 8001f72:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001f76:	d104      	bne.n	8001f82 <HAL_UART_Receive+0x54>
 8001f78:	6923      	ldr	r3, [r4, #16]
 8001f7a:	b92b      	cbnz	r3, 8001f88 <HAL_UART_Receive+0x5a>
 8001f7c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001f80:	e00d      	b.n	8001f9e <HAL_UART_Receive+0x70>
 8001f82:	b92b      	cbnz	r3, 8001f90 <HAL_UART_Receive+0x62>
 8001f84:	6923      	ldr	r3, [r4, #16]
 8001f86:	b90b      	cbnz	r3, 8001f8c <HAL_UART_Receive+0x5e>
 8001f88:	23ff      	movs	r3, #255	; 0xff
 8001f8a:	e008      	b.n	8001f9e <HAL_UART_Receive+0x70>
 8001f8c:	237f      	movs	r3, #127	; 0x7f
 8001f8e:	e006      	b.n	8001f9e <HAL_UART_Receive+0x70>
 8001f90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f94:	d105      	bne.n	8001fa2 <HAL_UART_Receive+0x74>
 8001f96:	6923      	ldr	r3, [r4, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f7      	beq.n	8001f8c <HAL_UART_Receive+0x5e>
 8001f9c:	233f      	movs	r3, #63	; 0x3f
 8001f9e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001fa2:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
 8001fa6:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001faa:	b280      	uxth	r0, r0
 8001fac:	b1f8      	cbz	r0, 8001fee <HAL_UART_Receive+0xc0>
    {
      huart->RxXferCount--;
 8001fae:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001fb2:	f8cd 8000 	str.w	r8, [sp]
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2120      	movs	r1, #32
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff ff27 	bl	8001e18 <UART_WaitOnFlagUntilTimeout>
 8001fca:	b9d0      	cbnz	r0, 8002002 <HAL_UART_Receive+0xd4>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fcc:	68a3      	ldr	r3, [r4, #8]
 8001fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	d106      	bne.n	8001fe4 <HAL_UART_Receive+0xb6>
 8001fd6:	6922      	ldr	r2, [r4, #16]
 8001fd8:	b922      	cbnz	r2, 8001fe4 <HAL_UART_Receive+0xb6>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001fda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fdc:	4033      	ands	r3, r6
 8001fde:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2;
 8001fe2:	e7e0      	b.n	8001fa6 <HAL_UART_Receive+0x78>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001fe4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fe6:	4033      	ands	r3, r6
 8001fe8:	702b      	strb	r3, [r5, #0]
 8001fea:	3501      	adds	r5, #1
 8001fec:	e7db      	b.n	8001fa6 <HAL_UART_Receive+0x78>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001fee:	2320      	movs	r3, #32
 8001ff0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ff4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8001ff8:	e004      	b.n	8002004 <HAL_UART_Receive+0xd6>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	e002      	b.n	8002004 <HAL_UART_Receive+0xd6>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001ffe:	2002      	movs	r0, #2
 8002000:	e000      	b.n	8002004 <HAL_UART_Receive+0xd6>
    while(huart->RxXferCount > 0)
    {
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 8002002:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002004:	b002      	add	sp, #8
 8002006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800200a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800200a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800200c:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200e:	2600      	movs	r6, #0
 8002010:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002012:	f7fe fae1 	bl	80005d8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	071a      	lsls	r2, r3, #28

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800201c:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800201e:	d404      	bmi.n	800202a <UART_CheckIdleState+0x20>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	075b      	lsls	r3, r3, #29
 8002026:	d51a      	bpl.n	800205e <UART_CheckIdleState+0x54>
 8002028:	e00d      	b.n	8002046 <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800202a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	4632      	mov	r2, r6
 8002032:	4603      	mov	r3, r0
 8002034:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002038:	4620      	mov	r0, r4
 800203a:	f7ff feed 	bl	8001e18 <UART_WaitOnFlagUntilTimeout>
 800203e:	2800      	cmp	r0, #0
 8002040:	d0ee      	beq.n	8002020 <UART_CheckIdleState+0x16>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002042:	2003      	movs	r0, #3
 8002044:	e013      	b.n	800206e <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002046:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2200      	movs	r2, #0
 800204e:	462b      	mov	r3, r5
 8002050:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff fedf 	bl	8001e18 <UART_WaitOnFlagUntilTimeout>
 800205a:	2800      	cmp	r0, #0
 800205c:	d1f1      	bne.n	8002042 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800205e:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002060:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002062:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002066:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 800206a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 800206e:	b002      	add	sp, #8
 8002070:	bd70      	pop	{r4, r5, r6, pc}

08002072 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002072:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002074:	4604      	mov	r4, r0
 8002076:	b360      	cbz	r0, 80020d2 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002078:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800207c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002080:	b91b      	cbnz	r3, 800208a <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002082:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002086:	f000 fd97 	bl	8002bb8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800208a:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800208c:	2324      	movs	r3, #36	; 0x24
 800208e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002092:	6813      	ldr	r3, [r2, #0]
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff fd4e 	bl	8001b3c <UART_SetConfig>
 80020a0:	2801      	cmp	r0, #1
 80020a2:	d016      	beq.n	80020d2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020a6:	b113      	cbz	r3, 80020ae <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 80020a8:	4620      	mov	r0, r4
 80020aa:	f7ff fe61 	bl	8001d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020be:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020c6:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80020c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 80020ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ce:	f7ff bf9c 	b.w	800200a <UART_CheckIdleState>
}
 80020d2:	2001      	movs	r0, #1
 80020d4:	bd10      	pop	{r4, pc}

080020d6 <initDebitMachine>:

enum debitMachineButtons {
	btn_none = 0, btn_ok, btn_cancel, btn_add1, btn_add2
};

void initDebitMachine() {
 80020d6:	b508      	push	{r3, lr}
//	initSoundDriver();
	HD44780_Init();
 80020d8:	f000 faa0 	bl	800261c <HD44780_Init>
	deBounceInit(BtnPin_OK, 'A', 1);
 80020dc:	2201      	movs	r2, #1
 80020de:	2141      	movs	r1, #65	; 0x41
 80020e0:	2000      	movs	r0, #0
 80020e2:	f000 fb17 	bl	8002714 <deBounceInit>
	deBounceInit(BtnPin_Cancel, 'A', 1);
 80020e6:	2201      	movs	r2, #1
 80020e8:	2141      	movs	r1, #65	; 0x41
 80020ea:	4610      	mov	r0, r2
 80020ec:	f000 fb12 	bl	8002714 <deBounceInit>
	deBounceInit(BtnPin_Add1, 'A', 1);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2141      	movs	r1, #65	; 0x41
 80020f4:	2003      	movs	r0, #3
 80020f6:	f000 fb0d 	bl	8002714 <deBounceInit>
	deBounceInit(BtnPin_Add2, 'A', 1);
 80020fa:	2201      	movs	r2, #1
 80020fc:	2141      	movs	r1, #65	; 0x41
 80020fe:	2004      	movs	r0, #4
}
 8002100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
//	initSoundDriver();
	HD44780_Init();
	deBounceInit(BtnPin_OK, 'A', 1);
	deBounceInit(BtnPin_Cancel, 'A', 1);
	deBounceInit(BtnPin_Add1, 'A', 1);
	deBounceInit(BtnPin_Add2, 'A', 1);
 8002104:	f000 bb06 	b.w	8002714 <deBounceInit>

08002108 <waitAndGetBtnPressed>:
}

uint8_t waitAndGetBtnPressed() {
 8002108:	b508      	push	{r3, lr}
	uint8_t btnPressed = btn_none;
 800210a:	2000      	movs	r0, #0
	while (btnPressed == btn_none) {
 800210c:	b9e0      	cbnz	r0, 8002148 <waitAndGetBtnPressed+0x40>
		if (deBounceReadPin(BtnPin_OK, 'A', 50) == 0)
 800210e:	2232      	movs	r2, #50	; 0x32
 8002110:	2141      	movs	r1, #65	; 0x41
 8002112:	f000 fb5b 	bl	80027cc <deBounceReadPin>
 8002116:	b1d0      	cbz	r0, 800214e <waitAndGetBtnPressed+0x46>
			btnPressed = btn_ok;
		else if (deBounceReadPin(BtnPin_Cancel, 'A', 50) == 0)
 8002118:	2232      	movs	r2, #50	; 0x32
 800211a:	2141      	movs	r1, #65	; 0x41
 800211c:	2001      	movs	r0, #1
 800211e:	f000 fb55 	bl	80027cc <deBounceReadPin>
 8002122:	b190      	cbz	r0, 800214a <waitAndGetBtnPressed+0x42>
			btnPressed = btn_cancel;
		else if (deBounceReadPin(BtnPin_Add1, 'A', 50) == 0)
 8002124:	2232      	movs	r2, #50	; 0x32
 8002126:	2141      	movs	r1, #65	; 0x41
 8002128:	2003      	movs	r0, #3
 800212a:	f000 fb4f 	bl	80027cc <deBounceReadPin>
 800212e:	b148      	cbz	r0, 8002144 <waitAndGetBtnPressed+0x3c>
			btnPressed = btn_add1;
		else if (deBounceReadPin(BtnPin_Add2, 'A', 50) == 0)
 8002130:	2232      	movs	r2, #50	; 0x32
 8002132:	2141      	movs	r1, #65	; 0x41
 8002134:	2004      	movs	r0, #4
 8002136:	f000 fb49 	bl	80027cc <deBounceReadPin>
			btnPressed = btn_add2;
 800213a:	2800      	cmp	r0, #0
 800213c:	bf14      	ite	ne
 800213e:	2000      	movne	r0, #0
 8002140:	2004      	moveq	r0, #4
 8002142:	e7e3      	b.n	800210c <waitAndGetBtnPressed+0x4>
		if (deBounceReadPin(BtnPin_OK, 'A', 50) == 0)
			btnPressed = btn_ok;
		else if (deBounceReadPin(BtnPin_Cancel, 'A', 50) == 0)
			btnPressed = btn_cancel;
		else if (deBounceReadPin(BtnPin_Add1, 'A', 50) == 0)
			btnPressed = btn_add1;
 8002144:	2003      	movs	r0, #3
 8002146:	bd08      	pop	{r3, pc}
 8002148:	bd08      	pop	{r3, pc}
	uint8_t btnPressed = btn_none;
	while (btnPressed == btn_none) {
		if (deBounceReadPin(BtnPin_OK, 'A', 50) == 0)
			btnPressed = btn_ok;
		else if (deBounceReadPin(BtnPin_Cancel, 'A', 50) == 0)
			btnPressed = btn_cancel;
 800214a:	2002      	movs	r0, #2
 800214c:	bd08      	pop	{r3, pc}

uint8_t waitAndGetBtnPressed() {
	uint8_t btnPressed = btn_none;
	while (btnPressed == btn_none) {
		if (deBounceReadPin(BtnPin_OK, 'A', 50) == 0)
			btnPressed = btn_ok;
 800214e:	2001      	movs	r0, #1
			btnPressed = btn_add1;
		else if (deBounceReadPin(BtnPin_Add2, 'A', 50) == 0)
			btnPressed = btn_add2;
	}
	return btnPressed;
}
 8002150:	bd08      	pop	{r3, pc}
	...

08002154 <showOkCancelTextOnLcd>:

void showOkCancelTextOnLcd() {
 8002154:	b508      	push	{r3, lr}
	HD44780_GotoXY(0, 1);
 8002156:	2101      	movs	r1, #1
 8002158:	2000      	movs	r0, #0
 800215a:	f000 fab9 	bl	80026d0 <HD44780_GotoXY>
	HD44780_PutStr("OK");
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <showOkCancelTextOnLcd+0x24>)
 8002160:	f000 fac4 	bl	80026ec <HD44780_PutStr>
	HD44780_GotoXY(10, 1);
 8002164:	200a      	movs	r0, #10
 8002166:	2101      	movs	r1, #1
 8002168:	f000 fab2 	bl	80026d0 <HD44780_GotoXY>
	HD44780_PutStr("CANCEL");
 800216c:	4803      	ldr	r0, [pc, #12]	; (800217c <showOkCancelTextOnLcd+0x28>)
}
 800216e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void showOkCancelTextOnLcd() {
	HD44780_GotoXY(0, 1);
	HD44780_PutStr("OK");
	HD44780_GotoXY(10, 1);
	HD44780_PutStr("CANCEL");
 8002172:	f000 babb 	b.w	80026ec <HD44780_PutStr>
 8002176:	bf00      	nop
 8002178:	08004bfd 	.word	0x08004bfd
 800217c:	08004c00 	.word	0x08004c00

08002180 <welcomeState>:
}

void welcomeState() {
 8002180:	b510      	push	{r4, lr}
 8002182:	b088      	sub	sp, #32
	HD44780_ClrScr();
 8002184:	f000 fac3 	bl	800270e <HD44780_ClrScr>
	HD44780_PutStr("Welcome!");
 8002188:	4816      	ldr	r0, [pc, #88]	; (80021e4 <welcomeState+0x64>)
 800218a:	f000 faaf 	bl	80026ec <HD44780_PutStr>
	char debitRequest[32] = { '\0' };
 800218e:	2220      	movs	r2, #32
 8002190:	2100      	movs	r1, #0
 8002192:	4668      	mov	r0, sp
 8002194:	f000 fe66 	bl	8002e64 <memset>
	int8_t result = scanf("%s", debitRequest);
 8002198:	4669      	mov	r1, sp
 800219a:	4813      	ldr	r0, [pc, #76]	; (80021e8 <welcomeState+0x68>)
 800219c:	f000 ff3e 	bl	800301c <iscanf>
	if (result <= 0)	//then somehow non-float chars were entered
 80021a0:	b240      	sxtb	r0, r0
 80021a2:	2800      	cmp	r0, #0
 80021a4:	dd12      	ble.n	80021cc <welcomeState+0x4c>
			{						//and nothing was assigned to %f
		fpurge(stdin); 	//clear the last erroneous char(s) from the input stream
	} else {
		if (strstr(debitRequest, "RQ:") != NULL) {
 80021a6:	4911      	ldr	r1, [pc, #68]	; (80021ec <welcomeState+0x6c>)
 80021a8:	4668      	mov	r0, sp
 80021aa:	f000 ffab 	bl	8003104 <strstr>
 80021ae:	b168      	cbz	r0, 80021cc <welcomeState+0x4c>
			strncpy(amount, debitRequest + 3, 6);
 80021b0:	4c0f      	ldr	r4, [pc, #60]	; (80021f0 <welcomeState+0x70>)
 80021b2:	2206      	movs	r2, #6
 80021b4:	f10d 0103 	add.w	r1, sp, #3
 80021b8:	4620      	mov	r0, r4
 80021ba:	f000 ff90 	bl	80030de <strncpy>
			amount[8] = '\0';
			debitMachineCurrentState++;
 80021be:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <welcomeState+0x74>)
			{						//and nothing was assigned to %f
		fpurge(stdin); 	//clear the last erroneous char(s) from the input stream
	} else {
		if (strstr(debitRequest, "RQ:") != NULL) {
			strncpy(amount, debitRequest + 3, 6);
			amount[8] = '\0';
 80021c0:	2300      	movs	r3, #0
 80021c2:	7223      	strb	r3, [r4, #8]
			debitMachineCurrentState++;
 80021c4:	7813      	ldrb	r3, [r2, #0]
 80021c6:	3301      	adds	r3, #1
 80021c8:	7013      	strb	r3, [r2, #0]
 80021ca:	e004      	b.n	80021d6 <welcomeState+0x56>
		} else {						//and nothing was assigned to %f
			fpurge(stdin); //clear the last erroneous char(s) from the input stream
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <welcomeState+0x78>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6858      	ldr	r0, [r3, #4]
 80021d2:	f000 fe19 	bl	8002e08 <fpurge>
		}
	}
		HAL_Delay(1000);
 80021d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021da:	f7fe fa03 	bl	80005e4 <HAL_Delay>
}
 80021de:	b008      	add	sp, #32
 80021e0:	bd10      	pop	{r4, pc}
 80021e2:	bf00      	nop
 80021e4:	08004c07 	.word	0x08004c07
 80021e8:	08004c10 	.word	0x08004c10
 80021ec:	08004c13 	.word	0x08004c13
 80021f0:	20000088 	.word	0x20000088
 80021f4:	20000090 	.word	0x20000090
 80021f8:	20000064 	.word	0x20000064

080021fc <amountState>:

void amountState() {
 80021fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	HD44780_ClrScr();
 80021fe:	f000 fa86 	bl	800270e <HD44780_ClrScr>
	char stringBuffer[15];
	strcpy(stringBuffer, "Amount: $");
 8002202:	490c      	ldr	r1, [pc, #48]	; (8002234 <amountState+0x38>)
 8002204:	4668      	mov	r0, sp
 8002206:	f000 ff62 	bl	80030ce <strcpy>
	strcat(stringBuffer, amount);
 800220a:	490b      	ldr	r1, [pc, #44]	; (8002238 <amountState+0x3c>)
 800220c:	4668      	mov	r0, sp
 800220e:	f000 ff4f 	bl	80030b0 <strcat>
	HD44780_PutStr(stringBuffer);
 8002212:	4668      	mov	r0, sp
 8002214:	f000 fa6a 	bl	80026ec <HD44780_PutStr>

	showOkCancelTextOnLcd();
 8002218:	f7ff ff9c 	bl	8002154 <showOkCancelTextOnLcd>
	if (waitAndGetBtnPressed() == btn_ok)
 800221c:	f7ff ff74 	bl	8002108 <waitAndGetBtnPressed>
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <amountState+0x40>)
 8002222:	2801      	cmp	r0, #1
		debitMachineCurrentState++;
 8002224:	bf0a      	itet	eq
 8002226:	781a      	ldrbeq	r2, [r3, #0]
	else
		debitMachineCurrentState = cancel;
 8002228:	2205      	movne	r2, #5
	strcat(stringBuffer, amount);
	HD44780_PutStr(stringBuffer);

	showOkCancelTextOnLcd();
	if (waitAndGetBtnPressed() == btn_ok)
		debitMachineCurrentState++;
 800222a:	3201      	addeq	r2, #1
	else
		debitMachineCurrentState = cancel;
 800222c:	701a      	strb	r2, [r3, #0]
}
 800222e:	b005      	add	sp, #20
 8002230:	f85d fb04 	ldr.w	pc, [sp], #4
 8002234:	08004c17 	.word	0x08004c17
 8002238:	20000088 	.word	0x20000088
 800223c:	20000090 	.word	0x20000090

08002240 <chqSavState>:

void chqSavState() {
 8002240:	b508      	push	{r3, lr}

	HD44780_ClrScr();
 8002242:	f000 fa64 	bl	800270e <HD44780_ClrScr>
	HD44780_PutStr("Choose account:");
 8002246:	4811      	ldr	r0, [pc, #68]	; (800228c <chqSavState+0x4c>)
 8002248:	f000 fa50 	bl	80026ec <HD44780_PutStr>
	HD44780_GotoXY(0, 1);
 800224c:	2101      	movs	r1, #1
 800224e:	2000      	movs	r0, #0
 8002250:	f000 fa3e 	bl	80026d0 <HD44780_GotoXY>
	HD44780_PutStr("Chq         Sav");
 8002254:	480e      	ldr	r0, [pc, #56]	; (8002290 <chqSavState+0x50>)
 8002256:	f000 fa49 	bl	80026ec <HD44780_PutStr>

	if (waitAndGetBtnPressed() == btn_ok) {
 800225a:	f7ff ff55 	bl	8002108 <waitAndGetBtnPressed>
 800225e:	2801      	cmp	r0, #1
 8002260:	d103      	bne.n	800226a <chqSavState+0x2a>
		HD44780_ClrScr();
 8002262:	f000 fa54 	bl	800270e <HD44780_ClrScr>
		HD44780_PutStr("Continue chq?");
 8002266:	480b      	ldr	r0, [pc, #44]	; (8002294 <chqSavState+0x54>)
 8002268:	e002      	b.n	8002270 <chqSavState+0x30>
	} else {
		HD44780_ClrScr();
 800226a:	f000 fa50 	bl	800270e <HD44780_ClrScr>
		HD44780_PutStr("Continue sav?");
 800226e:	480a      	ldr	r0, [pc, #40]	; (8002298 <chqSavState+0x58>)
 8002270:	f000 fa3c 	bl	80026ec <HD44780_PutStr>
	}

	showOkCancelTextOnLcd();
 8002274:	f7ff ff6e 	bl	8002154 <showOkCancelTextOnLcd>
	if (waitAndGetBtnPressed() == btn_ok)
 8002278:	f7ff ff46 	bl	8002108 <waitAndGetBtnPressed>
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <chqSavState+0x5c>)
 800227e:	2801      	cmp	r0, #1
		debitMachineCurrentState++;
 8002280:	bf0a      	itet	eq
 8002282:	781a      	ldrbeq	r2, [r3, #0]
	else
		debitMachineCurrentState = cancel;
 8002284:	2205      	movne	r2, #5
		HD44780_PutStr("Continue sav?");
	}

	showOkCancelTextOnLcd();
	if (waitAndGetBtnPressed() == btn_ok)
		debitMachineCurrentState++;
 8002286:	3201      	addeq	r2, #1
	else
		debitMachineCurrentState = cancel;
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	bd08      	pop	{r3, pc}
 800228c:	08004c21 	.word	0x08004c21
 8002290:	08004c31 	.word	0x08004c31
 8002294:	08004c41 	.word	0x08004c41
 8002298:	08004c4f 	.word	0x08004c4f
 800229c:	20000090 	.word	0x20000090

080022a0 <pwdDigitChoseAndDisplay>:
}

void pwdDigitChoseAndDisplay(const char* digit, uint8_t pos) {
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	460e      	mov	r6, r1
 80022a4:	4605      	mov	r5, r0
	HD44780_ClrScr();
 80022a6:	f000 fa32 	bl	800270e <HD44780_ClrScr>
	HD44780_PutStr("Enter pwd:");
 80022aa:	480e      	ldr	r0, [pc, #56]	; (80022e4 <pwdDigitChoseAndDisplay+0x44>)
 80022ac:	f000 fa1e 	bl	80026ec <HD44780_PutStr>
	HD44780_GotoXY(10, 0);
 80022b0:	2100      	movs	r1, #0
 80022b2:	200a      	movs	r0, #10
 80022b4:	f000 fa0c 	bl	80026d0 <HD44780_GotoXY>
	for (int i = 0; i < 4; i++) {
 80022b8:	2400      	movs	r4, #0
		if (i == pos) {
 80022ba:	42a6      	cmp	r6, r4
 80022bc:	d108      	bne.n	80022d0 <pwdDigitChoseAndDisplay+0x30>
			HD44780_PutChar('[');
 80022be:	205b      	movs	r0, #91	; 0x5b
 80022c0:	f000 fa04 	bl	80026cc <HD44780_PutChar>
			HD44780_PutChar(*digit);
 80022c4:	7828      	ldrb	r0, [r5, #0]
 80022c6:	f000 fa01 	bl	80026cc <HD44780_PutChar>
			HD44780_PutChar(']');
 80022ca:	205d      	movs	r0, #93	; 0x5d
 80022cc:	f000 f9fe 	bl	80026cc <HD44780_PutChar>
		}
		HD44780_PutChar('*');
 80022d0:	202a      	movs	r0, #42	; 0x2a

void pwdDigitChoseAndDisplay(const char* digit, uint8_t pos) {
	HD44780_ClrScr();
	HD44780_PutStr("Enter pwd:");
	HD44780_GotoXY(10, 0);
	for (int i = 0; i < 4; i++) {
 80022d2:	3401      	adds	r4, #1
		if (i == pos) {
			HD44780_PutChar('[');
			HD44780_PutChar(*digit);
			HD44780_PutChar(']');
		}
		HD44780_PutChar('*');
 80022d4:	f000 f9fa 	bl	80026cc <HD44780_PutChar>

void pwdDigitChoseAndDisplay(const char* digit, uint8_t pos) {
	HD44780_ClrScr();
	HD44780_PutStr("Enter pwd:");
	HD44780_GotoXY(10, 0);
	for (int i = 0; i < 4; i++) {
 80022d8:	2c04      	cmp	r4, #4
 80022da:	d1ee      	bne.n	80022ba <pwdDigitChoseAndDisplay+0x1a>
			HD44780_PutChar(']');
		}
		HD44780_PutChar('*');
	}
	showOkCancelTextOnLcd();
}
 80022dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HD44780_PutChar(*digit);
			HD44780_PutChar(']');
		}
		HD44780_PutChar('*');
	}
	showOkCancelTextOnLcd();
 80022e0:	f7ff bf38 	b.w	8002154 <showOkCancelTextOnLcd>
 80022e4:	08004c5d 	.word	0x08004c5d

080022e8 <pinCodeEdit>:
}

void pinCodeEdit(char* pwdOut) {
 80022e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t btnPressed = btn_none;
	char password[4] = { '0', '0', '0', '0' };
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <pinCodeEdit+0x9c>)
 80022ec:	ae02      	add	r6, sp, #8
		HD44780_PutChar('*');
	}
	showOkCancelTextOnLcd();
}

void pinCodeEdit(char* pwdOut) {
 80022ee:	4605      	mov	r5, r0
	uint8_t btnPressed = btn_none;
	char password[4] = { '0', '0', '0', '0' };
	uint8_t cursorPosition = 0;
 80022f0:	2400      	movs	r4, #0
	showOkCancelTextOnLcd();
}

void pinCodeEdit(char* pwdOut) {
	uint8_t btnPressed = btn_none;
	char password[4] = { '0', '0', '0', '0' };
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	f846 0d04 	str.w	r0, [r6, #-4]!
	}
	showOkCancelTextOnLcd();
}

void pinCodeEdit(char* pwdOut) {
	uint8_t btnPressed = btn_none;
 80022f8:	4620      	mov	r0, r4
	char password[4] = { '0', '0', '0', '0' };
	uint8_t cursorPosition = 0;
	while ((btnPressed != btn_ok) && (btnPressed != btn_cancel)) {
 80022fa:	1e43      	subs	r3, r0, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d930      	bls.n	8002364 <pinCodeEdit+0x7c>

		if (btnPressed == btn_add2) {
 8002302:	2804      	cmp	r0, #4
 8002304:	d104      	bne.n	8002310 <pinCodeEdit+0x28>
			if (cursorPosition < 3)
 8002306:	2c02      	cmp	r4, #2
 8002308:	d816      	bhi.n	8002338 <pinCodeEdit+0x50>
				cursorPosition++;
 800230a:	3401      	adds	r4, #1
 800230c:	b2e4      	uxtb	r4, r4
 800230e:	e00d      	b.n	800232c <pinCodeEdit+0x44>
			else
				cursorPosition = 0;
		}

		if (btnPressed == btn_add1) {
 8002310:	2803      	cmp	r0, #3
 8002312:	d10b      	bne.n	800232c <pinCodeEdit+0x44>
			if (cursorPosition <= 3)
 8002314:	2c03      	cmp	r4, #3
 8002316:	d80f      	bhi.n	8002338 <pinCodeEdit+0x50>
				if (password[cursorPosition] < 57) // '0'
 8002318:	ab02      	add	r3, sp, #8
 800231a:	191a      	adds	r2, r3, r4
 800231c:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 8002320:	2b38      	cmp	r3, #56	; 0x38
					password[cursorPosition]++;
 8002322:	bf94      	ite	ls
 8002324:	3301      	addls	r3, #1
				else
					password[cursorPosition] = 48; // '9'
 8002326:	2330      	movhi	r3, #48	; 0x30
 8002328:	f802 3c04 	strb.w	r3, [r2, #-4]
			else
				cursorPosition = 0;
		}

		switch (cursorPosition) {
 800232c:	2c03      	cmp	r4, #3
 800232e:	d816      	bhi.n	800235e <pinCodeEdit+0x76>
 8002330:	e8df f004 	tbb	[pc, r4]
 8002334:	100c0802 	.word	0x100c0802
		case 0:
			pwdDigitChoseAndDisplay(&password[cursorPosition], cursorPosition);
 8002338:	2100      	movs	r1, #0
 800233a:	4630      	mov	r0, r6
 800233c:	f7ff ffb0 	bl	80022a0 <pwdDigitChoseAndDisplay>
			break;
 8002340:	2400      	movs	r4, #0
 8002342:	e00c      	b.n	800235e <pinCodeEdit+0x76>
		case 1:
			pwdDigitChoseAndDisplay(&password[cursorPosition], cursorPosition);
 8002344:	2101      	movs	r1, #1
 8002346:	f10d 0005 	add.w	r0, sp, #5
 800234a:	e006      	b.n	800235a <pinCodeEdit+0x72>
			break;
		case 2:
			pwdDigitChoseAndDisplay(&password[cursorPosition], cursorPosition);
 800234c:	2102      	movs	r1, #2
 800234e:	f10d 0006 	add.w	r0, sp, #6
 8002352:	e002      	b.n	800235a <pinCodeEdit+0x72>
			break;
		case 3:
			pwdDigitChoseAndDisplay(&password[cursorPosition], cursorPosition);
 8002354:	2103      	movs	r1, #3
 8002356:	f10d 0007 	add.w	r0, sp, #7
 800235a:	f7ff ffa1 	bl	80022a0 <pwdDigitChoseAndDisplay>
			break;
		default:
			break;
		}
		btnPressed = waitAndGetBtnPressed();
 800235e:	f7ff fed3 	bl	8002108 <waitAndGetBtnPressed>
 8002362:	e7ca      	b.n	80022fa <pinCodeEdit+0x12>
	}
	if (btnPressed == btn_ok) {
 8002364:	2801      	cmp	r0, #1
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <pinCodeEdit+0xa0>)
 8002368:	d107      	bne.n	800237a <pinCodeEdit+0x92>
		debitMachineCurrentState++;
 800236a:	781a      	ldrb	r2, [r3, #0]
		strcpy(pwdOut, password);
 800236c:	a901      	add	r1, sp, #4
			break;
		}
		btnPressed = waitAndGetBtnPressed();
	}
	if (btnPressed == btn_ok) {
		debitMachineCurrentState++;
 800236e:	3201      	adds	r2, #1
		strcpy(pwdOut, password);
 8002370:	4628      	mov	r0, r5
			break;
		}
		btnPressed = waitAndGetBtnPressed();
	}
	if (btnPressed == btn_ok) {
		debitMachineCurrentState++;
 8002372:	701a      	strb	r2, [r3, #0]
		strcpy(pwdOut, password);
 8002374:	f000 feab 	bl	80030ce <strcpy>
 8002378:	e001      	b.n	800237e <pinCodeEdit+0x96>
	} else
		debitMachineCurrentState = cancel;
 800237a:	2205      	movs	r2, #5
 800237c:	701a      	strb	r2, [r3, #0]

}
 800237e:	b002      	add	sp, #8
 8002380:	bd70      	pop	{r4, r5, r6, pc}
 8002382:	bf00      	nop
 8002384:	08004bdc 	.word	0x08004bdc
 8002388:	20000090 	.word	0x20000090

0800238c <pinCodeState>:

void pinCodeState() {
 800238c:	b513      	push	{r0, r1, r4, lr}
	HD44780_ClrScr();
 800238e:	f000 f9be 	bl	800270e <HD44780_ClrScr>
	HD44780_PutStr("Enter pwd:");
 8002392:	4809      	ldr	r0, [pc, #36]	; (80023b8 <pinCodeState+0x2c>)
 8002394:	f000 f9aa 	bl	80026ec <HD44780_PutStr>
	char pwdToSend[5] = { 0 };
 8002398:	2400      	movs	r4, #0
	pinCodeEdit(pwdToSend);
 800239a:	4668      	mov	r0, sp
}

void pinCodeState() {
	HD44780_ClrScr();
	HD44780_PutStr("Enter pwd:");
	char pwdToSend[5] = { 0 };
 800239c:	9400      	str	r4, [sp, #0]
 800239e:	f88d 4004 	strb.w	r4, [sp, #4]
	pinCodeEdit(pwdToSend);
 80023a2:	f7ff ffa1 	bl	80022e8 <pinCodeEdit>
	pwdToSend[5] = '\0';
	printf("Info:%s\r\n", pwdToSend);
 80023a6:	4669      	mov	r1, sp
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <pinCodeState+0x30>)
void pinCodeState() {
	HD44780_ClrScr();
	HD44780_PutStr("Enter pwd:");
	char pwdToSend[5] = { 0 };
	pinCodeEdit(pwdToSend);
	pwdToSend[5] = '\0';
 80023aa:	f88d 4005 	strb.w	r4, [sp, #5]
	printf("Info:%s\r\n", pwdToSend);
 80023ae:	f000 fe0d 	bl	8002fcc <iprintf>
}
 80023b2:	b002      	add	sp, #8
 80023b4:	bd10      	pop	{r4, pc}
 80023b6:	bf00      	nop
 80023b8:	08004c5d 	.word	0x08004c5d
 80023bc:	08004c68 	.word	0x08004c68

080023c0 <prooveTransactionState>:

void prooveTransactionState() {
 80023c0:	b530      	push	{r4, r5, lr}
 80023c2:	b085      	sub	sp, #20
	HD44780_ClrScr();
 80023c4:	f000 f9a3 	bl	800270e <HD44780_ClrScr>
	HD44780_PutStr("Approving...");
 80023c8:	481a      	ldr	r0, [pc, #104]	; (8002434 <prooveTransactionState+0x74>)
 80023ca:	f000 f98f 	bl	80026ec <HD44780_PutStr>
	char debitRequest[10] = { 0 };
 80023ce:	2400      	movs	r4, #0
	int8_t result = scanf("%s", debitRequest);
 80023d0:	a901      	add	r1, sp, #4
 80023d2:	4819      	ldr	r0, [pc, #100]	; (8002438 <prooveTransactionState+0x78>)
}

void prooveTransactionState() {
	HD44780_ClrScr();
	HD44780_PutStr("Approving...");
	char debitRequest[10] = { 0 };
 80023d4:	9401      	str	r4, [sp, #4]
 80023d6:	9402      	str	r4, [sp, #8]
 80023d8:	f8ad 400c 	strh.w	r4, [sp, #12]
	int8_t result = scanf("%s", debitRequest);
 80023dc:	f000 fe1e 	bl	800301c <iscanf>
	if (result == 0) {					//and nothing was assigned to %f
 80023e0:	f010 0fff 	tst.w	r0, #255	; 0xff
 80023e4:	d105      	bne.n	80023f2 <prooveTransactionState+0x32>
		fpurge(stdin); 	//clear the last erroneous char(s) from the input stream
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <prooveTransactionState+0x7c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6858      	ldr	r0, [r3, #4]
 80023ec:	f000 fd0c 	bl	8002e08 <fpurge>
 80023f0:	e01e      	b.n	8002430 <prooveTransactionState+0x70>
	} else if (strstr(debitRequest, "Ok") != NULL) {
 80023f2:	4913      	ldr	r1, [pc, #76]	; (8002440 <prooveTransactionState+0x80>)
 80023f4:	4d13      	ldr	r5, [pc, #76]	; (8002444 <prooveTransactionState+0x84>)
 80023f6:	a801      	add	r0, sp, #4
 80023f8:	f000 fe84 	bl	8003104 <strstr>
 80023fc:	b1b0      	cbz	r0, 800242c <prooveTransactionState+0x6c>
		playNote(400,500);
 80023fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002402:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002406:	f000 fb4f 	bl	8002aa8 <playNote>
		playNote(800,500);
 800240a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800240e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002412:	f000 fb49 	bl	8002aa8 <playNote>
		HD44780_ClrScr();
 8002416:	f000 f97a 	bl	800270e <HD44780_ClrScr>
		HD44780_PutStr("Approved");
 800241a:	480b      	ldr	r0, [pc, #44]	; (8002448 <prooveTransactionState+0x88>)
 800241c:	f000 f966 	bl	80026ec <HD44780_PutStr>
		HAL_Delay(1000);
 8002420:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002424:	f7fe f8de 	bl	80005e4 <HAL_Delay>
		debitMachineCurrentState = welcome;
 8002428:	702c      	strb	r4, [r5, #0]
 800242a:	e001      	b.n	8002430 <prooveTransactionState+0x70>
	} else
		debitMachineCurrentState = cancel;
 800242c:	2305      	movs	r3, #5
 800242e:	702b      	strb	r3, [r5, #0]
}
 8002430:	b005      	add	sp, #20
 8002432:	bd30      	pop	{r4, r5, pc}
 8002434:	08004c72 	.word	0x08004c72
 8002438:	08004c10 	.word	0x08004c10
 800243c:	20000064 	.word	0x20000064
 8002440:	08004c7f 	.word	0x08004c7f
 8002444:	20000090 	.word	0x20000090
 8002448:	08004c82 	.word	0x08004c82

0800244c <cancelState>:
void cancelState() {
 800244c:	b508      	push	{r3, lr}
	printf("Cncld");
 800244e:	4811      	ldr	r0, [pc, #68]	; (8002494 <cancelState+0x48>)
 8002450:	f000 fdbc 	bl	8002fcc <iprintf>
	playNote(800,500);
 8002454:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002458:	f44f 7048 	mov.w	r0, #800	; 0x320
 800245c:	f000 fb24 	bl	8002aa8 <playNote>
	playNote(400,500);
 8002460:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002464:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002468:	f000 fb1e 	bl	8002aa8 <playNote>
	HD44780_ClrScr();
 800246c:	f000 f94f 	bl	800270e <HD44780_ClrScr>
	HD44780_PutStr("Transaction");
 8002470:	4809      	ldr	r0, [pc, #36]	; (8002498 <cancelState+0x4c>)
 8002472:	f000 f93b 	bl	80026ec <HD44780_PutStr>
	HD44780_GotoXY(0, 1);
 8002476:	2101      	movs	r1, #1
 8002478:	2000      	movs	r0, #0
 800247a:	f000 f929 	bl	80026d0 <HD44780_GotoXY>
	HD44780_PutStr("canceled!");
 800247e:	4807      	ldr	r0, [pc, #28]	; (800249c <cancelState+0x50>)
 8002480:	f000 f934 	bl	80026ec <HD44780_PutStr>
	HAL_Delay(1000);
 8002484:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002488:	f7fe f8ac 	bl	80005e4 <HAL_Delay>
	welcomeState();
}
 800248c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HD44780_ClrScr();
	HD44780_PutStr("Transaction");
	HD44780_GotoXY(0, 1);
	HD44780_PutStr("canceled!");
	HAL_Delay(1000);
	welcomeState();
 8002490:	f7ff be76 	b.w	8002180 <welcomeState>
 8002494:	08004c8b 	.word	0x08004c8b
 8002498:	08004c91 	.word	0x08004c91
 800249c:	08004c9d 	.word	0x08004c9d

080024a0 <debitMachineHandleStates>:
}

void debitMachineHandleStates() {
	switch (debitMachineCurrentState) {
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <debitMachineHandleStates+0x30>)
 80024a2:	f993 3000 	ldrsb.w	r3, [r3]
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d810      	bhi.n	80024cc <debitMachineHandleStates+0x2c>
 80024aa:	e8df f003 	tbb	[pc, r3]
 80024ae:	0503      	.short	0x0503
 80024b0:	0d0b0907 	.word	0x0d0b0907
	case welcome:
		welcomeState();
 80024b4:	f7ff be64 	b.w	8002180 <welcomeState>
		break;
	case amountReceived:
		amountState();
 80024b8:	f7ff bea0 	b.w	80021fc <amountState>
		break;
	case chqSav:
		chqSavState();
 80024bc:	f7ff bec0 	b.w	8002240 <chqSavState>
		break;
	case pinCode:
		pinCodeState();
 80024c0:	f7ff bf64 	b.w	800238c <pinCodeState>
		break;
	case prooveTransaction:
		prooveTransactionState();
 80024c4:	f7ff bf7c 	b.w	80023c0 <prooveTransactionState>
		break;
	case cancel:
		cancelState();
 80024c8:	f7ff bfc0 	b.w	800244c <cancelState>
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000090 	.word	0x20000090

080024d4 <GPIO_SetBits>:
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	f7fe b9c1 	b.w	800085c <HAL_GPIO_WritePin>

080024da <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80024da:	2200      	movs	r2, #0
 80024dc:	f7fe b9be 	b.w	800085c <HAL_GPIO_WritePin>

080024e0 <hd44780_wr_hi_nibble>:
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 80024e0:	b510      	push	{r4, lr}
 80024e2:	4604      	mov	r4, r0
	if (data & 0x10) {
 80024e4:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80024e6:	f04f 0110 	mov.w	r1, #16
 80024ea:	481a      	ldr	r0, [pc, #104]	; (8002554 <hd44780_wr_hi_nibble+0x74>)
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
	if (data & 0x10) {
 80024ec:	d502      	bpl.n	80024f4 <hd44780_wr_hi_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80024ee:	f7ff fff1 	bl	80024d4 <GPIO_SetBits>
 80024f2:	e001      	b.n	80024f8 <hd44780_wr_hi_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80024f4:	f7ff fff1 	bl	80024da <GPIO_ResetBits>
	}
	if (data & 0x20) {
 80024f8:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80024fa:	f04f 0120 	mov.w	r1, #32
 80024fe:	4815      	ldr	r0, [pc, #84]	; (8002554 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x10) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x20) {
 8002500:	d502      	bpl.n	8002508 <hd44780_wr_hi_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002502:	f7ff ffe7 	bl	80024d4 <GPIO_SetBits>
 8002506:	e001      	b.n	800250c <hd44780_wr_hi_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002508:	f7ff ffe7 	bl	80024da <GPIO_ResetBits>
	}
	if (data & 0x40) {
 800250c:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800250e:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002512:	4810      	ldr	r0, [pc, #64]	; (8002554 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x20) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x40) {
 8002514:	d502      	bpl.n	800251c <hd44780_wr_hi_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002516:	f7ff ffdd 	bl	80024d4 <GPIO_SetBits>
 800251a:	e001      	b.n	8002520 <hd44780_wr_hi_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800251c:	f7ff ffdd 	bl	80024da <GPIO_ResetBits>
	}
	if (data & 0x80) {
 8002520:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002522:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002526:	480b      	ldr	r0, [pc, #44]	; (8002554 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x40) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x80) {
 8002528:	d502      	bpl.n	8002530 <hd44780_wr_hi_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800252a:	f7ff ffd3 	bl	80024d4 <GPIO_SetBits>
 800252e:	e001      	b.n	8002534 <hd44780_wr_hi_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8002530:	f7ff ffd3 	bl	80024da <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8002534:	2201      	movs	r2, #1
 8002536:	2102      	movs	r1, #2
 8002538:	4806      	ldr	r0, [pc, #24]	; (8002554 <hd44780_wr_hi_nibble+0x74>)
 800253a:	f7fe f98f 	bl	800085c <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 800253e:	2002      	movs	r0, #2
 8002540:	f7fe f850 	bl	80005e4 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8002544:	2200      	movs	r2, #0
 8002546:	2102      	movs	r1, #2
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <hd44780_wr_hi_nibble+0x74>)
}
 800254a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 800254e:	f7fe b985 	b.w	800085c <HAL_GPIO_WritePin>
 8002552:	bf00      	nop
 8002554:	48000400 	.word	0x48000400

08002558 <hd44780_wr_lo_nibble>:
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8002558:	b510      	push	{r4, lr}
 800255a:	4604      	mov	r4, r0
	if (data & 0x01) {
 800255c:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800255e:	f04f 0110 	mov.w	r1, #16
 8002562:	481a      	ldr	r0, [pc, #104]	; (80025cc <hd44780_wr_lo_nibble+0x74>)
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
	if (data & 0x01) {
 8002564:	d502      	bpl.n	800256c <hd44780_wr_lo_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8002566:	f7ff ffb5 	bl	80024d4 <GPIO_SetBits>
 800256a:	e001      	b.n	8002570 <hd44780_wr_lo_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800256c:	f7ff ffb5 	bl	80024da <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8002570:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002572:	f04f 0120 	mov.w	r1, #32
 8002576:	4815      	ldr	r0, [pc, #84]	; (80025cc <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x01) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x02) {
 8002578:	d502      	bpl.n	8002580 <hd44780_wr_lo_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800257a:	f7ff ffab 	bl	80024d4 <GPIO_SetBits>
 800257e:	e001      	b.n	8002584 <hd44780_wr_lo_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8002580:	f7ff ffab 	bl	80024da <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8002584:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002586:	f04f 0140 	mov.w	r1, #64	; 0x40
 800258a:	4810      	ldr	r0, [pc, #64]	; (80025cc <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x02) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x04) {
 800258c:	d502      	bpl.n	8002594 <hd44780_wr_lo_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800258e:	f7ff ffa1 	bl	80024d4 <GPIO_SetBits>
 8002592:	e001      	b.n	8002598 <hd44780_wr_lo_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8002594:	f7ff ffa1 	bl	80024da <GPIO_ResetBits>
	}
	if (data & 0x08) {
 8002598:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800259a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800259e:	480b      	ldr	r0, [pc, #44]	; (80025cc <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x04) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x08) {
 80025a0:	d502      	bpl.n	80025a8 <hd44780_wr_lo_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80025a2:	f7ff ff97 	bl	80024d4 <GPIO_SetBits>
 80025a6:	e001      	b.n	80025ac <hd44780_wr_lo_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80025a8:	f7ff ff97 	bl	80024da <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80025ac:	2201      	movs	r2, #1
 80025ae:	2102      	movs	r1, #2
 80025b0:	4806      	ldr	r0, [pc, #24]	; (80025cc <hd44780_wr_lo_nibble+0x74>)
 80025b2:	f7fe f953 	bl	800085c <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80025b6:	2002      	movs	r0, #2
 80025b8:	f7fe f814 	bl	80005e4 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80025bc:	2200      	movs	r2, #0
 80025be:	2102      	movs	r1, #2
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <hd44780_wr_lo_nibble+0x74>)
}
 80025c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80025c6:	f7fe b949 	b.w	800085c <HAL_GPIO_WritePin>
 80025ca:	bf00      	nop
 80025cc:	48000400 	.word	0x48000400

080025d0 <hd44780_write>:
}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 80025d0:	b510      	push	{r4, lr}
 80025d2:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 80025d4:	f7ff ff84 	bl	80024e0 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 80025d8:	4620      	mov	r0, r4
}
 80025da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
	hd44780_wr_lo_nibble(data);
 80025de:	f7ff bfbb 	b.w	8002558 <hd44780_wr_lo_nibble>
	...

080025e4 <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 80025e4:	b510      	push	{r4, lr}
	hd44780_RS_Off();
 80025e6:	2200      	movs	r2, #0
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 80025e8:	4604      	mov	r4, r0
	hd44780_RS_Off();
 80025ea:	2101      	movs	r1, #1
 80025ec:	4803      	ldr	r0, [pc, #12]	; (80025fc <hd44780_wr_cmd+0x18>)
 80025ee:	f7fe f935 	bl	800085c <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 80025f2:	4620      	mov	r0, r4
}
 80025f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
 80025f8:	f7ff bfea 	b.w	80025d0 <hd44780_write>
 80025fc:	48000400 	.word	0x48000400

08002600 <hd44780_wr_data>:
}

void hd44780_wr_data(unsigned char data) {
 8002600:	b510      	push	{r4, lr}
	hd44780_RS_On();
 8002602:	2201      	movs	r2, #1
void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
 8002604:	4604      	mov	r4, r0
	hd44780_RS_On();
 8002606:	4611      	mov	r1, r2
 8002608:	4803      	ldr	r0, [pc, #12]	; (8002618 <hd44780_wr_data+0x18>)
 800260a:	f7fe f927 	bl	800085c <HAL_GPIO_WritePin>
	hd44780_write(data);
 800260e:	4620      	mov	r0, r4
}
 8002610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
	hd44780_RS_On();
	hd44780_write(data);
 8002614:	f7ff bfdc 	b.w	80025d0 <hd44780_write>
 8002618:	48000400 	.word	0x48000400

0800261c <HD44780_Init>:
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 800261c:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <HD44780_Init+0xa8>)
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 800261e:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002620:	6cda      	ldr	r2, [r3, #76]	; 0x4c
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8002622:	4d29      	ldr	r5, [pc, #164]	; (80026c8 <HD44780_Init+0xac>)
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002624:	f042 0202 	orr.w	r2, r2, #2
 8002628:	64da      	str	r2, [r3, #76]	; 0x4c
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 800262c:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	9300      	str	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002634:	2401      	movs	r4, #1
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8002636:	9b00      	ldr	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002638:	9402      	str	r4, [sp, #8]
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 800263a:	23f0      	movs	r3, #240	; 0xf0
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800263c:	2603      	movs	r6, #3

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 800263e:	a901      	add	r1, sp, #4
 8002640:	4628      	mov	r0, r5
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8002642:	9301      	str	r3, [sp, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002644:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8002646:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8002648:	f7fe f846 	bl	80006d8 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 800264c:	230b      	movs	r3, #11
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 800264e:	a901      	add	r1, sp, #4
 8002650:	4628      	mov	r0, r5

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 8002652:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002654:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002656:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8002658:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 800265a:	f7fe f83d 	bl	80006d8 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 800265e:	4628      	mov	r0, r5
 8002660:	2200      	movs	r2, #0
 8002662:	2102      	movs	r1, #2
 8002664:	f7fe f8fa 	bl	800085c <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 8002668:	4621      	mov	r1, r4
 800266a:	4628      	mov	r0, r5
 800266c:	2200      	movs	r2, #0
 800266e:	f7fe f8f5 	bl	800085c <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 8002672:	2200      	movs	r2, #0
 8002674:	2108      	movs	r1, #8
 8002676:	4628      	mov	r0, r5
 8002678:	f7fe f8f0 	bl	800085c <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 800267c:	2010      	movs	r0, #16
 800267e:	f7fd ffb1 	bl	80005e4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8002682:	2030      	movs	r0, #48	; 0x30
 8002684:	f7ff ff2c 	bl	80024e0 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 8002688:	2005      	movs	r0, #5
 800268a:	f7fd ffab 	bl	80005e4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 800268e:	2030      	movs	r0, #48	; 0x30
 8002690:	f7ff ff26 	bl	80024e0 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 8002694:	4620      	mov	r0, r4
 8002696:	f7fd ffa5 	bl	80005e4 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 800269a:	2030      	movs	r0, #48	; 0x30
 800269c:	f7ff ff20 	bl	80024e0 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 80026a0:	2020      	movs	r0, #32
 80026a2:	f7ff ff1d 	bl	80024e0 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 80026a6:	2028      	movs	r0, #40	; 0x28
 80026a8:	f7ff ff9c 	bl	80025e4 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 80026ac:	200c      	movs	r0, #12
 80026ae:	f7ff ff99 	bl	80025e4 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7ff ff96 	bl	80025e4 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 80026b8:	2006      	movs	r0, #6
 80026ba:	f7ff ff93 	bl	80025e4 <hd44780_wr_cmd>

}
 80026be:	b006      	add	sp, #24
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	48000400 	.word	0x48000400

080026cc <HD44780_PutChar>:
 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
	hd44780_wr_data(c & 0xff);
 80026cc:	f7ff bf98 	b.w	8002600 <hd44780_wr_data>

080026d0 <HD44780_GotoXY>:

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;

	if (y > (HD44780_DISP_ROWS - 1))
		y = 0;
 80026d0:	2901      	cmp	r1, #1
 80026d2:	bf88      	it	hi
 80026d4:	2100      	movhi	r1, #0
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <HD44780_GotoXY+0x18>)
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 80026d8:	5c5b      	ldrb	r3, [r3, r1]
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
	unsigned char copy_y = 0;

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;
 80026da:	280f      	cmp	r0, #15
 80026dc:	bf88      	it	hi
 80026de:	2000      	movhi	r0, #0
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 80026e0:	4418      	add	r0, r3
 80026e2:	b2c0      	uxtb	r0, r0
 80026e4:	f7ff bf7e 	b.w	80025e4 <hd44780_wr_cmd>
 80026e8:	08004ca7 	.word	0x08004ca7

080026ec <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 80026ec:	b513      	push	{r0, r1, r4, lr}
	__IO unsigned int i = 0;
 80026ee:	2300      	movs	r3, #0

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 80026f0:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 80026f2:	9301      	str	r3, [sp, #4]

	do {
		HD44780_PutChar(str[i]);
 80026f4:	9b01      	ldr	r3, [sp, #4]
 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
	hd44780_wr_data(c & 0xff);
 80026f6:	5ce0      	ldrb	r0, [r4, r3]
 80026f8:	f7ff ff82 	bl	8002600 <hd44780_wr_data>
void HD44780_PutStr(char *str) {
	__IO unsigned int i = 0;

	do {
		HD44780_PutChar(str[i]);
		i++;
 80026fc:	9b01      	ldr	r3, [sp, #4]
 80026fe:	3301      	adds	r3, #1
 8002700:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 8002702:	9b01      	ldr	r3, [sp, #4]
 8002704:	5ce3      	ldrb	r3, [r4, r3]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f4      	bne.n	80026f4 <HD44780_PutStr+0x8>
}
 800270a:	b002      	add	sp, #8
 800270c:	bd10      	pop	{r4, pc}

0800270e <HD44780_ClrScr>:

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 800270e:	2001      	movs	r0, #1
 8002710:	f7ff bf68 	b.w	80025e4 <hd44780_wr_cmd>

08002714 <deBounceInit>:
#include <stdint.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_gpio.h"

void deBounceInit(int16_t pin, char port, int8_t mode)
{
 8002714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	switch(pin)
 8002716:	280f      	cmp	r0, #15
 8002718:	d831      	bhi.n	800277e <deBounceInit+0x6a>
 800271a:	e8df f000 	tbb	[pc, r0]
 800271e:	0a08      	.short	0x0a08
 8002720:	12100e0c 	.word	0x12100e0c
 8002724:	1b181614 	.word	0x1b181614
 8002728:	2724211e 	.word	0x2724211e
 800272c:	2d2a      	.short	0x2d2a
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 800272e:	2301      	movs	r3, #1
 8002730:	e024      	b.n	800277c <deBounceInit+0x68>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8002732:	2302      	movs	r3, #2
 8002734:	e022      	b.n	800277c <deBounceInit+0x68>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8002736:	2304      	movs	r3, #4
 8002738:	e020      	b.n	800277c <deBounceInit+0x68>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 800273a:	2308      	movs	r3, #8
 800273c:	e01e      	b.n	800277c <deBounceInit+0x68>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 800273e:	2310      	movs	r3, #16
 8002740:	e01c      	b.n	800277c <deBounceInit+0x68>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8002742:	2320      	movs	r3, #32
 8002744:	e01a      	b.n	800277c <deBounceInit+0x68>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8002746:	2340      	movs	r3, #64	; 0x40
 8002748:	e018      	b.n	800277c <deBounceInit+0x68>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	e016      	b.n	800277c <deBounceInit+0x68>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 800274e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002752:	e013      	b.n	800277c <deBounceInit+0x68>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8002754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002758:	e010      	b.n	800277c <deBounceInit+0x68>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 800275a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275e:	e00d      	b.n	800277c <deBounceInit+0x68>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8002760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002764:	e00a      	b.n	800277c <deBounceInit+0x68>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 8002766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276a:	e007      	b.n	800277c <deBounceInit+0x68>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 800276c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002770:	e004      	b.n	800277c <deBounceInit+0x68>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 8002772:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002776:	e001      	b.n	800277c <deBounceInit+0x68>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8002778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800277c:	9301      	str	r3, [sp, #4]
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277e:	2300      	movs	r3, #0
 8002780:	9302      	str	r3, [sp, #8]
	switch (mode)
 8002782:	b11a      	cbz	r2, 800278c <deBounceInit+0x78>
 8002784:	2a01      	cmp	r2, #1
 8002786:	d103      	bne.n	8002790 <deBounceInit+0x7c>
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 8002788:	9203      	str	r2, [sp, #12]
 800278a:	e001      	b.n	8002790 <deBounceInit+0x7c>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	switch (mode)
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 800278c:	2302      	movs	r3, #2
 800278e:	9303      	str	r3, [sp, #12]
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
	}
	switch (port)
 8002790:	2942      	cmp	r1, #66	; 0x42
 8002792:	d007      	beq.n	80027a4 <deBounceInit+0x90>
 8002794:	2943      	cmp	r1, #67	; 0x43
 8002796:	d008      	beq.n	80027aa <deBounceInit+0x96>
 8002798:	2941      	cmp	r1, #65	; 0x41
 800279a:	d10a      	bne.n	80027b2 <deBounceInit+0x9e>
	{
		case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 800279c:	a901      	add	r1, sp, #4
 800279e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a2:	e004      	b.n	80027ae <deBounceInit+0x9a>
		case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 80027a4:	a901      	add	r1, sp, #4
 80027a6:	4807      	ldr	r0, [pc, #28]	; (80027c4 <deBounceInit+0xb0>)
 80027a8:	e001      	b.n	80027ae <deBounceInit+0x9a>
		case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 80027aa:	4807      	ldr	r0, [pc, #28]	; (80027c8 <deBounceInit+0xb4>)
 80027ac:	a901      	add	r1, sp, #4
 80027ae:	f7fd ff93 	bl	80006d8 <HAL_GPIO_Init>
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	a901      	add	r1, sp, #4
 80027b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b8:	f7fd ff8e 	bl	80006d8 <HAL_GPIO_Init>
}
 80027bc:	b007      	add	sp, #28
 80027be:	f85d fb04 	ldr.w	pc, [sp], #4
 80027c2:	bf00      	nop
 80027c4:	48000400 	.word	0x48000400
 80027c8:	48000800 	.word	0x48000800

080027cc <deBounceReadPin>:

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
 80027cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027d0:	4605      	mov	r5, r0
 80027d2:	460f      	mov	r7, r1
 80027d4:	4691      	mov	r9, r2
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
	int8_t pinStateWeAreLookingFor = 0;
	int32_t msTimeStamp = HAL_GetTick();		//get a timeStamp in ms
 80027d6:	f7fd feff 	bl	80005d8 <HAL_GetTick>
 80027da:	4680      	mov	r8, r0

	GPIO_InitTypeDef GPIO_InitStruct;
		/*Configure GPIO pin : */
		switch(pin)
 80027dc:	2d0f      	cmp	r5, #15
 80027de:	d830      	bhi.n	8002842 <deBounceReadPin+0x76>
 80027e0:	e8df f005 	tbb	[pc, r5]
 80027e4:	0e0c0a08 	.word	0x0e0c0a08
 80027e8:	16141210 	.word	0x16141210
 80027ec:	211e1b18 	.word	0x211e1b18
 80027f0:	2d2a2724 	.word	0x2d2a2724
		{
			case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 80027f4:	2401      	movs	r4, #1
 80027f6:	e024      	b.n	8002842 <deBounceReadPin+0x76>
			case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 80027f8:	2402      	movs	r4, #2
 80027fa:	e022      	b.n	8002842 <deBounceReadPin+0x76>
			case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 80027fc:	2404      	movs	r4, #4
 80027fe:	e020      	b.n	8002842 <deBounceReadPin+0x76>
			case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8002800:	2408      	movs	r4, #8
 8002802:	e01e      	b.n	8002842 <deBounceReadPin+0x76>
			case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8002804:	2410      	movs	r4, #16
 8002806:	e01c      	b.n	8002842 <deBounceReadPin+0x76>
			case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8002808:	2420      	movs	r4, #32
 800280a:	e01a      	b.n	8002842 <deBounceReadPin+0x76>
			case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 800280c:	2440      	movs	r4, #64	; 0x40
 800280e:	e018      	b.n	8002842 <deBounceReadPin+0x76>
			case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8002810:	2480      	movs	r4, #128	; 0x80
 8002812:	e016      	b.n	8002842 <deBounceReadPin+0x76>
			case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8002814:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002818:	e013      	b.n	8002842 <deBounceReadPin+0x76>
			case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 800281a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800281e:	e010      	b.n	8002842 <deBounceReadPin+0x76>
			case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8002820:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002824:	e00d      	b.n	8002842 <deBounceReadPin+0x76>
			case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8002826:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800282a:	e00a      	b.n	8002842 <deBounceReadPin+0x76>
			case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 800282c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002830:	e007      	b.n	8002842 <deBounceReadPin+0x76>
			case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8002832:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8002836:	e004      	b.n	8002842 <deBounceReadPin+0x76>
			case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 8002838:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 800283c:	e001      	b.n	8002842 <deBounceReadPin+0x76>
			case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 800283e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
		}


	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	switch (port)
 8002842:	2f42      	cmp	r7, #66	; 0x42
 8002844:	d007      	beq.n	8002856 <deBounceReadPin+0x8a>
 8002846:	2f43      	cmp	r7, #67	; 0x43
 8002848:	d008      	beq.n	800285c <deBounceReadPin+0x90>
 800284a:	2f41      	cmp	r7, #65	; 0x41
 800284c:	d10c      	bne.n	8002868 <deBounceReadPin+0x9c>
	{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 800284e:	b2a1      	uxth	r1, r4
 8002850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002854:	e004      	b.n	8002860 <deBounceReadPin+0x94>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8002856:	b2a1      	uxth	r1, r4
 8002858:	4817      	ldr	r0, [pc, #92]	; (80028b8 <deBounceReadPin+0xec>)
 800285a:	e001      	b.n	8002860 <deBounceReadPin+0x94>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 800285c:	4817      	ldr	r0, [pc, #92]	; (80028bc <deBounceReadPin+0xf0>)
 800285e:	b2a1      	uxth	r1, r4
 8002860:	f7fd fff6 	bl	8000850 <HAL_GPIO_ReadPin>
 8002864:	4605      	mov	r5, r0
	}
	/* is the GPIO pin high or low 	 */
	if(pinState == GPIO_PIN_RESET )		// if low we're looking for more 0's
 8002866:	b910      	cbnz	r0, 800286e <deBounceReadPin+0xa2>
	{
		pinStateWeAreLookingFor = 0;
 8002868:	2600      	movs	r6, #0
 800286a:	4635      	mov	r5, r6
 800286c:	e000      	b.n	8002870 <deBounceReadPin+0xa4>
	}
	else
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
 800286e:	2601      	movs	r6, #1
	{

		switch (port)
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8002870:	b2a4      	uxth	r4, r4
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
	}

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 8002872:	f7fd feb1 	bl	80005d8 <HAL_GetTick>
 8002876:	eb09 0308 	add.w	r3, r9, r8
 800287a:	4298      	cmp	r0, r3
 800287c:	d219      	bcs.n	80028b2 <deBounceReadPin+0xe6>
	{

		switch (port)
 800287e:	2f42      	cmp	r7, #66	; 0x42
 8002880:	d007      	beq.n	8002892 <deBounceReadPin+0xc6>
 8002882:	2f43      	cmp	r7, #67	; 0x43
 8002884:	d008      	beq.n	8002898 <deBounceReadPin+0xcc>
 8002886:	2f41      	cmp	r7, #65	; 0x41
 8002888:	d10b      	bne.n	80028a2 <deBounceReadPin+0xd6>
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 800288a:	4621      	mov	r1, r4
 800288c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002890:	e004      	b.n	800289c <deBounceReadPin+0xd0>
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8002892:	4621      	mov	r1, r4
 8002894:	4808      	ldr	r0, [pc, #32]	; (80028b8 <deBounceReadPin+0xec>)
 8002896:	e001      	b.n	800289c <deBounceReadPin+0xd0>
			case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 8002898:	4808      	ldr	r0, [pc, #32]	; (80028bc <deBounceReadPin+0xf0>)
 800289a:	4621      	mov	r1, r4
 800289c:	f7fd ffd8 	bl	8000850 <HAL_GPIO_ReadPin>
 80028a0:	4605      	mov	r5, r0
		}
		if(pinState != pinStateWeAreLookingFor)
 80028a2:	42b5      	cmp	r5, r6
 80028a4:	d0e5      	beq.n	8002872 <deBounceReadPin+0xa6>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
 80028a6:	f7fd fe97 	bl	80005d8 <HAL_GetTick>
 80028aa:	f086 0601 	eor.w	r6, r6, #1
 80028ae:	4680      	mov	r8, r0
 80028b0:	e7df      	b.n	8002872 <deBounceReadPin+0xa6>
		}
	}
	return (pinStateWeAreLookingFor);
}
 80028b2:	4630      	mov	r0, r6
 80028b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028b8:	48000400 	.word	0x48000400
 80028bc:	48000800 	.word	0x48000800

080028c0 <SystemClock_Config>:
		debitMachineHandleStates();
	} //closing while(1)
} //closing brace for main

/** System Clock Configuration **/
void SystemClock_Config(void) {
 80028c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c2:	b0ad      	sub	sp, #180	; 0xb4

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80028c4:	2300      	movs	r3, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80028c6:	2401      	movs	r4, #1
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c8:	2502      	movs	r5, #2
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80028ca:	2610      	movs	r6, #16
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80028cc:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80028ce:	2707      	movs	r7, #7
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80028d0:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028d2:	a806      	add	r0, sp, #24
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80028d4:	9606      	str	r6, [sp, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80028d6:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80028d8:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028da:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80028dc:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80028de:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 16;
 80028e0:	9613      	str	r6, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80028e2:	9714      	str	r7, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028e4:	9515      	str	r5, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028e6:	9516      	str	r5, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028e8:	f7fe f8dc 	bl	8000aa4 <HAL_RCC_OscConfig>
 80028ec:	b100      	cbz	r0, 80028f0 <SystemClock_Config+0x30>
 80028ee:	e7fe      	b.n	80028ee <SystemClock_Config+0x2e>
		Error_Handler();
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80028f0:	230f      	movs	r3, #15
 80028f2:	9301      	str	r3, [sp, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f4:	2303      	movs	r3, #3
 80028f6:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f8:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028fa:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80028fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002900:	4621      	mov	r1, r4
 8002902:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8002904:	9305      	str	r3, [sp, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002906:	f7fe fb3f 	bl	8000f88 <HAL_RCC_ClockConfig>
 800290a:	b100      	cbz	r0, 800290e <SystemClock_Config+0x4e>
 800290c:	e7fe      	b.n	800290c <SystemClock_Config+0x4c>
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 800290e:	f244 0302 	movw	r3, #16386	; 0x4002
 8002912:	9317      	str	r3, [sp, #92]	; 0x5c
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002918:	9020      	str	r0, [sp, #128]	; 0x80
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800291a:	9329      	str	r3, [sp, #164]	; 0xa4
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800291c:	a817      	add	r0, sp, #92	; 0x5c
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800291e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002922:	9418      	str	r4, [sp, #96]	; 0x60
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002924:	9419      	str	r4, [sp, #100]	; 0x64
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002926:	961a      	str	r6, [sp, #104]	; 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002928:	971b      	str	r7, [sp, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800292a:	951c      	str	r5, [sp, #112]	; 0x70
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800292c:	951d      	str	r5, [sp, #116]	; 0x74
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800292e:	931e      	str	r3, [sp, #120]	; 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002930:	f7fe fcd0 	bl	80012d4 <HAL_RCCEx_PeriphCLKConfig>
 8002934:	b100      	cbz	r0, 8002938 <SystemClock_Config+0x78>
 8002936:	e7fe      	b.n	8002936 <SystemClock_Config+0x76>
		Error_Handler();
	}

	/**Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8002938:	f44f 7000 	mov.w	r0, #512	; 0x200
 800293c:	f7fd ff9c 	bl	8000878 <HAL_PWREx_ControlVoltageScaling>
 8002940:	4604      	mov	r4, r0
 8002942:	b100      	cbz	r0, 8002946 <SystemClock_Config+0x86>
 8002944:	e7fe      	b.n	8002944 <SystemClock_Config+0x84>
		Error_Handler();
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8002946:	f7fe fbd7 	bl	80010f8 <HAL_RCC_GetHCLKFreq>
 800294a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002952:	f7fd fe99 	bl	8000688 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002956:	2004      	movs	r0, #4
 8002958:	f7fd feac 	bl	80006b4 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800295c:	4622      	mov	r2, r4
 800295e:	4621      	mov	r1, r4
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	f7fd fe5c 	bl	8000620 <HAL_NVIC_SetPriority>
}
 8002968:	b02d      	add	sp, #180	; 0xb4
 800296a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800296c <main>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

int main(void) {
 800296c:	b500      	push	{lr}
 800296e:	b099      	sub	sp, #100	; 0x64
	/* MCU Configuration----------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002970:	f7fd fe1e 	bl	80005b0 <HAL_Init>

	/* Configure the system clock------------------------------------------------ */
	SystemClock_Config();
 8002974:	f7ff ffa4 	bl	80028c0 <SystemClock_Config>
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002978:	4b44      	ldr	r3, [pc, #272]	; (8002a8c <main+0x120>)
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800297a:	4845      	ldr	r0, [pc, #276]	; (8002a90 <main+0x124>)
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800297c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800297e:	f042 0204 	orr.w	r2, r2, #4
 8002982:	64da      	str	r2, [r3, #76]	; 0x4c
 8002984:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002986:	f002 0204 	and.w	r2, r2, #4
 800298a:	9200      	str	r2, [sp, #0]
 800298c:	9a00      	ldr	r2, [sp, #0]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800298e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	64da      	str	r2, [r3, #76]	; 0x4c
 8002996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002998:	f002 0201 	and.w	r2, r2, #1
 800299c:	9201      	str	r2, [sp, #4]
 800299e:	9a01      	ldr	r2, [sp, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80029a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029a2:	f042 0202 	orr.w	r2, r2, #2
 80029a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	f003 0302 	and.w	r3, r3, #2
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80029ae:	2200      	movs	r2, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80029b0:	9302      	str	r3, [sp, #8]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80029b2:	2108      	movs	r1, #8
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80029b4:	9b02      	ldr	r3, [sp, #8]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80029b6:	f7fd ff51 	bl	800085c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029ba:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2400      	movs	r4, #0

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029be:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c0:	4833      	ldr	r0, [pc, #204]	; (8002a90 <main+0x124>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	940f      	str	r4, [sp, #60]	; 0x3c
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c4:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c8:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	f7fd fe84 	bl	80006d8 <HAL_GPIO_Init>
}

/* USART2 init function */
static void MX_USART2_UART_Init(void) {

	huart2.Instance = USART2;
 80029d0:	4830      	ldr	r0, [pc, #192]	; (8002a94 <main+0x128>)
	huart2.Init.BaudRate = 9600;
 80029d2:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <main+0x12c>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029d4:	6084      	str	r4, [r0, #8]

/* USART2 init function */
static void MX_USART2_UART_Init(void) {

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
 80029d6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80029da:	e880 000c 	stmia.w	r0, {r2, r3}
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 80029de:	230c      	movs	r3, #12
static void MX_USART2_UART_Init(void) {

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
 80029e0:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80029e2:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80029e4:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e6:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e8:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ea:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ec:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80029ee:	f7ff fb40 	bl	8002072 <HAL_UART_Init>
 80029f2:	b100      	cbz	r0, 80029f6 <main+0x8a>
 80029f4:	e7fe      	b.n	80029f4 <main+0x88>

	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
 80029f6:	4c29      	ldr	r4, [pc, #164]	; (8002a9c <main+0x130>)
 80029f8:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <main+0x134>)
 80029fa:	6023      	str	r3, [r4, #0]
	htim1.Init.Prescaler = 0;
 80029fc:	6060      	str	r0, [r4, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fe:	60a0      	str	r0, [r4, #8]
	htim1.Init.Period = 9090;
 8002a00:	f242 3382 	movw	r3, #9090	; 0x2382
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a04:	6120      	str	r0, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 8002a06:	6160      	str	r0, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002a08:	4620      	mov	r0, r4
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 0;
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 9090;
 8002a0a:	60e3      	str	r3, [r4, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1.Init.RepetitionCounter = 0;
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002a0c:	f7fe fed2 	bl	80017b4 <HAL_TIM_PWM_Init>
 8002a10:	b100      	cbz	r0, 8002a14 <main+0xa8>
 8002a12:	e7fe      	b.n	8002a12 <main+0xa6>
		Error_Handler();
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a14:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a16:	9004      	str	r0, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a18:	9005      	str	r0, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002a1a:	a903      	add	r1, sp, #12
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f7ff f82d 	bl	8001a7c <HAL_TIMEx_MasterConfigSynchronization>
 8002a22:	4605      	mov	r5, r0
 8002a24:	b100      	cbz	r0, 8002a28 <main+0xbc>
 8002a26:	e7fe      	b.n	8002a26 <main+0xba>
			!= HAL_OK) {
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a28:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002a2a:	4601      	mov	r1, r0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a2c:	9306      	str	r3, [sp, #24]
	sConfigOC.Pulse = 4045;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a2e:	9008      	str	r0, [sp, #32]
			!= HAL_OK) {
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 4045;
 8002a30:	f640 73cd 	movw	r3, #4045	; 0xfcd
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a34:	9009      	str	r0, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a36:	900a      	str	r0, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a38:	900b      	str	r0, [sp, #44]	; 0x2c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a3a:	900c      	str	r0, [sp, #48]	; 0x30
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002a3c:	4620      	mov	r0, r4
			!= HAL_OK) {
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 4045;
 8002a3e:	9307      	str	r3, [sp, #28]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	/* adding this as ST Tech Support said PWM should be stopped before
	 * calling HAL_TIM_PWM_ConfigChannel and I've been getting flakey start-up
	 * i.e.: sometime PWM starts up, other times the line remains stuck high.
	 **************************************/
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002a40:	f7fe ffa0 	bl	8001984 <HAL_TIM_PWM_Stop>
	/*************************************/
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002a44:	462a      	mov	r2, r5
 8002a46:	a906      	add	r1, sp, #24
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7fe ff07 	bl	800185c <HAL_TIM_PWM_ConfigChannel>
 8002a4e:	b100      	cbz	r0, 8002a52 <main+0xe6>
 8002a50:	e7fe      	b.n	8002a50 <main+0xe4>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
			!= HAL_OK) {
		Error_Handler();
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a56:	900d      	str	r0, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a58:	900e      	str	r0, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a5a:	900f      	str	r0, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 8002a5c:	9010      	str	r0, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a5e:	9011      	str	r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a60:	9312      	str	r3, [sp, #72]	; 0x48
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002a62:	9013      	str	r0, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a64:	9014      	str	r0, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002a6a:	9016      	str	r0, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a6c:	9017      	str	r0, [sp, #92]	; 0x5c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002a6e:	a90d      	add	r1, sp, #52	; 0x34
 8002a70:	4620      	mov	r0, r4
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a72:	9315      	str	r3, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002a74:	f7ff f824 	bl	8001ac0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a78:	b100      	cbz	r0, 8002a7c <main+0x110>
 8002a7a:	e7fe      	b.n	8002a7a <main+0x10e>
			!= HAL_OK) {
		Error_Handler();
	}

	HAL_TIM_MspPostInit(&htim1);
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f000 f883 	bl	8002b88 <HAL_TIM_MspPostInit>
	MX_GPIO_Init();
	MX_USART2_UART_Init();
	MX_TIM1_Init();

	/* Initialize debitMachine--------------------------------------------------- */
	initDebitMachine();
 8002a82:	f7ff fb28 	bl	80020d6 <initDebitMachine>

	/* Infinite loop */
	while (1) {
		debitMachineHandleStates();
 8002a86:	f7ff fd0b 	bl	80024a0 <debitMachineHandleStates>
 8002a8a:	e7fc      	b.n	8002a86 <main+0x11a>
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	48000400 	.word	0x48000400
 8002a94:	20000148 	.word	0x20000148
 8002a98:	40004400 	.word	0x40004400
 8002a9c:	2000010c 	.word	0x2000010c
 8002aa0:	40012c00 	.word	0x40012c00

08002aa4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void) {
 8002aa4:	e7fe      	b.n	8002aa4 <Error_Handler>
	...

08002aa8 <playNote>:
			!= HAL_OK) {
		Error_Handler();
	}
}

void playNote( uint32_t freq, uint32_t duration){
 8002aa8:	b538      	push	{r3, r4, r5, lr}
	__HAL_TIM_SetAutoreload(&htim1,freq);
 8002aaa:	4c09      	ldr	r4, [pc, #36]	; (8002ad0 <playNote+0x28>)
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	60e0      	str	r0, [r4, #12]
 8002ab0:	62d8      	str	r0, [r3, #44]	; 0x2c
			!= HAL_OK) {
		Error_Handler();
	}
}

void playNote( uint32_t freq, uint32_t duration){
 8002ab2:	460d      	mov	r5, r1
	__HAL_TIM_SetAutoreload(&htim1,freq);
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	f7fe ffa7 	bl	8001a0a <HAL_TIMEx_PWMN_Start>
	HAL_Delay(duration);
 8002abc:	4628      	mov	r0, r5
 8002abe:	f7fd fd91 	bl	80005e4 <HAL_Delay>
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	2100      	movs	r1, #0
}
 8002ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void playNote( uint32_t freq, uint32_t duration){
	__HAL_TIM_SetAutoreload(&htim1,freq);
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
	HAL_Delay(duration);
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 8002aca:	f7fe bfd4 	b.w	8001a76 <HAL_TIMEx_PWMN_Stop>
 8002ace:	bf00      	nop
 8002ad0:	2000010c 	.word	0x2000010c

08002ad4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad6:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	661a      	str	r2, [r3, #96]	; 0x60
 8002ae0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ae2:	f002 0201 	and.w	r2, r2, #1
 8002ae6:	9200      	str	r2, [sp, #0]
 8002ae8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002aec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002af0:	659a      	str	r2, [r3, #88]	; 0x58
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002afa:	2003      	movs	r0, #3
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afc:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002afe:	f7fd fd7d 	bl	80005fc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002b02:	2200      	movs	r2, #0
 8002b04:	4611      	mov	r1, r2
 8002b06:	f06f 000b 	mvn.w	r0, #11
 8002b0a:	f7fd fd89 	bl	8000620 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4611      	mov	r1, r2
 8002b12:	f06f 000a 	mvn.w	r0, #10
 8002b16:	f7fd fd83 	bl	8000620 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	f06f 0009 	mvn.w	r0, #9
 8002b22:	f7fd fd7d 	bl	8000620 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	4611      	mov	r1, r2
 8002b2a:	f06f 0004 	mvn.w	r0, #4
 8002b2e:	f7fd fd77 	bl	8000620 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	4611      	mov	r1, r2
 8002b36:	f06f 0003 	mvn.w	r0, #3
 8002b3a:	f7fd fd71 	bl	8000620 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4611      	mov	r1, r2
 8002b42:	f06f 0001 	mvn.w	r0, #1
 8002b46:	f7fd fd6b 	bl	8000620 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b52:	f7fd fd65 	bl	8000620 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b56:	b003      	add	sp, #12
 8002b58:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8002b60:	6802      	ldr	r2, [r0, #0]
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_TIM_PWM_MspInit+0x24>)
 8002b64:	429a      	cmp	r2, r3
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b66:	b082      	sub	sp, #8

  if(htim_pwm->Instance==TIM1)
 8002b68:	d10a      	bne.n	8002b80 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b6a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002b6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b74:	661a      	str	r2, [r3, #96]	; 0x60
 8002b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b80:	b002      	add	sp, #8
 8002b82:	4770      	bx	lr
 8002b84:	40012c00 	.word	0x40012c00

08002b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8002b8a:	6802      	ldr	r2, [r0, #0]
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_TIM_MspPostInit+0x2c>)
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d10d      	bne.n	8002bae <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM1_MspPostInit 0 */
  
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba0:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ba2:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ba8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	f7fd fd95 	bl	80006d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bae:	b007      	add	sp, #28
 8002bb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bb4:	40012c00 	.word	0x40012c00

08002bb8 <HAL_UART_MspInit>:
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bb8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002bba:	6802      	ldr	r2, [r0, #0]
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <HAL_UART_MspInit+0x5c>)
 8002bbe:	429a      	cmp	r2, r3
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002bc2:	d125      	bne.n	8002c10 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bc4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc8:	2403      	movs	r4, #3
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bcc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002bd0:	659a      	str	r2, [r3, #88]	; 0x58
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd4:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002bde:	2304      	movs	r3, #4
 8002be0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002be4:	2307      	movs	r3, #7
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be6:	2501      	movs	r5, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002be8:	a901      	add	r1, sp, #4
 8002bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bee:	9305      	str	r3, [sp, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bf2:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002bf4:	f7fd fd70 	bl	80006d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfc:	a901      	add	r1, sp, #4
 8002bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c02:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c06:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c08:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002c0a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	f7fd fd64 	bl	80006d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c10:	b006      	add	sp, #24
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
 8002c14:	40004400 	.word	0x40004400

08002c18 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c1a:	f7fd fcd5 	bl	80005c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8002c22:	f7fd bd54 	b.w	80006ce <HAL_SYSTICK_IRQHandler>
	...

08002c28 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002c28:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 8002c2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002c2e:	b085      	sub	sp, #20
 8002c30:	4614      	mov	r4, r2
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 8002c32:	4810      	ldr	r0, [pc, #64]	; (8002c74 <_write+0x4c>)
 8002c34:	b292      	uxth	r2, r2
 8002c36:	f7ff f920 	bl	8001e7a <HAL_UART_Transmit>
	if(result == HAL_ERROR|| result == HAL_BUSY || result == HAL_TIMEOUT )
 8002c3a:	1e42      	subs	r2, r0, #1
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	2a02      	cmp	r2, #2
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	HAL_StatusTypeDef result = HAL_OK;
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 8002c40:	4605      	mov	r5, r0
	if(result == HAL_ERROR|| result == HAL_BUSY || result == HAL_TIMEOUT )
 8002c42:	d813      	bhi.n	8002c6c <_write+0x44>
	{
		char stringBuffer[16] = {0};
 8002c44:	2210      	movs	r2, #16
 8002c46:	2100      	movs	r1, #0
 8002c48:	4668      	mov	r0, sp
 8002c4a:	f000 f90b 	bl	8002e64 <memset>
		HD44780_GotoXY(1,0); //move to second line first position
 8002c4e:	2100      	movs	r1, #0
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7ff fd3d 	bl	80026d0 <HD44780_GotoXY>
		snprintf(stringBuffer,16,"Error: %i",result);
 8002c56:	462b      	mov	r3, r5
 8002c58:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <_write+0x50>)
 8002c5a:	2110      	movs	r1, #16
 8002c5c:	4668      	mov	r0, sp
 8002c5e:	f000 f9f5 	bl	800304c <sniprintf>
		HD44780_PutStr(stringBuffer);
 8002c62:	4668      	mov	r0, sp
 8002c64:	f7ff fd42 	bl	80026ec <HD44780_PutStr>

		Error_Handler();
 8002c68:	f7ff ff1c 	bl	8002aa4 <Error_Handler>
	}
	return len;
}
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	b005      	add	sp, #20
 8002c70:	bd30      	pop	{r4, r5, pc}
 8002c72:	bf00      	nop
 8002c74:	20000148 	.word	0x20000148
 8002c78:	08004cab 	.word	0x08004cab

08002c7c <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <_sbrk+0x14>)
 8002c7e:	6819      	ldr	r1, [r3, #0]
	}
	return len;
}

void * _sbrk(int32_t incr)
{
 8002c80:	4602      	mov	r2, r0
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8002c82:	b909      	cbnz	r1, 8002c88 <_sbrk+0xc>
		heap_end = & end;
 8002c84:	4903      	ldr	r1, [pc, #12]	; (8002c94 <_sbrk+0x18>)
 8002c86:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 8002c88:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 8002c8a:	4402      	add	r2, r0
 8002c8c:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 8002c8e:	4770      	bx	lr
 8002c90:	20000094 	.word	0x20000094
 8002c94:	200001bc 	.word	0x200001bc

08002c98 <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <_close+0xc>)
 8002c9a:	2258      	movs	r2, #88	; 0x58
 8002c9c:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca2:	4770      	bx	lr
 8002ca4:	200001b8 	.word	0x200001b8

08002ca8 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 8002ca8:	4b02      	ldr	r3, [pc, #8]	; (8002cb4 <_fstat+0xc>)
 8002caa:	2258      	movs	r2, #88	; 0x58
 8002cac:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002cae:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb2:	4770      	bx	lr
 8002cb4:	200001b8 	.word	0x200001b8

08002cb8 <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 8002cb8:	4b02      	ldr	r3, [pc, #8]	; (8002cc4 <_isatty+0xc>)
 8002cba:	2258      	movs	r2, #88	; 0x58
 8002cbc:	601a      	str	r2, [r3, #0]
	return 0;
}
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	200001b8 	.word	0x200001b8

08002cc8 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 8002cc8:	4b02      	ldr	r3, [pc, #8]	; (8002cd4 <_lseek+0xc>)
 8002cca:	2258      	movs	r2, #88	; 0x58
 8002ccc:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002cce:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd2:	4770      	bx	lr
 8002cd4:	200001b8 	.word	0x200001b8

08002cd8 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8002cd8:	b508      	push	{r3, lr}
	HAL_UART_Receive(&huart2,ptr,1,HAL_MAX_DELAY);
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <_read+0x14>)
 8002ce2:	f7ff f924 	bl	8001f2e <HAL_UART_Receive>
	return 1;
}
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	bd08      	pop	{r3, pc}
 8002cea:	bf00      	nop
 8002cec:	20000148 	.word	0x20000148

08002cf0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cf0:	490f      	ldr	r1, [pc, #60]	; (8002d30 <SystemInit+0x40>)
 8002cf2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002cf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <SystemInit+0x44>)
 8002d00:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d02:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d04:	f042 0201 	orr.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d0a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002d12:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002d16:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002d18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d1c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d24:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d26:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d2c:	608b      	str	r3, [r1, #8]
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00
 8002d34:	40021000 	.word	0x40021000

08002d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d3e:	e003      	b.n	8002d48 <LoopCopyDataInit>

08002d40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d46:	3104      	adds	r1, #4

08002d48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d48:	480b      	ldr	r0, [pc, #44]	; (8002d78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d50:	d3f6      	bcc.n	8002d40 <CopyDataInit>
	ldr	r2, =_sbss
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d54:	e002      	b.n	8002d5c <LoopFillZerobss>

08002d56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d58:	f842 3b04 	str.w	r3, [r2], #4

08002d5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <LoopForever+0x16>)
	cmp	r2, r3
 8002d5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d60:	d3f9      	bcc.n	8002d56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d62:	f7ff ffc5 	bl	8002cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d66:	f000 f857 	bl	8002e18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d6a:	f7ff fdff 	bl	800296c <main>

08002d6e <LoopForever>:

LoopForever:
    b LoopForever
 8002d6e:	e7fe      	b.n	8002d6e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d70:	2000c000 	.word	0x2000c000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8002d74:	08004ec8 	.word	0x08004ec8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d7c:	2000006c 	.word	0x2000006c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8002d80:	2000006c 	.word	0x2000006c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d84:	200001bc 	.word	0x200001bc

08002d88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC1_IRQHandler>
	...

08002d8c <_fpurge_r>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	460c      	mov	r4, r1
 8002d90:	4606      	mov	r6, r0
 8002d92:	b118      	cbz	r0, 8002d9c <_fpurge_r+0x10>
 8002d94:	6983      	ldr	r3, [r0, #24]
 8002d96:	b90b      	cbnz	r3, 8002d9c <_fpurge_r+0x10>
 8002d98:	f000 fa0e 	bl	80031b8 <__sinit>
 8002d9c:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <_fpurge_r+0x70>)
 8002d9e:	429c      	cmp	r4, r3
 8002da0:	d101      	bne.n	8002da6 <_fpurge_r+0x1a>
 8002da2:	6874      	ldr	r4, [r6, #4]
 8002da4:	e008      	b.n	8002db8 <_fpurge_r+0x2c>
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <_fpurge_r+0x74>)
 8002da8:	429c      	cmp	r4, r3
 8002daa:	d101      	bne.n	8002db0 <_fpurge_r+0x24>
 8002dac:	68b4      	ldr	r4, [r6, #8]
 8002dae:	e003      	b.n	8002db8 <_fpurge_r+0x2c>
 8002db0:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <_fpurge_r+0x78>)
 8002db2:	429c      	cmp	r4, r3
 8002db4:	bf08      	it	eq
 8002db6:	68f4      	ldreq	r4, [r6, #12]
 8002db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002dbc:	b922      	cbnz	r2, 8002dc8 <_fpurge_r+0x3c>
 8002dbe:	2309      	movs	r3, #9
 8002dc0:	6033      	str	r3, [r6, #0]
 8002dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc6:	bd70      	pop	{r4, r5, r6, pc}
 8002dc8:	6923      	ldr	r3, [r4, #16]
 8002dca:	6023      	str	r3, [r4, #0]
 8002dcc:	f002 0308 	and.w	r3, r2, #8
 8002dd0:	b21b      	sxth	r3, r3
 8002dd2:	b96b      	cbnz	r3, 8002df0 <_fpurge_r+0x64>
 8002dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dd6:	6063      	str	r3, [r4, #4]
 8002dd8:	461d      	mov	r5, r3
 8002dda:	b139      	cbz	r1, 8002dec <_fpurge_r+0x60>
 8002ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002de0:	4299      	cmp	r1, r3
 8002de2:	d002      	beq.n	8002dea <_fpurge_r+0x5e>
 8002de4:	4630      	mov	r0, r6
 8002de6:	f000 f845 	bl	8002e74 <_free_r>
 8002dea:	6365      	str	r5, [r4, #52]	; 0x34
 8002dec:	2000      	movs	r0, #0
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
 8002df0:	0793      	lsls	r3, r2, #30
 8002df2:	bf0c      	ite	eq
 8002df4:	6963      	ldreq	r3, [r4, #20]
 8002df6:	2300      	movne	r3, #0
 8002df8:	60a3      	str	r3, [r4, #8]
 8002dfa:	e7f7      	b.n	8002dec <_fpurge_r+0x60>
 8002dfc:	08004d08 	.word	0x08004d08
 8002e00:	08004d28 	.word	0x08004d28
 8002e04:	08004d48 	.word	0x08004d48

08002e08 <fpurge>:
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <fpurge+0xc>)
 8002e0a:	4601      	mov	r1, r0
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	f7ff bfbd 	b.w	8002d8c <_fpurge_r>
 8002e12:	bf00      	nop
 8002e14:	20000064 	.word	0x20000064

08002e18 <__libc_init_array>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <__libc_init_array+0x3c>)
 8002e1c:	4c0e      	ldr	r4, [pc, #56]	; (8002e58 <__libc_init_array+0x40>)
 8002e1e:	1ae4      	subs	r4, r4, r3
 8002e20:	10a4      	asrs	r4, r4, #2
 8002e22:	2500      	movs	r5, #0
 8002e24:	461e      	mov	r6, r3
 8002e26:	42a5      	cmp	r5, r4
 8002e28:	d004      	beq.n	8002e34 <__libc_init_array+0x1c>
 8002e2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e2e:	4798      	blx	r3
 8002e30:	3501      	adds	r5, #1
 8002e32:	e7f8      	b.n	8002e26 <__libc_init_array+0xe>
 8002e34:	f001 fec6 	bl	8004bc4 <_init>
 8002e38:	4c08      	ldr	r4, [pc, #32]	; (8002e5c <__libc_init_array+0x44>)
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <__libc_init_array+0x48>)
 8002e3c:	1ae4      	subs	r4, r4, r3
 8002e3e:	10a4      	asrs	r4, r4, #2
 8002e40:	2500      	movs	r5, #0
 8002e42:	461e      	mov	r6, r3
 8002e44:	42a5      	cmp	r5, r4
 8002e46:	d004      	beq.n	8002e52 <__libc_init_array+0x3a>
 8002e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e4c:	4798      	blx	r3
 8002e4e:	3501      	adds	r5, #1
 8002e50:	e7f8      	b.n	8002e44 <__libc_init_array+0x2c>
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	08004ec0 	.word	0x08004ec0
 8002e58:	08004ec0 	.word	0x08004ec0
 8002e5c:	08004ec4 	.word	0x08004ec4
 8002e60:	08004ec0 	.word	0x08004ec0

08002e64 <memset>:
 8002e64:	4402      	add	r2, r0
 8002e66:	4603      	mov	r3, r0
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d002      	beq.n	8002e72 <memset+0xe>
 8002e6c:	f803 1b01 	strb.w	r1, [r3], #1
 8002e70:	e7fa      	b.n	8002e68 <memset+0x4>
 8002e72:	4770      	bx	lr

08002e74 <_free_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4605      	mov	r5, r0
 8002e78:	2900      	cmp	r1, #0
 8002e7a:	d046      	beq.n	8002f0a <_free_r+0x96>
 8002e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e80:	1f0c      	subs	r4, r1, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bfb8      	it	lt
 8002e86:	18e4      	addlt	r4, r4, r3
 8002e88:	f000 fa3c 	bl	8003304 <__malloc_lock>
 8002e8c:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <_free_r+0x98>)
 8002e8e:	6813      	ldr	r3, [r2, #0]
 8002e90:	4611      	mov	r1, r2
 8002e92:	b913      	cbnz	r3, 8002e9a <_free_r+0x26>
 8002e94:	6063      	str	r3, [r4, #4]
 8002e96:	6014      	str	r4, [r2, #0]
 8002e98:	e032      	b.n	8002f00 <_free_r+0x8c>
 8002e9a:	42a3      	cmp	r3, r4
 8002e9c:	d90e      	bls.n	8002ebc <_free_r+0x48>
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	18a0      	adds	r0, r4, r2
 8002ea2:	4283      	cmp	r3, r0
 8002ea4:	bf04      	itt	eq
 8002ea6:	6818      	ldreq	r0, [r3, #0]
 8002ea8:	685b      	ldreq	r3, [r3, #4]
 8002eaa:	6063      	str	r3, [r4, #4]
 8002eac:	bf04      	itt	eq
 8002eae:	1812      	addeq	r2, r2, r0
 8002eb0:	6022      	streq	r2, [r4, #0]
 8002eb2:	600c      	str	r4, [r1, #0]
 8002eb4:	e024      	b.n	8002f00 <_free_r+0x8c>
 8002eb6:	42a2      	cmp	r2, r4
 8002eb8:	d803      	bhi.n	8002ec2 <_free_r+0x4e>
 8002eba:	4613      	mov	r3, r2
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	2a00      	cmp	r2, #0
 8002ec0:	d1f9      	bne.n	8002eb6 <_free_r+0x42>
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	1819      	adds	r1, r3, r0
 8002ec6:	42a1      	cmp	r1, r4
 8002ec8:	d10b      	bne.n	8002ee2 <_free_r+0x6e>
 8002eca:	6821      	ldr	r1, [r4, #0]
 8002ecc:	4401      	add	r1, r0
 8002ece:	1858      	adds	r0, r3, r1
 8002ed0:	4282      	cmp	r2, r0
 8002ed2:	6019      	str	r1, [r3, #0]
 8002ed4:	d114      	bne.n	8002f00 <_free_r+0x8c>
 8002ed6:	6810      	ldr	r0, [r2, #0]
 8002ed8:	6852      	ldr	r2, [r2, #4]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	4401      	add	r1, r0
 8002ede:	6019      	str	r1, [r3, #0]
 8002ee0:	e00e      	b.n	8002f00 <_free_r+0x8c>
 8002ee2:	d902      	bls.n	8002eea <_free_r+0x76>
 8002ee4:	230c      	movs	r3, #12
 8002ee6:	602b      	str	r3, [r5, #0]
 8002ee8:	e00a      	b.n	8002f00 <_free_r+0x8c>
 8002eea:	6821      	ldr	r1, [r4, #0]
 8002eec:	1860      	adds	r0, r4, r1
 8002eee:	4282      	cmp	r2, r0
 8002ef0:	bf04      	itt	eq
 8002ef2:	6810      	ldreq	r0, [r2, #0]
 8002ef4:	6852      	ldreq	r2, [r2, #4]
 8002ef6:	6062      	str	r2, [r4, #4]
 8002ef8:	bf04      	itt	eq
 8002efa:	1809      	addeq	r1, r1, r0
 8002efc:	6021      	streq	r1, [r4, #0]
 8002efe:	605c      	str	r4, [r3, #4]
 8002f00:	4628      	mov	r0, r5
 8002f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f06:	f000 b9fe 	b.w	8003306 <__malloc_unlock>
 8002f0a:	bd38      	pop	{r3, r4, r5, pc}
 8002f0c:	2000009c 	.word	0x2000009c

08002f10 <_malloc_r>:
 8002f10:	b570      	push	{r4, r5, r6, lr}
 8002f12:	1ccd      	adds	r5, r1, #3
 8002f14:	f025 0503 	bic.w	r5, r5, #3
 8002f18:	3508      	adds	r5, #8
 8002f1a:	2d0c      	cmp	r5, #12
 8002f1c:	bf38      	it	cc
 8002f1e:	250c      	movcc	r5, #12
 8002f20:	2d00      	cmp	r5, #0
 8002f22:	4606      	mov	r6, r0
 8002f24:	db01      	blt.n	8002f2a <_malloc_r+0x1a>
 8002f26:	42a9      	cmp	r1, r5
 8002f28:	d902      	bls.n	8002f30 <_malloc_r+0x20>
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	6033      	str	r3, [r6, #0]
 8002f2e:	e046      	b.n	8002fbe <_malloc_r+0xae>
 8002f30:	f000 f9e8 	bl	8003304 <__malloc_lock>
 8002f34:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <_malloc_r+0xb4>)
 8002f36:	681c      	ldr	r4, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	b1a1      	cbz	r1, 8002f68 <_malloc_r+0x58>
 8002f3e:	680b      	ldr	r3, [r1, #0]
 8002f40:	1b5b      	subs	r3, r3, r5
 8002f42:	d40e      	bmi.n	8002f62 <_malloc_r+0x52>
 8002f44:	2b0b      	cmp	r3, #11
 8002f46:	d903      	bls.n	8002f50 <_malloc_r+0x40>
 8002f48:	600b      	str	r3, [r1, #0]
 8002f4a:	18cc      	adds	r4, r1, r3
 8002f4c:	50cd      	str	r5, [r1, r3]
 8002f4e:	e01e      	b.n	8002f8e <_malloc_r+0x7e>
 8002f50:	428c      	cmp	r4, r1
 8002f52:	bf0d      	iteet	eq
 8002f54:	6863      	ldreq	r3, [r4, #4]
 8002f56:	684b      	ldrne	r3, [r1, #4]
 8002f58:	6063      	strne	r3, [r4, #4]
 8002f5a:	6013      	streq	r3, [r2, #0]
 8002f5c:	bf18      	it	ne
 8002f5e:	460c      	movne	r4, r1
 8002f60:	e015      	b.n	8002f8e <_malloc_r+0x7e>
 8002f62:	460c      	mov	r4, r1
 8002f64:	6849      	ldr	r1, [r1, #4]
 8002f66:	e7e9      	b.n	8002f3c <_malloc_r+0x2c>
 8002f68:	4c17      	ldr	r4, [pc, #92]	; (8002fc8 <_malloc_r+0xb8>)
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	b91b      	cbnz	r3, 8002f76 <_malloc_r+0x66>
 8002f6e:	4630      	mov	r0, r6
 8002f70:	f000 f844 	bl	8002ffc <_sbrk_r>
 8002f74:	6020      	str	r0, [r4, #0]
 8002f76:	4629      	mov	r1, r5
 8002f78:	4630      	mov	r0, r6
 8002f7a:	f000 f83f 	bl	8002ffc <_sbrk_r>
 8002f7e:	1c43      	adds	r3, r0, #1
 8002f80:	d018      	beq.n	8002fb4 <_malloc_r+0xa4>
 8002f82:	1cc4      	adds	r4, r0, #3
 8002f84:	f024 0403 	bic.w	r4, r4, #3
 8002f88:	42a0      	cmp	r0, r4
 8002f8a:	d10d      	bne.n	8002fa8 <_malloc_r+0x98>
 8002f8c:	6025      	str	r5, [r4, #0]
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f000 f9b9 	bl	8003306 <__malloc_unlock>
 8002f94:	f104 000b 	add.w	r0, r4, #11
 8002f98:	1d23      	adds	r3, r4, #4
 8002f9a:	f020 0007 	bic.w	r0, r0, #7
 8002f9e:	1ac3      	subs	r3, r0, r3
 8002fa0:	d00e      	beq.n	8002fc0 <_malloc_r+0xb0>
 8002fa2:	425a      	negs	r2, r3
 8002fa4:	50e2      	str	r2, [r4, r3]
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	1a21      	subs	r1, r4, r0
 8002faa:	4630      	mov	r0, r6
 8002fac:	f000 f826 	bl	8002ffc <_sbrk_r>
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	d1eb      	bne.n	8002f8c <_malloc_r+0x7c>
 8002fb4:	230c      	movs	r3, #12
 8002fb6:	6033      	str	r3, [r6, #0]
 8002fb8:	4630      	mov	r0, r6
 8002fba:	f000 f9a4 	bl	8003306 <__malloc_unlock>
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	bd70      	pop	{r4, r5, r6, pc}
 8002fc2:	bf00      	nop
 8002fc4:	2000009c 	.word	0x2000009c
 8002fc8:	20000098 	.word	0x20000098

08002fcc <iprintf>:
 8002fcc:	b40f      	push	{r0, r1, r2, r3}
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <iprintf+0x2c>)
 8002fd0:	b513      	push	{r0, r1, r4, lr}
 8002fd2:	681c      	ldr	r4, [r3, #0]
 8002fd4:	b124      	cbz	r4, 8002fe0 <iprintf+0x14>
 8002fd6:	69a3      	ldr	r3, [r4, #24]
 8002fd8:	b913      	cbnz	r3, 8002fe0 <iprintf+0x14>
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f000 f8ec 	bl	80031b8 <__sinit>
 8002fe0:	ab05      	add	r3, sp, #20
 8002fe2:	9a04      	ldr	r2, [sp, #16]
 8002fe4:	68a1      	ldr	r1, [r4, #8]
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f000 fb05 	bl	80035f8 <_vfiprintf_r>
 8002fee:	b002      	add	sp, #8
 8002ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff4:	b004      	add	sp, #16
 8002ff6:	4770      	bx	lr
 8002ff8:	20000064 	.word	0x20000064

08002ffc <_sbrk_r>:
 8002ffc:	b538      	push	{r3, r4, r5, lr}
 8002ffe:	4c06      	ldr	r4, [pc, #24]	; (8003018 <_sbrk_r+0x1c>)
 8003000:	2300      	movs	r3, #0
 8003002:	4605      	mov	r5, r0
 8003004:	4608      	mov	r0, r1
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	f7ff fe38 	bl	8002c7c <_sbrk>
 800300c:	1c43      	adds	r3, r0, #1
 800300e:	d102      	bne.n	8003016 <_sbrk_r+0x1a>
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	b103      	cbz	r3, 8003016 <_sbrk_r+0x1a>
 8003014:	602b      	str	r3, [r5, #0]
 8003016:	bd38      	pop	{r3, r4, r5, pc}
 8003018:	200001b8 	.word	0x200001b8

0800301c <iscanf>:
 800301c:	b40f      	push	{r0, r1, r2, r3}
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <iscanf+0x2c>)
 8003020:	b513      	push	{r0, r1, r4, lr}
 8003022:	681c      	ldr	r4, [r3, #0]
 8003024:	b124      	cbz	r4, 8003030 <iscanf+0x14>
 8003026:	69a3      	ldr	r3, [r4, #24]
 8003028:	b913      	cbnz	r3, 8003030 <iscanf+0x14>
 800302a:	4620      	mov	r0, r4
 800302c:	f000 f8c4 	bl	80031b8 <__sinit>
 8003030:	ab05      	add	r3, sp, #20
 8003032:	9a04      	ldr	r2, [sp, #16]
 8003034:	6861      	ldr	r1, [r4, #4]
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	4620      	mov	r0, r4
 800303a:	f000 fee9 	bl	8003e10 <_vfiscanf_r>
 800303e:	b002      	add	sp, #8
 8003040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003044:	b004      	add	sp, #16
 8003046:	4770      	bx	lr
 8003048:	20000064 	.word	0x20000064

0800304c <sniprintf>:
 800304c:	b40c      	push	{r2, r3}
 800304e:	b530      	push	{r4, r5, lr}
 8003050:	4b16      	ldr	r3, [pc, #88]	; (80030ac <sniprintf+0x60>)
 8003052:	1e0c      	subs	r4, r1, #0
 8003054:	b09d      	sub	sp, #116	; 0x74
 8003056:	681d      	ldr	r5, [r3, #0]
 8003058:	da04      	bge.n	8003064 <sniprintf+0x18>
 800305a:	238b      	movs	r3, #139	; 0x8b
 800305c:	602b      	str	r3, [r5, #0]
 800305e:	f04f 30ff 	mov.w	r0, #4294967295
 8003062:	e01e      	b.n	80030a2 <sniprintf+0x56>
 8003064:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003068:	f8ad 3014 	strh.w	r3, [sp, #20]
 800306c:	bf14      	ite	ne
 800306e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003072:	4623      	moveq	r3, r4
 8003074:	9304      	str	r3, [sp, #16]
 8003076:	9307      	str	r3, [sp, #28]
 8003078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800307c:	9002      	str	r0, [sp, #8]
 800307e:	9006      	str	r0, [sp, #24]
 8003080:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003084:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003086:	ab21      	add	r3, sp, #132	; 0x84
 8003088:	a902      	add	r1, sp, #8
 800308a:	4628      	mov	r0, r5
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	f000 f995 	bl	80033bc <_svfiprintf_r>
 8003092:	1c43      	adds	r3, r0, #1
 8003094:	bfbc      	itt	lt
 8003096:	238b      	movlt	r3, #139	; 0x8b
 8003098:	602b      	strlt	r3, [r5, #0]
 800309a:	b114      	cbz	r4, 80030a2 <sniprintf+0x56>
 800309c:	9b02      	ldr	r3, [sp, #8]
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	b01d      	add	sp, #116	; 0x74
 80030a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030a8:	b002      	add	sp, #8
 80030aa:	4770      	bx	lr
 80030ac:	20000064 	.word	0x20000064

080030b0 <strcat>:
 80030b0:	b510      	push	{r4, lr}
 80030b2:	4602      	mov	r2, r0
 80030b4:	4613      	mov	r3, r2
 80030b6:	3201      	adds	r2, #1
 80030b8:	781c      	ldrb	r4, [r3, #0]
 80030ba:	2c00      	cmp	r4, #0
 80030bc:	d1fa      	bne.n	80030b4 <strcat+0x4>
 80030be:	3b01      	subs	r3, #1
 80030c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030c8:	2a00      	cmp	r2, #0
 80030ca:	d1f9      	bne.n	80030c0 <strcat+0x10>
 80030cc:	bd10      	pop	{r4, pc}

080030ce <strcpy>:
 80030ce:	4603      	mov	r3, r0
 80030d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030d4:	f803 2b01 	strb.w	r2, [r3], #1
 80030d8:	2a00      	cmp	r2, #0
 80030da:	d1f9      	bne.n	80030d0 <strcpy+0x2>
 80030dc:	4770      	bx	lr

080030de <strncpy>:
 80030de:	b510      	push	{r4, lr}
 80030e0:	4603      	mov	r3, r0
 80030e2:	b142      	cbz	r2, 80030f6 <strncpy+0x18>
 80030e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030e8:	f803 4b01 	strb.w	r4, [r3], #1
 80030ec:	3a01      	subs	r2, #1
 80030ee:	2c00      	cmp	r4, #0
 80030f0:	d1f7      	bne.n	80030e2 <strncpy+0x4>
 80030f2:	441a      	add	r2, r3
 80030f4:	e000      	b.n	80030f8 <strncpy+0x1a>
 80030f6:	bd10      	pop	{r4, pc}
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d002      	beq.n	8003102 <strncpy+0x24>
 80030fc:	f803 4b01 	strb.w	r4, [r3], #1
 8003100:	e7fa      	b.n	80030f8 <strncpy+0x1a>
 8003102:	bd10      	pop	{r4, pc}

08003104 <strstr>:
 8003104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003106:	7803      	ldrb	r3, [r0, #0]
 8003108:	b963      	cbnz	r3, 8003124 <strstr+0x20>
 800310a:	780b      	ldrb	r3, [r1, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf18      	it	ne
 8003110:	2000      	movne	r0, #0
 8003112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003114:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003118:	b162      	cbz	r2, 8003134 <strstr+0x30>
 800311a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800311e:	4297      	cmp	r7, r2
 8003120:	4630      	mov	r0, r6
 8003122:	d0f7      	beq.n	8003114 <strstr+0x10>
 8003124:	4603      	mov	r3, r0
 8003126:	1c46      	adds	r6, r0, #1
 8003128:	7800      	ldrb	r0, [r0, #0]
 800312a:	b110      	cbz	r0, 8003132 <strstr+0x2e>
 800312c:	1e4d      	subs	r5, r1, #1
 800312e:	1e5c      	subs	r4, r3, #1
 8003130:	e7f0      	b.n	8003114 <strstr+0x10>
 8003132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003134:	4618      	mov	r0, r3
 8003136:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003138 <_cleanup_r>:
 8003138:	4901      	ldr	r1, [pc, #4]	; (8003140 <_cleanup_r+0x8>)
 800313a:	f000 b8c5 	b.w	80032c8 <_fwalk_reent>
 800313e:	bf00      	nop
 8003140:	08004955 	.word	0x08004955

08003144 <std.isra.0>:
 8003144:	2300      	movs	r3, #0
 8003146:	b510      	push	{r4, lr}
 8003148:	4604      	mov	r4, r0
 800314a:	6003      	str	r3, [r0, #0]
 800314c:	6043      	str	r3, [r0, #4]
 800314e:	6083      	str	r3, [r0, #8]
 8003150:	8181      	strh	r1, [r0, #12]
 8003152:	6643      	str	r3, [r0, #100]	; 0x64
 8003154:	81c2      	strh	r2, [r0, #14]
 8003156:	6103      	str	r3, [r0, #16]
 8003158:	6143      	str	r3, [r0, #20]
 800315a:	6183      	str	r3, [r0, #24]
 800315c:	4619      	mov	r1, r3
 800315e:	2208      	movs	r2, #8
 8003160:	305c      	adds	r0, #92	; 0x5c
 8003162:	f7ff fe7f 	bl	8002e64 <memset>
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <std.isra.0+0x38>)
 8003168:	6263      	str	r3, [r4, #36]	; 0x24
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <std.isra.0+0x3c>)
 800316c:	62a3      	str	r3, [r4, #40]	; 0x28
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <std.isra.0+0x40>)
 8003170:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <std.isra.0+0x44>)
 8003174:	6224      	str	r4, [r4, #32]
 8003176:	6323      	str	r3, [r4, #48]	; 0x30
 8003178:	bd10      	pop	{r4, pc}
 800317a:	bf00      	nop
 800317c:	08004293 	.word	0x08004293
 8003180:	080042b5 	.word	0x080042b5
 8003184:	080042ed 	.word	0x080042ed
 8003188:	08004311 	.word	0x08004311

0800318c <__sfmoreglue>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	2368      	movs	r3, #104	; 0x68
 8003190:	1e4d      	subs	r5, r1, #1
 8003192:	435d      	muls	r5, r3
 8003194:	460e      	mov	r6, r1
 8003196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800319a:	f7ff feb9 	bl	8002f10 <_malloc_r>
 800319e:	4604      	mov	r4, r0
 80031a0:	b140      	cbz	r0, 80031b4 <__sfmoreglue+0x28>
 80031a2:	2100      	movs	r1, #0
 80031a4:	e880 0042 	stmia.w	r0, {r1, r6}
 80031a8:	300c      	adds	r0, #12
 80031aa:	60a0      	str	r0, [r4, #8]
 80031ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031b0:	f7ff fe58 	bl	8002e64 <memset>
 80031b4:	4620      	mov	r0, r4
 80031b6:	bd70      	pop	{r4, r5, r6, pc}

080031b8 <__sinit>:
 80031b8:	6983      	ldr	r3, [r0, #24]
 80031ba:	b510      	push	{r4, lr}
 80031bc:	4604      	mov	r4, r0
 80031be:	bb33      	cbnz	r3, 800320e <__sinit+0x56>
 80031c0:	6483      	str	r3, [r0, #72]	; 0x48
 80031c2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80031c4:	6503      	str	r3, [r0, #80]	; 0x50
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <__sinit+0x58>)
 80031c8:	4a12      	ldr	r2, [pc, #72]	; (8003214 <__sinit+0x5c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6282      	str	r2, [r0, #40]	; 0x28
 80031ce:	4298      	cmp	r0, r3
 80031d0:	bf04      	itt	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	6183      	streq	r3, [r0, #24]
 80031d6:	f000 f81f 	bl	8003218 <__sfp>
 80031da:	6060      	str	r0, [r4, #4]
 80031dc:	4620      	mov	r0, r4
 80031de:	f000 f81b 	bl	8003218 <__sfp>
 80031e2:	60a0      	str	r0, [r4, #8]
 80031e4:	4620      	mov	r0, r4
 80031e6:	f000 f817 	bl	8003218 <__sfp>
 80031ea:	2200      	movs	r2, #0
 80031ec:	60e0      	str	r0, [r4, #12]
 80031ee:	2104      	movs	r1, #4
 80031f0:	6860      	ldr	r0, [r4, #4]
 80031f2:	f7ff ffa7 	bl	8003144 <std.isra.0>
 80031f6:	2201      	movs	r2, #1
 80031f8:	2109      	movs	r1, #9
 80031fa:	68a0      	ldr	r0, [r4, #8]
 80031fc:	f7ff ffa2 	bl	8003144 <std.isra.0>
 8003200:	2202      	movs	r2, #2
 8003202:	2112      	movs	r1, #18
 8003204:	68e0      	ldr	r0, [r4, #12]
 8003206:	f7ff ff9d 	bl	8003144 <std.isra.0>
 800320a:	2301      	movs	r3, #1
 800320c:	61a3      	str	r3, [r4, #24]
 800320e:	bd10      	pop	{r4, pc}
 8003210:	08004d04 	.word	0x08004d04
 8003214:	08003139 	.word	0x08003139

08003218 <__sfp>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	4b1c      	ldr	r3, [pc, #112]	; (800328c <__sfp+0x74>)
 800321c:	681e      	ldr	r6, [r3, #0]
 800321e:	69b3      	ldr	r3, [r6, #24]
 8003220:	4607      	mov	r7, r0
 8003222:	b913      	cbnz	r3, 800322a <__sfp+0x12>
 8003224:	4630      	mov	r0, r6
 8003226:	f7ff ffc7 	bl	80031b8 <__sinit>
 800322a:	3648      	adds	r6, #72	; 0x48
 800322c:	68b4      	ldr	r4, [r6, #8]
 800322e:	6873      	ldr	r3, [r6, #4]
 8003230:	3b01      	subs	r3, #1
 8003232:	d404      	bmi.n	800323e <__sfp+0x26>
 8003234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003238:	b17d      	cbz	r5, 800325a <__sfp+0x42>
 800323a:	3468      	adds	r4, #104	; 0x68
 800323c:	e7f8      	b.n	8003230 <__sfp+0x18>
 800323e:	6833      	ldr	r3, [r6, #0]
 8003240:	b10b      	cbz	r3, 8003246 <__sfp+0x2e>
 8003242:	6836      	ldr	r6, [r6, #0]
 8003244:	e7f2      	b.n	800322c <__sfp+0x14>
 8003246:	2104      	movs	r1, #4
 8003248:	4638      	mov	r0, r7
 800324a:	f7ff ff9f 	bl	800318c <__sfmoreglue>
 800324e:	6030      	str	r0, [r6, #0]
 8003250:	2800      	cmp	r0, #0
 8003252:	d1f6      	bne.n	8003242 <__sfp+0x2a>
 8003254:	230c      	movs	r3, #12
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800325a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800325e:	81e3      	strh	r3, [r4, #14]
 8003260:	2301      	movs	r3, #1
 8003262:	81a3      	strh	r3, [r4, #12]
 8003264:	6665      	str	r5, [r4, #100]	; 0x64
 8003266:	6025      	str	r5, [r4, #0]
 8003268:	60a5      	str	r5, [r4, #8]
 800326a:	6065      	str	r5, [r4, #4]
 800326c:	6125      	str	r5, [r4, #16]
 800326e:	6165      	str	r5, [r4, #20]
 8003270:	61a5      	str	r5, [r4, #24]
 8003272:	2208      	movs	r2, #8
 8003274:	4629      	mov	r1, r5
 8003276:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800327a:	f7ff fdf3 	bl	8002e64 <memset>
 800327e:	6365      	str	r5, [r4, #52]	; 0x34
 8003280:	63a5      	str	r5, [r4, #56]	; 0x38
 8003282:	64a5      	str	r5, [r4, #72]	; 0x48
 8003284:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003286:	4620      	mov	r0, r4
 8003288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800328a:	bf00      	nop
 800328c:	08004d04 	.word	0x08004d04

08003290 <_fwalk>:
 8003290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003294:	4688      	mov	r8, r1
 8003296:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800329a:	2600      	movs	r6, #0
 800329c:	b18c      	cbz	r4, 80032c2 <_fwalk+0x32>
 800329e:	68a5      	ldr	r5, [r4, #8]
 80032a0:	6867      	ldr	r7, [r4, #4]
 80032a2:	3f01      	subs	r7, #1
 80032a4:	d40b      	bmi.n	80032be <_fwalk+0x2e>
 80032a6:	89ab      	ldrh	r3, [r5, #12]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d906      	bls.n	80032ba <_fwalk+0x2a>
 80032ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032b0:	3301      	adds	r3, #1
 80032b2:	d002      	beq.n	80032ba <_fwalk+0x2a>
 80032b4:	4628      	mov	r0, r5
 80032b6:	47c0      	blx	r8
 80032b8:	4306      	orrs	r6, r0
 80032ba:	3568      	adds	r5, #104	; 0x68
 80032bc:	e7f1      	b.n	80032a2 <_fwalk+0x12>
 80032be:	6824      	ldr	r4, [r4, #0]
 80032c0:	e7ec      	b.n	800329c <_fwalk+0xc>
 80032c2:	4630      	mov	r0, r6
 80032c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080032c8 <_fwalk_reent>:
 80032c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032cc:	4680      	mov	r8, r0
 80032ce:	4689      	mov	r9, r1
 80032d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032d4:	2600      	movs	r6, #0
 80032d6:	b194      	cbz	r4, 80032fe <_fwalk_reent+0x36>
 80032d8:	68a5      	ldr	r5, [r4, #8]
 80032da:	6867      	ldr	r7, [r4, #4]
 80032dc:	3f01      	subs	r7, #1
 80032de:	d40c      	bmi.n	80032fa <_fwalk_reent+0x32>
 80032e0:	89ab      	ldrh	r3, [r5, #12]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d907      	bls.n	80032f6 <_fwalk_reent+0x2e>
 80032e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032ea:	3301      	adds	r3, #1
 80032ec:	d003      	beq.n	80032f6 <_fwalk_reent+0x2e>
 80032ee:	4629      	mov	r1, r5
 80032f0:	4640      	mov	r0, r8
 80032f2:	47c8      	blx	r9
 80032f4:	4306      	orrs	r6, r0
 80032f6:	3568      	adds	r5, #104	; 0x68
 80032f8:	e7f0      	b.n	80032dc <_fwalk_reent+0x14>
 80032fa:	6824      	ldr	r4, [r4, #0]
 80032fc:	e7eb      	b.n	80032d6 <_fwalk_reent+0xe>
 80032fe:	4630      	mov	r0, r6
 8003300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003304 <__malloc_lock>:
 8003304:	4770      	bx	lr

08003306 <__malloc_unlock>:
 8003306:	4770      	bx	lr

08003308 <__ssputs_r>:
 8003308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800330c:	688e      	ldr	r6, [r1, #8]
 800330e:	429e      	cmp	r6, r3
 8003310:	4682      	mov	sl, r0
 8003312:	460c      	mov	r4, r1
 8003314:	4691      	mov	r9, r2
 8003316:	4698      	mov	r8, r3
 8003318:	d83e      	bhi.n	8003398 <__ssputs_r+0x90>
 800331a:	898a      	ldrh	r2, [r1, #12]
 800331c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003320:	d03a      	beq.n	8003398 <__ssputs_r+0x90>
 8003322:	6825      	ldr	r5, [r4, #0]
 8003324:	6909      	ldr	r1, [r1, #16]
 8003326:	1a6f      	subs	r7, r5, r1
 8003328:	6965      	ldr	r5, [r4, #20]
 800332a:	2302      	movs	r3, #2
 800332c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003330:	fb95 f5f3 	sdiv	r5, r5, r3
 8003334:	1c7b      	adds	r3, r7, #1
 8003336:	4443      	add	r3, r8
 8003338:	429d      	cmp	r5, r3
 800333a:	bf38      	it	cc
 800333c:	461d      	movcc	r5, r3
 800333e:	0553      	lsls	r3, r2, #21
 8003340:	d50f      	bpl.n	8003362 <__ssputs_r+0x5a>
 8003342:	4629      	mov	r1, r5
 8003344:	f7ff fde4 	bl	8002f10 <_malloc_r>
 8003348:	4606      	mov	r6, r0
 800334a:	b198      	cbz	r0, 8003374 <__ssputs_r+0x6c>
 800334c:	463a      	mov	r2, r7
 800334e:	6921      	ldr	r1, [r4, #16]
 8003350:	f001 fbae 	bl	8004ab0 <memcpy>
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335e:	81a3      	strh	r3, [r4, #12]
 8003360:	e013      	b.n	800338a <__ssputs_r+0x82>
 8003362:	462a      	mov	r2, r5
 8003364:	f001 fbca 	bl	8004afc <_realloc_r>
 8003368:	4606      	mov	r6, r0
 800336a:	b970      	cbnz	r0, 800338a <__ssputs_r+0x82>
 800336c:	6921      	ldr	r1, [r4, #16]
 800336e:	4650      	mov	r0, sl
 8003370:	f7ff fd80 	bl	8002e74 <_free_r>
 8003374:	230c      	movs	r3, #12
 8003376:	f8ca 3000 	str.w	r3, [sl]
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003380:	81a3      	strh	r3, [r4, #12]
 8003382:	f04f 30ff 	mov.w	r0, #4294967295
 8003386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800338a:	6126      	str	r6, [r4, #16]
 800338c:	6165      	str	r5, [r4, #20]
 800338e:	443e      	add	r6, r7
 8003390:	1bed      	subs	r5, r5, r7
 8003392:	6026      	str	r6, [r4, #0]
 8003394:	60a5      	str	r5, [r4, #8]
 8003396:	4646      	mov	r6, r8
 8003398:	4546      	cmp	r6, r8
 800339a:	bf28      	it	cs
 800339c:	4646      	movcs	r6, r8
 800339e:	4632      	mov	r2, r6
 80033a0:	4649      	mov	r1, r9
 80033a2:	6820      	ldr	r0, [r4, #0]
 80033a4:	f001 fb8f 	bl	8004ac6 <memmove>
 80033a8:	68a3      	ldr	r3, [r4, #8]
 80033aa:	1b9b      	subs	r3, r3, r6
 80033ac:	60a3      	str	r3, [r4, #8]
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	441e      	add	r6, r3
 80033b2:	6026      	str	r6, [r4, #0]
 80033b4:	2000      	movs	r0, #0
 80033b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080033bc <_svfiprintf_r>:
 80033bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c0:	b09d      	sub	sp, #116	; 0x74
 80033c2:	4680      	mov	r8, r0
 80033c4:	9303      	str	r3, [sp, #12]
 80033c6:	898b      	ldrh	r3, [r1, #12]
 80033c8:	061c      	lsls	r4, r3, #24
 80033ca:	460d      	mov	r5, r1
 80033cc:	4616      	mov	r6, r2
 80033ce:	d50d      	bpl.n	80033ec <_svfiprintf_r+0x30>
 80033d0:	690b      	ldr	r3, [r1, #16]
 80033d2:	b95b      	cbnz	r3, 80033ec <_svfiprintf_r+0x30>
 80033d4:	2140      	movs	r1, #64	; 0x40
 80033d6:	f7ff fd9b 	bl	8002f10 <_malloc_r>
 80033da:	6028      	str	r0, [r5, #0]
 80033dc:	6128      	str	r0, [r5, #16]
 80033de:	b918      	cbnz	r0, 80033e8 <_svfiprintf_r+0x2c>
 80033e0:	230c      	movs	r3, #12
 80033e2:	f8c8 3000 	str.w	r3, [r8]
 80033e6:	e0cd      	b.n	8003584 <_svfiprintf_r+0x1c8>
 80033e8:	2340      	movs	r3, #64	; 0x40
 80033ea:	616b      	str	r3, [r5, #20]
 80033ec:	2300      	movs	r3, #0
 80033ee:	9309      	str	r3, [sp, #36]	; 0x24
 80033f0:	2320      	movs	r3, #32
 80033f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033f6:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8003594 <_svfiprintf_r+0x1d8>
 80033fa:	2330      	movs	r3, #48	; 0x30
 80033fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003400:	4637      	mov	r7, r6
 8003402:	463c      	mov	r4, r7
 8003404:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003408:	b91b      	cbnz	r3, 8003412 <_svfiprintf_r+0x56>
 800340a:	ebb7 0906 	subs.w	r9, r7, r6
 800340e:	d010      	beq.n	8003432 <_svfiprintf_r+0x76>
 8003410:	e003      	b.n	800341a <_svfiprintf_r+0x5e>
 8003412:	2b25      	cmp	r3, #37	; 0x25
 8003414:	d0f9      	beq.n	800340a <_svfiprintf_r+0x4e>
 8003416:	4627      	mov	r7, r4
 8003418:	e7f3      	b.n	8003402 <_svfiprintf_r+0x46>
 800341a:	464b      	mov	r3, r9
 800341c:	4632      	mov	r2, r6
 800341e:	4629      	mov	r1, r5
 8003420:	4640      	mov	r0, r8
 8003422:	f7ff ff71 	bl	8003308 <__ssputs_r>
 8003426:	3001      	adds	r0, #1
 8003428:	f000 80a7 	beq.w	800357a <_svfiprintf_r+0x1be>
 800342c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800342e:	444b      	add	r3, r9
 8003430:	9309      	str	r3, [sp, #36]	; 0x24
 8003432:	783b      	ldrb	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a0 	beq.w	800357a <_svfiprintf_r+0x1be>
 800343a:	2300      	movs	r3, #0
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	9304      	str	r3, [sp, #16]
 8003442:	9307      	str	r3, [sp, #28]
 8003444:	9205      	str	r2, [sp, #20]
 8003446:	9306      	str	r3, [sp, #24]
 8003448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800344c:	931a      	str	r3, [sp, #104]	; 0x68
 800344e:	2601      	movs	r6, #1
 8003450:	2205      	movs	r2, #5
 8003452:	7821      	ldrb	r1, [r4, #0]
 8003454:	484e      	ldr	r0, [pc, #312]	; (8003590 <_svfiprintf_r+0x1d4>)
 8003456:	f7fc febb 	bl	80001d0 <memchr>
 800345a:	1c67      	adds	r7, r4, #1
 800345c:	9b04      	ldr	r3, [sp, #16]
 800345e:	b138      	cbz	r0, 8003470 <_svfiprintf_r+0xb4>
 8003460:	4a4b      	ldr	r2, [pc, #300]	; (8003590 <_svfiprintf_r+0x1d4>)
 8003462:	1a80      	subs	r0, r0, r2
 8003464:	fa06 f000 	lsl.w	r0, r6, r0
 8003468:	4318      	orrs	r0, r3
 800346a:	9004      	str	r0, [sp, #16]
 800346c:	463c      	mov	r4, r7
 800346e:	e7ef      	b.n	8003450 <_svfiprintf_r+0x94>
 8003470:	06d9      	lsls	r1, r3, #27
 8003472:	bf44      	itt	mi
 8003474:	2220      	movmi	r2, #32
 8003476:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800347a:	071a      	lsls	r2, r3, #28
 800347c:	bf44      	itt	mi
 800347e:	222b      	movmi	r2, #43	; 0x2b
 8003480:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003484:	7822      	ldrb	r2, [r4, #0]
 8003486:	2a2a      	cmp	r2, #42	; 0x2a
 8003488:	d003      	beq.n	8003492 <_svfiprintf_r+0xd6>
 800348a:	9a07      	ldr	r2, [sp, #28]
 800348c:	2100      	movs	r1, #0
 800348e:	200a      	movs	r0, #10
 8003490:	e00b      	b.n	80034aa <_svfiprintf_r+0xee>
 8003492:	9a03      	ldr	r2, [sp, #12]
 8003494:	1d11      	adds	r1, r2, #4
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	9103      	str	r1, [sp, #12]
 800349a:	2a00      	cmp	r2, #0
 800349c:	da10      	bge.n	80034c0 <_svfiprintf_r+0x104>
 800349e:	4252      	negs	r2, r2
 80034a0:	f043 0002 	orr.w	r0, r3, #2
 80034a4:	9207      	str	r2, [sp, #28]
 80034a6:	9004      	str	r0, [sp, #16]
 80034a8:	e00b      	b.n	80034c2 <_svfiprintf_r+0x106>
 80034aa:	4627      	mov	r7, r4
 80034ac:	3401      	adds	r4, #1
 80034ae:	783b      	ldrb	r3, [r7, #0]
 80034b0:	3b30      	subs	r3, #48	; 0x30
 80034b2:	2b09      	cmp	r3, #9
 80034b4:	d803      	bhi.n	80034be <_svfiprintf_r+0x102>
 80034b6:	fb00 3202 	mla	r2, r0, r2, r3
 80034ba:	2101      	movs	r1, #1
 80034bc:	e7f5      	b.n	80034aa <_svfiprintf_r+0xee>
 80034be:	b101      	cbz	r1, 80034c2 <_svfiprintf_r+0x106>
 80034c0:	9207      	str	r2, [sp, #28]
 80034c2:	783b      	ldrb	r3, [r7, #0]
 80034c4:	2b2e      	cmp	r3, #46	; 0x2e
 80034c6:	d11e      	bne.n	8003506 <_svfiprintf_r+0x14a>
 80034c8:	787b      	ldrb	r3, [r7, #1]
 80034ca:	2b2a      	cmp	r3, #42	; 0x2a
 80034cc:	d10a      	bne.n	80034e4 <_svfiprintf_r+0x128>
 80034ce:	9b03      	ldr	r3, [sp, #12]
 80034d0:	1d1a      	adds	r2, r3, #4
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	9203      	str	r2, [sp, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bfb8      	it	lt
 80034da:	f04f 33ff 	movlt.w	r3, #4294967295
 80034de:	3702      	adds	r7, #2
 80034e0:	9305      	str	r3, [sp, #20]
 80034e2:	e010      	b.n	8003506 <_svfiprintf_r+0x14a>
 80034e4:	2300      	movs	r3, #0
 80034e6:	9305      	str	r3, [sp, #20]
 80034e8:	1c78      	adds	r0, r7, #1
 80034ea:	4619      	mov	r1, r3
 80034ec:	240a      	movs	r4, #10
 80034ee:	4607      	mov	r7, r0
 80034f0:	3001      	adds	r0, #1
 80034f2:	783a      	ldrb	r2, [r7, #0]
 80034f4:	3a30      	subs	r2, #48	; 0x30
 80034f6:	2a09      	cmp	r2, #9
 80034f8:	d803      	bhi.n	8003502 <_svfiprintf_r+0x146>
 80034fa:	fb04 2101 	mla	r1, r4, r1, r2
 80034fe:	2301      	movs	r3, #1
 8003500:	e7f5      	b.n	80034ee <_svfiprintf_r+0x132>
 8003502:	b103      	cbz	r3, 8003506 <_svfiprintf_r+0x14a>
 8003504:	9105      	str	r1, [sp, #20]
 8003506:	2203      	movs	r2, #3
 8003508:	7839      	ldrb	r1, [r7, #0]
 800350a:	4822      	ldr	r0, [pc, #136]	; (8003594 <_svfiprintf_r+0x1d8>)
 800350c:	f7fc fe60 	bl	80001d0 <memchr>
 8003510:	b140      	cbz	r0, 8003524 <_svfiprintf_r+0x168>
 8003512:	2340      	movs	r3, #64	; 0x40
 8003514:	ebcb 0000 	rsb	r0, fp, r0
 8003518:	fa03 f000 	lsl.w	r0, r3, r0
 800351c:	9b04      	ldr	r3, [sp, #16]
 800351e:	4318      	orrs	r0, r3
 8003520:	9004      	str	r0, [sp, #16]
 8003522:	3701      	adds	r7, #1
 8003524:	7839      	ldrb	r1, [r7, #0]
 8003526:	481c      	ldr	r0, [pc, #112]	; (8003598 <_svfiprintf_r+0x1dc>)
 8003528:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800352c:	2206      	movs	r2, #6
 800352e:	1c7e      	adds	r6, r7, #1
 8003530:	f7fc fe4e 	bl	80001d0 <memchr>
 8003534:	b188      	cbz	r0, 800355a <_svfiprintf_r+0x19e>
 8003536:	4b19      	ldr	r3, [pc, #100]	; (800359c <_svfiprintf_r+0x1e0>)
 8003538:	b933      	cbnz	r3, 8003548 <_svfiprintf_r+0x18c>
 800353a:	9b03      	ldr	r3, [sp, #12]
 800353c:	3307      	adds	r3, #7
 800353e:	f023 0307 	bic.w	r3, r3, #7
 8003542:	3308      	adds	r3, #8
 8003544:	9303      	str	r3, [sp, #12]
 8003546:	e014      	b.n	8003572 <_svfiprintf_r+0x1b6>
 8003548:	ab03      	add	r3, sp, #12
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	462a      	mov	r2, r5
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <_svfiprintf_r+0x1e4>)
 8003550:	a904      	add	r1, sp, #16
 8003552:	4640      	mov	r0, r8
 8003554:	f3af 8000 	nop.w
 8003558:	e007      	b.n	800356a <_svfiprintf_r+0x1ae>
 800355a:	ab03      	add	r3, sp, #12
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	462a      	mov	r2, r5
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <_svfiprintf_r+0x1e4>)
 8003562:	a904      	add	r1, sp, #16
 8003564:	4640      	mov	r0, r8
 8003566:	f000 f9d9 	bl	800391c <_printf_i>
 800356a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800356e:	4682      	mov	sl, r0
 8003570:	d003      	beq.n	800357a <_svfiprintf_r+0x1be>
 8003572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003574:	4453      	add	r3, sl
 8003576:	9309      	str	r3, [sp, #36]	; 0x24
 8003578:	e742      	b.n	8003400 <_svfiprintf_r+0x44>
 800357a:	89ab      	ldrh	r3, [r5, #12]
 800357c:	065b      	lsls	r3, r3, #25
 800357e:	d401      	bmi.n	8003584 <_svfiprintf_r+0x1c8>
 8003580:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003582:	e001      	b.n	8003588 <_svfiprintf_r+0x1cc>
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	b01d      	add	sp, #116	; 0x74
 800358a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800358e:	bf00      	nop
 8003590:	08004d68 	.word	0x08004d68
 8003594:	08004d6e 	.word	0x08004d6e
 8003598:	08004d72 	.word	0x08004d72
 800359c:	00000000 	.word	0x00000000
 80035a0:	08003309 	.word	0x08003309

080035a4 <__sfputc_r>:
 80035a4:	6893      	ldr	r3, [r2, #8]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	b410      	push	{r4}
 80035ac:	6093      	str	r3, [r2, #8]
 80035ae:	da09      	bge.n	80035c4 <__sfputc_r+0x20>
 80035b0:	6994      	ldr	r4, [r2, #24]
 80035b2:	42a3      	cmp	r3, r4
 80035b4:	db02      	blt.n	80035bc <__sfputc_r+0x18>
 80035b6:	b2cb      	uxtb	r3, r1
 80035b8:	2b0a      	cmp	r3, #10
 80035ba:	d103      	bne.n	80035c4 <__sfputc_r+0x20>
 80035bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035c0:	f001 b85c 	b.w	800467c <__swbuf_r>
 80035c4:	6813      	ldr	r3, [r2, #0]
 80035c6:	1c58      	adds	r0, r3, #1
 80035c8:	6010      	str	r0, [r2, #0]
 80035ca:	7019      	strb	r1, [r3, #0]
 80035cc:	b2c8      	uxtb	r0, r1
 80035ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <__sfputs_r>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	4606      	mov	r6, r0
 80035d8:	460f      	mov	r7, r1
 80035da:	4614      	mov	r4, r2
 80035dc:	18d5      	adds	r5, r2, r3
 80035de:	42ac      	cmp	r4, r5
 80035e0:	d008      	beq.n	80035f4 <__sfputs_r+0x20>
 80035e2:	463a      	mov	r2, r7
 80035e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e8:	4630      	mov	r0, r6
 80035ea:	f7ff ffdb 	bl	80035a4 <__sfputc_r>
 80035ee:	1c43      	adds	r3, r0, #1
 80035f0:	d1f5      	bne.n	80035de <__sfputs_r+0xa>
 80035f2:	e000      	b.n	80035f6 <__sfputs_r+0x22>
 80035f4:	2000      	movs	r0, #0
 80035f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035f8 <_vfiprintf_r>:
 80035f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035fc:	b09d      	sub	sp, #116	; 0x74
 80035fe:	460c      	mov	r4, r1
 8003600:	4617      	mov	r7, r2
 8003602:	9303      	str	r3, [sp, #12]
 8003604:	4606      	mov	r6, r0
 8003606:	b118      	cbz	r0, 8003610 <_vfiprintf_r+0x18>
 8003608:	6983      	ldr	r3, [r0, #24]
 800360a:	b90b      	cbnz	r3, 8003610 <_vfiprintf_r+0x18>
 800360c:	f7ff fdd4 	bl	80031b8 <__sinit>
 8003610:	4b7f      	ldr	r3, [pc, #508]	; (8003810 <_vfiprintf_r+0x218>)
 8003612:	429c      	cmp	r4, r3
 8003614:	d101      	bne.n	800361a <_vfiprintf_r+0x22>
 8003616:	6874      	ldr	r4, [r6, #4]
 8003618:	e008      	b.n	800362c <_vfiprintf_r+0x34>
 800361a:	4b7e      	ldr	r3, [pc, #504]	; (8003814 <_vfiprintf_r+0x21c>)
 800361c:	429c      	cmp	r4, r3
 800361e:	d101      	bne.n	8003624 <_vfiprintf_r+0x2c>
 8003620:	68b4      	ldr	r4, [r6, #8]
 8003622:	e003      	b.n	800362c <_vfiprintf_r+0x34>
 8003624:	4b7c      	ldr	r3, [pc, #496]	; (8003818 <_vfiprintf_r+0x220>)
 8003626:	429c      	cmp	r4, r3
 8003628:	bf08      	it	eq
 800362a:	68f4      	ldreq	r4, [r6, #12]
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	0718      	lsls	r0, r3, #28
 8003630:	d50c      	bpl.n	800364c <_vfiprintf_r+0x54>
 8003632:	6923      	ldr	r3, [r4, #16]
 8003634:	b153      	cbz	r3, 800364c <_vfiprintf_r+0x54>
 8003636:	2300      	movs	r3, #0
 8003638:	9309      	str	r3, [sp, #36]	; 0x24
 800363a:	2320      	movs	r3, #32
 800363c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003640:	2330      	movs	r3, #48	; 0x30
 8003642:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003646:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 800381c <_vfiprintf_r+0x224>
 800364a:	e044      	b.n	80036d6 <_vfiprintf_r+0xde>
 800364c:	4621      	mov	r1, r4
 800364e:	4630      	mov	r0, r6
 8003650:	f001 f87a 	bl	8004748 <__swsetup_r>
 8003654:	2800      	cmp	r0, #0
 8003656:	d0ee      	beq.n	8003636 <_vfiprintf_r+0x3e>
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	e0d5      	b.n	800380a <_vfiprintf_r+0x212>
 800365e:	9a03      	ldr	r2, [sp, #12]
 8003660:	1d11      	adds	r1, r2, #4
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	9103      	str	r1, [sp, #12]
 8003666:	2a00      	cmp	r2, #0
 8003668:	f280 808c 	bge.w	8003784 <_vfiprintf_r+0x18c>
 800366c:	4252      	negs	r2, r2
 800366e:	f043 0002 	orr.w	r0, r3, #2
 8003672:	9207      	str	r2, [sp, #28]
 8003674:	9004      	str	r0, [sp, #16]
 8003676:	f898 3000 	ldrb.w	r3, [r8]
 800367a:	2b2e      	cmp	r3, #46	; 0x2e
 800367c:	f000 8084 	beq.w	8003788 <_vfiprintf_r+0x190>
 8003680:	2203      	movs	r2, #3
 8003682:	f898 1000 	ldrb.w	r1, [r8]
 8003686:	4865      	ldr	r0, [pc, #404]	; (800381c <_vfiprintf_r+0x224>)
 8003688:	f7fc fda2 	bl	80001d0 <memchr>
 800368c:	b148      	cbz	r0, 80036a2 <_vfiprintf_r+0xaa>
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	ebcb 0000 	rsb	r0, fp, r0
 8003694:	fa03 f000 	lsl.w	r0, r3, r0
 8003698:	9b04      	ldr	r3, [sp, #16]
 800369a:	4318      	orrs	r0, r3
 800369c:	9004      	str	r0, [sp, #16]
 800369e:	f108 0801 	add.w	r8, r8, #1
 80036a2:	f898 1000 	ldrb.w	r1, [r8]
 80036a6:	485e      	ldr	r0, [pc, #376]	; (8003820 <_vfiprintf_r+0x228>)
 80036a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036ac:	2206      	movs	r2, #6
 80036ae:	f108 0701 	add.w	r7, r8, #1
 80036b2:	f7fc fd8d 	bl	80001d0 <memchr>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	f000 8095 	beq.w	80037e6 <_vfiprintf_r+0x1ee>
 80036bc:	4b59      	ldr	r3, [pc, #356]	; (8003824 <_vfiprintf_r+0x22c>)
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f040 8088 	bne.w	80037d4 <_vfiprintf_r+0x1dc>
 80036c4:	9b03      	ldr	r3, [sp, #12]
 80036c6:	3307      	adds	r3, #7
 80036c8:	f023 0307 	bic.w	r3, r3, #7
 80036cc:	3308      	adds	r3, #8
 80036ce:	9303      	str	r3, [sp, #12]
 80036d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036d2:	4453      	add	r3, sl
 80036d4:	9309      	str	r3, [sp, #36]	; 0x24
 80036d6:	46b8      	mov	r8, r7
 80036d8:	4645      	mov	r5, r8
 80036da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80036de:	b91b      	cbnz	r3, 80036e8 <_vfiprintf_r+0xf0>
 80036e0:	ebb8 0907 	subs.w	r9, r8, r7
 80036e4:	d00f      	beq.n	8003706 <_vfiprintf_r+0x10e>
 80036e6:	e003      	b.n	80036f0 <_vfiprintf_r+0xf8>
 80036e8:	2b25      	cmp	r3, #37	; 0x25
 80036ea:	d0f9      	beq.n	80036e0 <_vfiprintf_r+0xe8>
 80036ec:	46a8      	mov	r8, r5
 80036ee:	e7f3      	b.n	80036d8 <_vfiprintf_r+0xe0>
 80036f0:	464b      	mov	r3, r9
 80036f2:	463a      	mov	r2, r7
 80036f4:	4621      	mov	r1, r4
 80036f6:	4630      	mov	r0, r6
 80036f8:	f7ff ff6c 	bl	80035d4 <__sfputs_r>
 80036fc:	3001      	adds	r0, #1
 80036fe:	d07f      	beq.n	8003800 <_vfiprintf_r+0x208>
 8003700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003702:	444b      	add	r3, r9
 8003704:	9309      	str	r3, [sp, #36]	; 0x24
 8003706:	f898 3000 	ldrb.w	r3, [r8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d078      	beq.n	8003800 <_vfiprintf_r+0x208>
 800370e:	2300      	movs	r3, #0
 8003710:	f04f 32ff 	mov.w	r2, #4294967295
 8003714:	9304      	str	r3, [sp, #16]
 8003716:	9307      	str	r3, [sp, #28]
 8003718:	9205      	str	r2, [sp, #20]
 800371a:	9306      	str	r3, [sp, #24]
 800371c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003720:	931a      	str	r3, [sp, #104]	; 0x68
 8003722:	2701      	movs	r7, #1
 8003724:	2205      	movs	r2, #5
 8003726:	7829      	ldrb	r1, [r5, #0]
 8003728:	483f      	ldr	r0, [pc, #252]	; (8003828 <_vfiprintf_r+0x230>)
 800372a:	f7fc fd51 	bl	80001d0 <memchr>
 800372e:	f105 0801 	add.w	r8, r5, #1
 8003732:	9b04      	ldr	r3, [sp, #16]
 8003734:	b138      	cbz	r0, 8003746 <_vfiprintf_r+0x14e>
 8003736:	4a3c      	ldr	r2, [pc, #240]	; (8003828 <_vfiprintf_r+0x230>)
 8003738:	1a80      	subs	r0, r0, r2
 800373a:	fa07 f000 	lsl.w	r0, r7, r0
 800373e:	4318      	orrs	r0, r3
 8003740:	9004      	str	r0, [sp, #16]
 8003742:	4645      	mov	r5, r8
 8003744:	e7ee      	b.n	8003724 <_vfiprintf_r+0x12c>
 8003746:	06d9      	lsls	r1, r3, #27
 8003748:	bf44      	itt	mi
 800374a:	2220      	movmi	r2, #32
 800374c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003750:	071a      	lsls	r2, r3, #28
 8003752:	bf44      	itt	mi
 8003754:	222b      	movmi	r2, #43	; 0x2b
 8003756:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800375a:	782a      	ldrb	r2, [r5, #0]
 800375c:	2a2a      	cmp	r2, #42	; 0x2a
 800375e:	f43f af7e 	beq.w	800365e <_vfiprintf_r+0x66>
 8003762:	9a07      	ldr	r2, [sp, #28]
 8003764:	2100      	movs	r1, #0
 8003766:	200a      	movs	r0, #10
 8003768:	46a8      	mov	r8, r5
 800376a:	3501      	adds	r5, #1
 800376c:	f898 3000 	ldrb.w	r3, [r8]
 8003770:	3b30      	subs	r3, #48	; 0x30
 8003772:	2b09      	cmp	r3, #9
 8003774:	d803      	bhi.n	800377e <_vfiprintf_r+0x186>
 8003776:	fb00 3202 	mla	r2, r0, r2, r3
 800377a:	2101      	movs	r1, #1
 800377c:	e7f4      	b.n	8003768 <_vfiprintf_r+0x170>
 800377e:	2900      	cmp	r1, #0
 8003780:	f43f af79 	beq.w	8003676 <_vfiprintf_r+0x7e>
 8003784:	9207      	str	r2, [sp, #28]
 8003786:	e776      	b.n	8003676 <_vfiprintf_r+0x7e>
 8003788:	f898 3001 	ldrb.w	r3, [r8, #1]
 800378c:	2b2a      	cmp	r3, #42	; 0x2a
 800378e:	d10b      	bne.n	80037a8 <_vfiprintf_r+0x1b0>
 8003790:	9b03      	ldr	r3, [sp, #12]
 8003792:	1d1a      	adds	r2, r3, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	9203      	str	r2, [sp, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	bfb8      	it	lt
 800379c:	f04f 33ff 	movlt.w	r3, #4294967295
 80037a0:	f108 0802 	add.w	r8, r8, #2
 80037a4:	9305      	str	r3, [sp, #20]
 80037a6:	e76b      	b.n	8003680 <_vfiprintf_r+0x88>
 80037a8:	2300      	movs	r3, #0
 80037aa:	9305      	str	r3, [sp, #20]
 80037ac:	f108 0001 	add.w	r0, r8, #1
 80037b0:	4619      	mov	r1, r3
 80037b2:	250a      	movs	r5, #10
 80037b4:	4680      	mov	r8, r0
 80037b6:	3001      	adds	r0, #1
 80037b8:	f898 2000 	ldrb.w	r2, [r8]
 80037bc:	3a30      	subs	r2, #48	; 0x30
 80037be:	2a09      	cmp	r2, #9
 80037c0:	d803      	bhi.n	80037ca <_vfiprintf_r+0x1d2>
 80037c2:	fb05 2101 	mla	r1, r5, r1, r2
 80037c6:	2301      	movs	r3, #1
 80037c8:	e7f4      	b.n	80037b4 <_vfiprintf_r+0x1bc>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f43f af58 	beq.w	8003680 <_vfiprintf_r+0x88>
 80037d0:	9105      	str	r1, [sp, #20]
 80037d2:	e755      	b.n	8003680 <_vfiprintf_r+0x88>
 80037d4:	ab03      	add	r3, sp, #12
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	4622      	mov	r2, r4
 80037da:	4b14      	ldr	r3, [pc, #80]	; (800382c <_vfiprintf_r+0x234>)
 80037dc:	a904      	add	r1, sp, #16
 80037de:	4630      	mov	r0, r6
 80037e0:	f3af 8000 	nop.w
 80037e4:	e007      	b.n	80037f6 <_vfiprintf_r+0x1fe>
 80037e6:	ab03      	add	r3, sp, #12
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	4622      	mov	r2, r4
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <_vfiprintf_r+0x234>)
 80037ee:	a904      	add	r1, sp, #16
 80037f0:	4630      	mov	r0, r6
 80037f2:	f000 f893 	bl	800391c <_printf_i>
 80037f6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80037fa:	4682      	mov	sl, r0
 80037fc:	f47f af68 	bne.w	80036d0 <_vfiprintf_r+0xd8>
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	065b      	lsls	r3, r3, #25
 8003804:	f53f af28 	bmi.w	8003658 <_vfiprintf_r+0x60>
 8003808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800380a:	b01d      	add	sp, #116	; 0x74
 800380c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003810:	08004d08 	.word	0x08004d08
 8003814:	08004d28 	.word	0x08004d28
 8003818:	08004d48 	.word	0x08004d48
 800381c:	08004d6e 	.word	0x08004d6e
 8003820:	08004d72 	.word	0x08004d72
 8003824:	00000000 	.word	0x00000000
 8003828:	08004d68 	.word	0x08004d68
 800382c:	080035d5 	.word	0x080035d5

08003830 <_printf_common>:
 8003830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003834:	4691      	mov	r9, r2
 8003836:	461f      	mov	r7, r3
 8003838:	690a      	ldr	r2, [r1, #16]
 800383a:	688b      	ldr	r3, [r1, #8]
 800383c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003840:	4293      	cmp	r3, r2
 8003842:	bfb8      	it	lt
 8003844:	4613      	movlt	r3, r2
 8003846:	f8c9 3000 	str.w	r3, [r9]
 800384a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800384e:	4606      	mov	r6, r0
 8003850:	460c      	mov	r4, r1
 8003852:	b112      	cbz	r2, 800385a <_printf_common+0x2a>
 8003854:	3301      	adds	r3, #1
 8003856:	f8c9 3000 	str.w	r3, [r9]
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	0699      	lsls	r1, r3, #26
 800385e:	bf42      	ittt	mi
 8003860:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003864:	3302      	addmi	r3, #2
 8003866:	f8c9 3000 	strmi.w	r3, [r9]
 800386a:	6825      	ldr	r5, [r4, #0]
 800386c:	f015 0506 	ands.w	r5, r5, #6
 8003870:	d110      	bne.n	8003894 <_printf_common+0x64>
 8003872:	f104 0a19 	add.w	sl, r4, #25
 8003876:	e007      	b.n	8003888 <_printf_common+0x58>
 8003878:	2301      	movs	r3, #1
 800387a:	4652      	mov	r2, sl
 800387c:	4639      	mov	r1, r7
 800387e:	4630      	mov	r0, r6
 8003880:	47c0      	blx	r8
 8003882:	3001      	adds	r0, #1
 8003884:	d01a      	beq.n	80038bc <_printf_common+0x8c>
 8003886:	3501      	adds	r5, #1
 8003888:	68e3      	ldr	r3, [r4, #12]
 800388a:	f8d9 2000 	ldr.w	r2, [r9]
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	429d      	cmp	r5, r3
 8003892:	dbf1      	blt.n	8003878 <_printf_common+0x48>
 8003894:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003898:	6822      	ldr	r2, [r4, #0]
 800389a:	3300      	adds	r3, #0
 800389c:	bf18      	it	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	0692      	lsls	r2, r2, #26
 80038a2:	d50f      	bpl.n	80038c4 <_printf_common+0x94>
 80038a4:	18e1      	adds	r1, r4, r3
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	2030      	movs	r0, #48	; 0x30
 80038aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038ae:	4422      	add	r2, r4
 80038b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038b8:	3302      	adds	r3, #2
 80038ba:	e003      	b.n	80038c4 <_printf_common+0x94>
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295
 80038c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038c8:	4639      	mov	r1, r7
 80038ca:	4630      	mov	r0, r6
 80038cc:	47c0      	blx	r8
 80038ce:	3001      	adds	r0, #1
 80038d0:	d0f4      	beq.n	80038bc <_printf_common+0x8c>
 80038d2:	6822      	ldr	r2, [r4, #0]
 80038d4:	f8d9 5000 	ldr.w	r5, [r9]
 80038d8:	68e3      	ldr	r3, [r4, #12]
 80038da:	f002 0206 	and.w	r2, r2, #6
 80038de:	2a04      	cmp	r2, #4
 80038e0:	bf08      	it	eq
 80038e2:	1b5d      	subeq	r5, r3, r5
 80038e4:	6922      	ldr	r2, [r4, #16]
 80038e6:	68a3      	ldr	r3, [r4, #8]
 80038e8:	bf0c      	ite	eq
 80038ea:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038ee:	2500      	movne	r5, #0
 80038f0:	4293      	cmp	r3, r2
 80038f2:	bfc4      	itt	gt
 80038f4:	1a9b      	subgt	r3, r3, r2
 80038f6:	18ed      	addgt	r5, r5, r3
 80038f8:	f04f 0900 	mov.w	r9, #0
 80038fc:	341a      	adds	r4, #26
 80038fe:	454d      	cmp	r5, r9
 8003900:	d009      	beq.n	8003916 <_printf_common+0xe6>
 8003902:	2301      	movs	r3, #1
 8003904:	4622      	mov	r2, r4
 8003906:	4639      	mov	r1, r7
 8003908:	4630      	mov	r0, r6
 800390a:	47c0      	blx	r8
 800390c:	3001      	adds	r0, #1
 800390e:	d0d5      	beq.n	80038bc <_printf_common+0x8c>
 8003910:	f109 0901 	add.w	r9, r9, #1
 8003914:	e7f3      	b.n	80038fe <_printf_common+0xce>
 8003916:	2000      	movs	r0, #0
 8003918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800391c <_printf_i>:
 800391c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003920:	4617      	mov	r7, r2
 8003922:	7e0a      	ldrb	r2, [r1, #24]
 8003924:	b085      	sub	sp, #20
 8003926:	2a6e      	cmp	r2, #110	; 0x6e
 8003928:	4698      	mov	r8, r3
 800392a:	4606      	mov	r6, r0
 800392c:	460c      	mov	r4, r1
 800392e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003930:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003934:	f000 80ae 	beq.w	8003a94 <_printf_i+0x178>
 8003938:	d811      	bhi.n	800395e <_printf_i+0x42>
 800393a:	2a63      	cmp	r2, #99	; 0x63
 800393c:	d022      	beq.n	8003984 <_printf_i+0x68>
 800393e:	d809      	bhi.n	8003954 <_printf_i+0x38>
 8003940:	2a00      	cmp	r2, #0
 8003942:	f000 80bb 	beq.w	8003abc <_printf_i+0x1a0>
 8003946:	2a58      	cmp	r2, #88	; 0x58
 8003948:	f040 80ca 	bne.w	8003ae0 <_printf_i+0x1c4>
 800394c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003950:	4983      	ldr	r1, [pc, #524]	; (8003b60 <_printf_i+0x244>)
 8003952:	e055      	b.n	8003a00 <_printf_i+0xe4>
 8003954:	2a64      	cmp	r2, #100	; 0x64
 8003956:	d01e      	beq.n	8003996 <_printf_i+0x7a>
 8003958:	2a69      	cmp	r2, #105	; 0x69
 800395a:	d01c      	beq.n	8003996 <_printf_i+0x7a>
 800395c:	e0c0      	b.n	8003ae0 <_printf_i+0x1c4>
 800395e:	2a73      	cmp	r2, #115	; 0x73
 8003960:	f000 80b0 	beq.w	8003ac4 <_printf_i+0x1a8>
 8003964:	d809      	bhi.n	800397a <_printf_i+0x5e>
 8003966:	2a6f      	cmp	r2, #111	; 0x6f
 8003968:	d02e      	beq.n	80039c8 <_printf_i+0xac>
 800396a:	2a70      	cmp	r2, #112	; 0x70
 800396c:	f040 80b8 	bne.w	8003ae0 <_printf_i+0x1c4>
 8003970:	680a      	ldr	r2, [r1, #0]
 8003972:	f042 0220 	orr.w	r2, r2, #32
 8003976:	600a      	str	r2, [r1, #0]
 8003978:	e03e      	b.n	80039f8 <_printf_i+0xdc>
 800397a:	2a75      	cmp	r2, #117	; 0x75
 800397c:	d024      	beq.n	80039c8 <_printf_i+0xac>
 800397e:	2a78      	cmp	r2, #120	; 0x78
 8003980:	d03a      	beq.n	80039f8 <_printf_i+0xdc>
 8003982:	e0ad      	b.n	8003ae0 <_printf_i+0x1c4>
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800398a:	1d11      	adds	r1, r2, #4
 800398c:	6019      	str	r1, [r3, #0]
 800398e:	6813      	ldr	r3, [r2, #0]
 8003990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003994:	e0a8      	b.n	8003ae8 <_printf_i+0x1cc>
 8003996:	6821      	ldr	r1, [r4, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800399e:	d002      	beq.n	80039a6 <_printf_i+0x8a>
 80039a0:	1d11      	adds	r1, r2, #4
 80039a2:	6019      	str	r1, [r3, #0]
 80039a4:	e008      	b.n	80039b8 <_printf_i+0x9c>
 80039a6:	f011 0f40 	tst.w	r1, #64	; 0x40
 80039aa:	f102 0104 	add.w	r1, r2, #4
 80039ae:	6019      	str	r1, [r3, #0]
 80039b0:	d002      	beq.n	80039b8 <_printf_i+0x9c>
 80039b2:	f9b2 3000 	ldrsh.w	r3, [r2]
 80039b6:	e000      	b.n	80039ba <_printf_i+0x9e>
 80039b8:	6813      	ldr	r3, [r2, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	da3c      	bge.n	8003a38 <_printf_i+0x11c>
 80039be:	222d      	movs	r2, #45	; 0x2d
 80039c0:	425b      	negs	r3, r3
 80039c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80039c6:	e037      	b.n	8003a38 <_printf_i+0x11c>
 80039c8:	6821      	ldr	r1, [r4, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80039d0:	d002      	beq.n	80039d8 <_printf_i+0xbc>
 80039d2:	1d11      	adds	r1, r2, #4
 80039d4:	6019      	str	r1, [r3, #0]
 80039d6:	e007      	b.n	80039e8 <_printf_i+0xcc>
 80039d8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80039dc:	f102 0104 	add.w	r1, r2, #4
 80039e0:	6019      	str	r1, [r3, #0]
 80039e2:	d001      	beq.n	80039e8 <_printf_i+0xcc>
 80039e4:	8813      	ldrh	r3, [r2, #0]
 80039e6:	e000      	b.n	80039ea <_printf_i+0xce>
 80039e8:	6813      	ldr	r3, [r2, #0]
 80039ea:	7e22      	ldrb	r2, [r4, #24]
 80039ec:	495c      	ldr	r1, [pc, #368]	; (8003b60 <_printf_i+0x244>)
 80039ee:	2a6f      	cmp	r2, #111	; 0x6f
 80039f0:	bf14      	ite	ne
 80039f2:	220a      	movne	r2, #10
 80039f4:	2208      	moveq	r2, #8
 80039f6:	e01b      	b.n	8003a30 <_printf_i+0x114>
 80039f8:	2278      	movs	r2, #120	; 0x78
 80039fa:	495a      	ldr	r1, [pc, #360]	; (8003b64 <_printf_i+0x248>)
 80039fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003a00:	6822      	ldr	r2, [r4, #0]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a08:	f100 0504 	add.w	r5, r0, #4
 8003a0c:	601d      	str	r5, [r3, #0]
 8003a0e:	d103      	bne.n	8003a18 <_printf_i+0xfc>
 8003a10:	0655      	lsls	r5, r2, #25
 8003a12:	d501      	bpl.n	8003a18 <_printf_i+0xfc>
 8003a14:	8803      	ldrh	r3, [r0, #0]
 8003a16:	e000      	b.n	8003a1a <_printf_i+0xfe>
 8003a18:	6803      	ldr	r3, [r0, #0]
 8003a1a:	07d0      	lsls	r0, r2, #31
 8003a1c:	bf44      	itt	mi
 8003a1e:	f042 0220 	orrmi.w	r2, r2, #32
 8003a22:	6022      	strmi	r2, [r4, #0]
 8003a24:	b91b      	cbnz	r3, 8003a2e <_printf_i+0x112>
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	f022 0220 	bic.w	r2, r2, #32
 8003a2c:	6022      	str	r2, [r4, #0]
 8003a2e:	2210      	movs	r2, #16
 8003a30:	2000      	movs	r0, #0
 8003a32:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003a36:	e001      	b.n	8003a3c <_printf_i+0x120>
 8003a38:	4949      	ldr	r1, [pc, #292]	; (8003b60 <_printf_i+0x244>)
 8003a3a:	220a      	movs	r2, #10
 8003a3c:	6865      	ldr	r5, [r4, #4]
 8003a3e:	60a5      	str	r5, [r4, #8]
 8003a40:	2d00      	cmp	r5, #0
 8003a42:	db08      	blt.n	8003a56 <_printf_i+0x13a>
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	f020 0004 	bic.w	r0, r0, #4
 8003a4a:	6020      	str	r0, [r4, #0]
 8003a4c:	b92b      	cbnz	r3, 8003a5a <_printf_i+0x13e>
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	d17d      	bne.n	8003b4e <_printf_i+0x232>
 8003a52:	4675      	mov	r5, lr
 8003a54:	e00c      	b.n	8003a70 <_printf_i+0x154>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d079      	beq.n	8003b4e <_printf_i+0x232>
 8003a5a:	4675      	mov	r5, lr
 8003a5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a60:	fb02 3310 	mls	r3, r2, r0, r3
 8003a64:	5ccb      	ldrb	r3, [r1, r3]
 8003a66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d1f5      	bne.n	8003a5c <_printf_i+0x140>
 8003a70:	2a08      	cmp	r2, #8
 8003a72:	d10b      	bne.n	8003a8c <_printf_i+0x170>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	07da      	lsls	r2, r3, #31
 8003a78:	d508      	bpl.n	8003a8c <_printf_i+0x170>
 8003a7a:	6923      	ldr	r3, [r4, #16]
 8003a7c:	6862      	ldr	r2, [r4, #4]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	bfde      	ittt	le
 8003a82:	2330      	movle	r3, #48	; 0x30
 8003a84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a8c:	ebc5 030e 	rsb	r3, r5, lr
 8003a90:	6123      	str	r3, [r4, #16]
 8003a92:	e02e      	b.n	8003af2 <_printf_i+0x1d6>
 8003a94:	6808      	ldr	r0, [r1, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	6949      	ldr	r1, [r1, #20]
 8003a9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a9e:	d003      	beq.n	8003aa8 <_printf_i+0x18c>
 8003aa0:	1d10      	adds	r0, r2, #4
 8003aa2:	6018      	str	r0, [r3, #0]
 8003aa4:	6813      	ldr	r3, [r2, #0]
 8003aa6:	e008      	b.n	8003aba <_printf_i+0x19e>
 8003aa8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aac:	f102 0004 	add.w	r0, r2, #4
 8003ab0:	6018      	str	r0, [r3, #0]
 8003ab2:	6813      	ldr	r3, [r2, #0]
 8003ab4:	d001      	beq.n	8003aba <_printf_i+0x19e>
 8003ab6:	8019      	strh	r1, [r3, #0]
 8003ab8:	e000      	b.n	8003abc <_printf_i+0x1a0>
 8003aba:	6019      	str	r1, [r3, #0]
 8003abc:	2300      	movs	r3, #0
 8003abe:	6123      	str	r3, [r4, #16]
 8003ac0:	4675      	mov	r5, lr
 8003ac2:	e016      	b.n	8003af2 <_printf_i+0x1d6>
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	1d11      	adds	r1, r2, #4
 8003ac8:	6019      	str	r1, [r3, #0]
 8003aca:	6815      	ldr	r5, [r2, #0]
 8003acc:	6862      	ldr	r2, [r4, #4]
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	f7fc fb7d 	bl	80001d0 <memchr>
 8003ad6:	b108      	cbz	r0, 8003adc <_printf_i+0x1c0>
 8003ad8:	1b40      	subs	r0, r0, r5
 8003ada:	6060      	str	r0, [r4, #4]
 8003adc:	6863      	ldr	r3, [r4, #4]
 8003ade:	e004      	b.n	8003aea <_printf_i+0x1ce>
 8003ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ae4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003ae8:	2301      	movs	r3, #1
 8003aea:	6123      	str	r3, [r4, #16]
 8003aec:	2300      	movs	r3, #0
 8003aee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af2:	f8cd 8000 	str.w	r8, [sp]
 8003af6:	463b      	mov	r3, r7
 8003af8:	aa03      	add	r2, sp, #12
 8003afa:	4621      	mov	r1, r4
 8003afc:	4630      	mov	r0, r6
 8003afe:	f7ff fe97 	bl	8003830 <_printf_common>
 8003b02:	3001      	adds	r0, #1
 8003b04:	d102      	bne.n	8003b0c <_printf_i+0x1f0>
 8003b06:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0a:	e026      	b.n	8003b5a <_printf_i+0x23e>
 8003b0c:	6923      	ldr	r3, [r4, #16]
 8003b0e:	462a      	mov	r2, r5
 8003b10:	4639      	mov	r1, r7
 8003b12:	4630      	mov	r0, r6
 8003b14:	47c0      	blx	r8
 8003b16:	3001      	adds	r0, #1
 8003b18:	d0f5      	beq.n	8003b06 <_printf_i+0x1ea>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	079b      	lsls	r3, r3, #30
 8003b1e:	d510      	bpl.n	8003b42 <_printf_i+0x226>
 8003b20:	2500      	movs	r5, #0
 8003b22:	f104 0919 	add.w	r9, r4, #25
 8003b26:	e007      	b.n	8003b38 <_printf_i+0x21c>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	464a      	mov	r2, r9
 8003b2c:	4639      	mov	r1, r7
 8003b2e:	4630      	mov	r0, r6
 8003b30:	47c0      	blx	r8
 8003b32:	3001      	adds	r0, #1
 8003b34:	d0e7      	beq.n	8003b06 <_printf_i+0x1ea>
 8003b36:	3501      	adds	r5, #1
 8003b38:	68e3      	ldr	r3, [r4, #12]
 8003b3a:	9a03      	ldr	r2, [sp, #12]
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	429d      	cmp	r5, r3
 8003b40:	dbf2      	blt.n	8003b28 <_printf_i+0x20c>
 8003b42:	68e0      	ldr	r0, [r4, #12]
 8003b44:	9b03      	ldr	r3, [sp, #12]
 8003b46:	4298      	cmp	r0, r3
 8003b48:	bfb8      	it	lt
 8003b4a:	4618      	movlt	r0, r3
 8003b4c:	e005      	b.n	8003b5a <_printf_i+0x23e>
 8003b4e:	780b      	ldrb	r3, [r1, #0]
 8003b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b58:	e78a      	b.n	8003a70 <_printf_i+0x154>
 8003b5a:	b005      	add	sp, #20
 8003b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b60:	08004d79 	.word	0x08004d79
 8003b64:	08004d8a 	.word	0x08004d8a

08003b68 <__svfiscanf_r>:
 8003b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8003b70:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003e0c <__svfiscanf_r+0x2a4>
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9346      	str	r3, [sp, #280]	; 0x118
 8003b7a:	9347      	str	r3, [sp, #284]	; 0x11c
 8003b7c:	4b9f      	ldr	r3, [pc, #636]	; (8003dfc <__svfiscanf_r+0x294>)
 8003b7e:	93a2      	str	r3, [sp, #648]	; 0x288
 8003b80:	f10d 080c 	add.w	r8, sp, #12
 8003b84:	4b9e      	ldr	r3, [pc, #632]	; (8003e00 <__svfiscanf_r+0x298>)
 8003b86:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8003e04 <__svfiscanf_r+0x29c>
 8003b8a:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8003b8e:	4607      	mov	r7, r0
 8003b90:	460d      	mov	r5, r1
 8003b92:	93a3      	str	r3, [sp, #652]	; 0x28c
 8003b94:	46ca      	mov	sl, r9
 8003b96:	7814      	ldrb	r4, [r2, #0]
 8003b98:	2c00      	cmp	r4, #0
 8003b9a:	f000 8127 	beq.w	8003dec <__svfiscanf_r+0x284>
 8003b9e:	f8d9 3000 	ldr.w	r3, [r9]
 8003ba2:	4423      	add	r3, r4
 8003ba4:	785b      	ldrb	r3, [r3, #1]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8003bae:	b1f3      	cbz	r3, 8003bee <__svfiscanf_r+0x86>
 8003bb0:	686b      	ldr	r3, [r5, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	dd10      	ble.n	8003bd8 <__svfiscanf_r+0x70>
 8003bb6:	682b      	ldr	r3, [r5, #0]
 8003bb8:	f8da 0000 	ldr.w	r0, [sl]
 8003bbc:	7819      	ldrb	r1, [r3, #0]
 8003bbe:	4401      	add	r1, r0
 8003bc0:	7849      	ldrb	r1, [r1, #1]
 8003bc2:	070c      	lsls	r4, r1, #28
 8003bc4:	d510      	bpl.n	8003be8 <__svfiscanf_r+0x80>
 8003bc6:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8003bc8:	3101      	adds	r1, #1
 8003bca:	9147      	str	r1, [sp, #284]	; 0x11c
 8003bcc:	6869      	ldr	r1, [r5, #4]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	3901      	subs	r1, #1
 8003bd2:	6069      	str	r1, [r5, #4]
 8003bd4:	602b      	str	r3, [r5, #0]
 8003bd6:	e7eb      	b.n	8003bb0 <__svfiscanf_r+0x48>
 8003bd8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003bda:	9200      	str	r2, [sp, #0]
 8003bdc:	4629      	mov	r1, r5
 8003bde:	4638      	mov	r0, r7
 8003be0:	4798      	blx	r3
 8003be2:	9a00      	ldr	r2, [sp, #0]
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d0e6      	beq.n	8003bb6 <__svfiscanf_r+0x4e>
 8003be8:	1c56      	adds	r6, r2, #1
 8003bea:	4632      	mov	r2, r6
 8003bec:	e7d3      	b.n	8003b96 <__svfiscanf_r+0x2e>
 8003bee:	2c25      	cmp	r4, #37	; 0x25
 8003bf0:	f102 0601 	add.w	r6, r2, #1
 8003bf4:	d152      	bne.n	8003c9c <__svfiscanf_r+0x134>
 8003bf6:	9143      	str	r1, [sp, #268]	; 0x10c
 8003bf8:	9145      	str	r1, [sp, #276]	; 0x114
 8003bfa:	7853      	ldrb	r3, [r2, #1]
 8003bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bfe:	bf02      	ittt	eq
 8003c00:	2310      	moveq	r3, #16
 8003c02:	1c96      	addeq	r6, r2, #2
 8003c04:	9343      	streq	r3, [sp, #268]	; 0x10c
 8003c06:	220a      	movs	r2, #10
 8003c08:	7831      	ldrb	r1, [r6, #0]
 8003c0a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	4634      	mov	r4, r6
 8003c12:	f106 0601 	add.w	r6, r6, #1
 8003c16:	d805      	bhi.n	8003c24 <__svfiscanf_r+0xbc>
 8003c18:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003c1a:	fb02 1303 	mla	r3, r2, r3, r1
 8003c1e:	3b30      	subs	r3, #48	; 0x30
 8003c20:	9345      	str	r3, [sp, #276]	; 0x114
 8003c22:	e7f1      	b.n	8003c08 <__svfiscanf_r+0xa0>
 8003c24:	2203      	movs	r2, #3
 8003c26:	4877      	ldr	r0, [pc, #476]	; (8003e04 <__svfiscanf_r+0x29c>)
 8003c28:	f7fc fad2 	bl	80001d0 <memchr>
 8003c2c:	b140      	cbz	r0, 8003c40 <__svfiscanf_r+0xd8>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	ebcb 0000 	rsb	r0, fp, r0
 8003c34:	fa03 f000 	lsl.w	r0, r3, r0
 8003c38:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003c3a:	4303      	orrs	r3, r0
 8003c3c:	9343      	str	r3, [sp, #268]	; 0x10c
 8003c3e:	4634      	mov	r4, r6
 8003c40:	1c66      	adds	r6, r4, #1
 8003c42:	7824      	ldrb	r4, [r4, #0]
 8003c44:	2c67      	cmp	r4, #103	; 0x67
 8003c46:	d816      	bhi.n	8003c76 <__svfiscanf_r+0x10e>
 8003c48:	2c65      	cmp	r4, #101	; 0x65
 8003c4a:	d27f      	bcs.n	8003d4c <__svfiscanf_r+0x1e4>
 8003c4c:	2c47      	cmp	r4, #71	; 0x47
 8003c4e:	d807      	bhi.n	8003c60 <__svfiscanf_r+0xf8>
 8003c50:	2c45      	cmp	r4, #69	; 0x45
 8003c52:	d27b      	bcs.n	8003d4c <__svfiscanf_r+0x1e4>
 8003c54:	2c00      	cmp	r4, #0
 8003c56:	f000 80cb 	beq.w	8003df0 <__svfiscanf_r+0x288>
 8003c5a:	2c25      	cmp	r4, #37	; 0x25
 8003c5c:	d01e      	beq.n	8003c9c <__svfiscanf_r+0x134>
 8003c5e:	e077      	b.n	8003d50 <__svfiscanf_r+0x1e8>
 8003c60:	2c5b      	cmp	r4, #91	; 0x5b
 8003c62:	d051      	beq.n	8003d08 <__svfiscanf_r+0x1a0>
 8003c64:	d802      	bhi.n	8003c6c <__svfiscanf_r+0x104>
 8003c66:	2c58      	cmp	r4, #88	; 0x58
 8003c68:	d03e      	beq.n	8003ce8 <__svfiscanf_r+0x180>
 8003c6a:	e071      	b.n	8003d50 <__svfiscanf_r+0x1e8>
 8003c6c:	2c63      	cmp	r4, #99	; 0x63
 8003c6e:	d057      	beq.n	8003d20 <__svfiscanf_r+0x1b8>
 8003c70:	2c64      	cmp	r4, #100	; 0x64
 8003c72:	d03f      	beq.n	8003cf4 <__svfiscanf_r+0x18c>
 8003c74:	e06c      	b.n	8003d50 <__svfiscanf_r+0x1e8>
 8003c76:	2c70      	cmp	r4, #112	; 0x70
 8003c78:	d032      	beq.n	8003ce0 <__svfiscanf_r+0x178>
 8003c7a:	d807      	bhi.n	8003c8c <__svfiscanf_r+0x124>
 8003c7c:	2c6e      	cmp	r4, #110	; 0x6e
 8003c7e:	d055      	beq.n	8003d2c <__svfiscanf_r+0x1c4>
 8003c80:	d83a      	bhi.n	8003cf8 <__svfiscanf_r+0x190>
 8003c82:	2c69      	cmp	r4, #105	; 0x69
 8003c84:	d164      	bne.n	8003d50 <__svfiscanf_r+0x1e8>
 8003c86:	2300      	movs	r3, #0
 8003c88:	9344      	str	r3, [sp, #272]	; 0x110
 8003c8a:	e03b      	b.n	8003d04 <__svfiscanf_r+0x19c>
 8003c8c:	2c75      	cmp	r4, #117	; 0x75
 8003c8e:	d031      	beq.n	8003cf4 <__svfiscanf_r+0x18c>
 8003c90:	2c78      	cmp	r4, #120	; 0x78
 8003c92:	d029      	beq.n	8003ce8 <__svfiscanf_r+0x180>
 8003c94:	2c73      	cmp	r4, #115	; 0x73
 8003c96:	d15b      	bne.n	8003d50 <__svfiscanf_r+0x1e8>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e03f      	b.n	8003d1c <__svfiscanf_r+0x1b4>
 8003c9c:	686b      	ldr	r3, [r5, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	dd0d      	ble.n	8003cbe <__svfiscanf_r+0x156>
 8003ca2:	682b      	ldr	r3, [r5, #0]
 8003ca4:	781a      	ldrb	r2, [r3, #0]
 8003ca6:	4294      	cmp	r4, r2
 8003ca8:	f040 80a0 	bne.w	8003dec <__svfiscanf_r+0x284>
 8003cac:	3301      	adds	r3, #1
 8003cae:	686a      	ldr	r2, [r5, #4]
 8003cb0:	602b      	str	r3, [r5, #0]
 8003cb2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003cb4:	3a01      	subs	r2, #1
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	606a      	str	r2, [r5, #4]
 8003cba:	9347      	str	r3, [sp, #284]	; 0x11c
 8003cbc:	e795      	b.n	8003bea <__svfiscanf_r+0x82>
 8003cbe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	4798      	blx	r3
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d0eb      	beq.n	8003ca2 <__svfiscanf_r+0x13a>
 8003cca:	9846      	ldr	r0, [sp, #280]	; 0x118
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	f000 808f 	beq.w	8003df0 <__svfiscanf_r+0x288>
 8003cd2:	89ab      	ldrh	r3, [r5, #12]
 8003cd4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003cd8:	bf18      	it	ne
 8003cda:	f04f 30ff 	movne.w	r0, #4294967295
 8003cde:	e089      	b.n	8003df4 <__svfiscanf_r+0x28c>
 8003ce0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003ce2:	f043 0320 	orr.w	r3, r3, #32
 8003ce6:	9343      	str	r3, [sp, #268]	; 0x10c
 8003ce8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cee:	9343      	str	r3, [sp, #268]	; 0x10c
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	e002      	b.n	8003cfa <__svfiscanf_r+0x192>
 8003cf4:	230a      	movs	r3, #10
 8003cf6:	e000      	b.n	8003cfa <__svfiscanf_r+0x192>
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	2c6e      	cmp	r4, #110	; 0x6e
 8003cfc:	9344      	str	r3, [sp, #272]	; 0x110
 8003cfe:	dd01      	ble.n	8003d04 <__svfiscanf_r+0x19c>
 8003d00:	2304      	movs	r3, #4
 8003d02:	e00b      	b.n	8003d1c <__svfiscanf_r+0x1b4>
 8003d04:	2303      	movs	r3, #3
 8003d06:	e009      	b.n	8003d1c <__svfiscanf_r+0x1b4>
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	f000 fa90 	bl	8004230 <__sccl>
 8003d10:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d16:	9343      	str	r3, [sp, #268]	; 0x10c
 8003d18:	4606      	mov	r6, r0
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	9349      	str	r3, [sp, #292]	; 0x124
 8003d1e:	e01b      	b.n	8003d58 <__svfiscanf_r+0x1f0>
 8003d20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d26:	9343      	str	r3, [sp, #268]	; 0x10c
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e7f7      	b.n	8003d1c <__svfiscanf_r+0x1b4>
 8003d2c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003d2e:	06d0      	lsls	r0, r2, #27
 8003d30:	f53f af5b 	bmi.w	8003bea <__svfiscanf_r+0x82>
 8003d34:	f012 0f01 	tst.w	r2, #1
 8003d38:	9a01      	ldr	r2, [sp, #4]
 8003d3a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003d3c:	f102 0104 	add.w	r1, r2, #4
 8003d40:	9101      	str	r1, [sp, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	bf14      	ite	ne
 8003d46:	8013      	strhne	r3, [r2, #0]
 8003d48:	6013      	streq	r3, [r2, #0]
 8003d4a:	e74e      	b.n	8003bea <__svfiscanf_r+0x82>
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	e7e5      	b.n	8003d1c <__svfiscanf_r+0x1b4>
 8003d50:	2303      	movs	r3, #3
 8003d52:	9349      	str	r3, [sp, #292]	; 0x124
 8003d54:	230a      	movs	r3, #10
 8003d56:	9344      	str	r3, [sp, #272]	; 0x110
 8003d58:	686b      	ldr	r3, [r5, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	dd03      	ble.n	8003d66 <__svfiscanf_r+0x1fe>
 8003d5e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003d60:	0659      	lsls	r1, r3, #25
 8003d62:	d511      	bpl.n	8003d88 <__svfiscanf_r+0x220>
 8003d64:	e018      	b.n	8003d98 <__svfiscanf_r+0x230>
 8003d66:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003d68:	4629      	mov	r1, r5
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	4798      	blx	r3
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d0f5      	beq.n	8003d5e <__svfiscanf_r+0x1f6>
 8003d72:	e7aa      	b.n	8003cca <__svfiscanf_r+0x162>
 8003d74:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8003d76:	3201      	adds	r2, #1
 8003d78:	9247      	str	r2, [sp, #284]	; 0x11c
 8003d7a:	686a      	ldr	r2, [r5, #4]
 8003d7c:	3a01      	subs	r2, #1
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	606a      	str	r2, [r5, #4]
 8003d82:	dd13      	ble.n	8003dac <__svfiscanf_r+0x244>
 8003d84:	3301      	adds	r3, #1
 8003d86:	602b      	str	r3, [r5, #0]
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	f8da 1000 	ldr.w	r1, [sl]
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	440a      	add	r2, r1
 8003d92:	7852      	ldrb	r2, [r2, #1]
 8003d94:	0712      	lsls	r2, r2, #28
 8003d96:	d4ed      	bmi.n	8003d74 <__svfiscanf_r+0x20c>
 8003d98:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	dc0d      	bgt.n	8003dba <__svfiscanf_r+0x252>
 8003d9e:	ab01      	add	r3, sp, #4
 8003da0:	462a      	mov	r2, r5
 8003da2:	a943      	add	r1, sp, #268	; 0x10c
 8003da4:	4638      	mov	r0, r7
 8003da6:	f000 f85b 	bl	8003e60 <_scanf_chars>
 8003daa:	e019      	b.n	8003de0 <__svfiscanf_r+0x278>
 8003dac:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003dae:	4629      	mov	r1, r5
 8003db0:	4638      	mov	r0, r7
 8003db2:	4798      	blx	r3
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d0e7      	beq.n	8003d88 <__svfiscanf_r+0x220>
 8003db8:	e787      	b.n	8003cca <__svfiscanf_r+0x162>
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	dc06      	bgt.n	8003dcc <__svfiscanf_r+0x264>
 8003dbe:	ab01      	add	r3, sp, #4
 8003dc0:	462a      	mov	r2, r5
 8003dc2:	a943      	add	r1, sp, #268	; 0x10c
 8003dc4:	4638      	mov	r0, r7
 8003dc6:	f000 f8af 	bl	8003f28 <_scanf_i>
 8003dca:	e009      	b.n	8003de0 <__svfiscanf_r+0x278>
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <__svfiscanf_r+0x2a0>)
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f43f af0b 	beq.w	8003bea <__svfiscanf_r+0x82>
 8003dd4:	ab01      	add	r3, sp, #4
 8003dd6:	462a      	mov	r2, r5
 8003dd8:	a943      	add	r1, sp, #268	; 0x10c
 8003dda:	4638      	mov	r0, r7
 8003ddc:	f3af 8000 	nop.w
 8003de0:	2801      	cmp	r0, #1
 8003de2:	d003      	beq.n	8003dec <__svfiscanf_r+0x284>
 8003de4:	2802      	cmp	r0, #2
 8003de6:	f47f af00 	bne.w	8003bea <__svfiscanf_r+0x82>
 8003dea:	e76e      	b.n	8003cca <__svfiscanf_r+0x162>
 8003dec:	9846      	ldr	r0, [sp, #280]	; 0x118
 8003dee:	e001      	b.n	8003df4 <__svfiscanf_r+0x28c>
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295
 8003df4:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8003df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dfc:	08004599 	.word	0x08004599
 8003e00:	08004121 	.word	0x08004121
 8003e04:	08004d6e 	.word	0x08004d6e
 8003e08:	00000000 	.word	0x00000000
 8003e0c:	20000068 	.word	0x20000068

08003e10 <_vfiscanf_r>:
 8003e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e14:	460c      	mov	r4, r1
 8003e16:	4616      	mov	r6, r2
 8003e18:	461f      	mov	r7, r3
 8003e1a:	4605      	mov	r5, r0
 8003e1c:	b118      	cbz	r0, 8003e26 <_vfiscanf_r+0x16>
 8003e1e:	6983      	ldr	r3, [r0, #24]
 8003e20:	b90b      	cbnz	r3, 8003e26 <_vfiscanf_r+0x16>
 8003e22:	f7ff f9c9 	bl	80031b8 <__sinit>
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <_vfiscanf_r+0x44>)
 8003e28:	429c      	cmp	r4, r3
 8003e2a:	d101      	bne.n	8003e30 <_vfiscanf_r+0x20>
 8003e2c:	686c      	ldr	r4, [r5, #4]
 8003e2e:	e008      	b.n	8003e42 <_vfiscanf_r+0x32>
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <_vfiscanf_r+0x48>)
 8003e32:	429c      	cmp	r4, r3
 8003e34:	d101      	bne.n	8003e3a <_vfiscanf_r+0x2a>
 8003e36:	68ac      	ldr	r4, [r5, #8]
 8003e38:	e003      	b.n	8003e42 <_vfiscanf_r+0x32>
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <_vfiscanf_r+0x4c>)
 8003e3c:	429c      	cmp	r4, r3
 8003e3e:	bf08      	it	eq
 8003e40:	68ec      	ldreq	r4, [r5, #12]
 8003e42:	463b      	mov	r3, r7
 8003e44:	4632      	mov	r2, r6
 8003e46:	4621      	mov	r1, r4
 8003e48:	4628      	mov	r0, r5
 8003e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4e:	f7ff be8b 	b.w	8003b68 <__svfiscanf_r>
 8003e52:	bf00      	nop
 8003e54:	08004d08 	.word	0x08004d08
 8003e58:	08004d28 	.word	0x08004d28
 8003e5c:	08004d48 	.word	0x08004d48

08003e60 <_scanf_chars>:
 8003e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e64:	4615      	mov	r5, r2
 8003e66:	688a      	ldr	r2, [r1, #8]
 8003e68:	4680      	mov	r8, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	b932      	cbnz	r2, 8003e7c <_scanf_chars+0x1c>
 8003e6e:	698a      	ldr	r2, [r1, #24]
 8003e70:	2a00      	cmp	r2, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2201      	moveq	r2, #1
 8003e76:	f04f 32ff 	movne.w	r2, #4294967295
 8003e7a:	608a      	str	r2, [r1, #8]
 8003e7c:	6822      	ldr	r2, [r4, #0]
 8003e7e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8003f24 <_scanf_chars+0xc4>
 8003e82:	06d1      	lsls	r1, r2, #27
 8003e84:	bf5f      	itttt	pl
 8003e86:	681a      	ldrpl	r2, [r3, #0]
 8003e88:	1d11      	addpl	r1, r2, #4
 8003e8a:	6019      	strpl	r1, [r3, #0]
 8003e8c:	6817      	ldrpl	r7, [r2, #0]
 8003e8e:	2600      	movs	r6, #0
 8003e90:	69a0      	ldr	r0, [r4, #24]
 8003e92:	bb00      	cbnz	r0, 8003ed6 <_scanf_chars+0x76>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	06da      	lsls	r2, r3, #27
 8003e98:	bf5e      	ittt	pl
 8003e9a:	682b      	ldrpl	r3, [r5, #0]
 8003e9c:	781b      	ldrbpl	r3, [r3, #0]
 8003e9e:	703b      	strbpl	r3, [r7, #0]
 8003ea0:	682a      	ldr	r2, [r5, #0]
 8003ea2:	686b      	ldr	r3, [r5, #4]
 8003ea4:	f102 0201 	add.w	r2, r2, #1
 8003ea8:	602a      	str	r2, [r5, #0]
 8003eaa:	68a2      	ldr	r2, [r4, #8]
 8003eac:	f103 33ff 	add.w	r3, r3, #4294967295
 8003eb0:	f102 32ff 	add.w	r2, r2, #4294967295
 8003eb4:	606b      	str	r3, [r5, #4]
 8003eb6:	f106 0601 	add.w	r6, r6, #1
 8003eba:	bf58      	it	pl
 8003ebc:	3701      	addpl	r7, #1
 8003ebe:	60a2      	str	r2, [r4, #8]
 8003ec0:	b1e2      	cbz	r2, 8003efc <_scanf_chars+0x9c>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	dce4      	bgt.n	8003e90 <_scanf_chars+0x30>
 8003ec6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4640      	mov	r0, r8
 8003ece:	4798      	blx	r3
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d0dd      	beq.n	8003e90 <_scanf_chars+0x30>
 8003ed4:	e012      	b.n	8003efc <_scanf_chars+0x9c>
 8003ed6:	2801      	cmp	r0, #1
 8003ed8:	d106      	bne.n	8003ee8 <_scanf_chars+0x88>
 8003eda:	682b      	ldr	r3, [r5, #0]
 8003edc:	781a      	ldrb	r2, [r3, #0]
 8003ede:	6963      	ldr	r3, [r4, #20]
 8003ee0:	5c9b      	ldrb	r3, [r3, r2]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1d6      	bne.n	8003e94 <_scanf_chars+0x34>
 8003ee6:	e019      	b.n	8003f1c <_scanf_chars+0xbc>
 8003ee8:	2802      	cmp	r0, #2
 8003eea:	d107      	bne.n	8003efc <_scanf_chars+0x9c>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	f8d9 2000 	ldr.w	r2, [r9]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	071b      	lsls	r3, r3, #28
 8003efa:	d5cb      	bpl.n	8003e94 <_scanf_chars+0x34>
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	f013 0310 	ands.w	r3, r3, #16
 8003f02:	d105      	bne.n	8003f10 <_scanf_chars+0xb0>
 8003f04:	68e2      	ldr	r2, [r4, #12]
 8003f06:	3201      	adds	r2, #1
 8003f08:	60e2      	str	r2, [r4, #12]
 8003f0a:	69a2      	ldr	r2, [r4, #24]
 8003f0c:	b102      	cbz	r2, 8003f10 <_scanf_chars+0xb0>
 8003f0e:	703b      	strb	r3, [r7, #0]
 8003f10:	6923      	ldr	r3, [r4, #16]
 8003f12:	441e      	add	r6, r3
 8003f14:	6126      	str	r6, [r4, #16]
 8003f16:	2000      	movs	r0, #0
 8003f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f1c:	2e00      	cmp	r6, #0
 8003f1e:	d1ed      	bne.n	8003efc <_scanf_chars+0x9c>
 8003f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f24:	20000068 	.word	0x20000068

08003f28 <_scanf_i>:
 8003f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f2c:	469a      	mov	sl, r3
 8003f2e:	4b73      	ldr	r3, [pc, #460]	; (80040fc <_scanf_i+0x1d4>)
 8003f30:	460c      	mov	r4, r1
 8003f32:	4683      	mov	fp, r0
 8003f34:	4616      	mov	r6, r2
 8003f36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	ab03      	add	r3, sp, #12
 8003f3e:	68a7      	ldr	r7, [r4, #8]
 8003f40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003f44:	4b6e      	ldr	r3, [pc, #440]	; (8004100 <_scanf_i+0x1d8>)
 8003f46:	69a1      	ldr	r1, [r4, #24]
 8003f48:	4a6e      	ldr	r2, [pc, #440]	; (8004104 <_scanf_i+0x1dc>)
 8003f4a:	2903      	cmp	r1, #3
 8003f4c:	bf18      	it	ne
 8003f4e:	461a      	movne	r2, r3
 8003f50:	1e7b      	subs	r3, r7, #1
 8003f52:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8003f56:	bf84      	itt	hi
 8003f58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003f5c:	60a3      	strhi	r3, [r4, #8]
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	9200      	str	r2, [sp, #0]
 8003f62:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003f66:	bf88      	it	hi
 8003f68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003f6c:	f104 091c 	add.w	r9, r4, #28
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bf8c      	ite	hi
 8003f74:	197f      	addhi	r7, r7, r5
 8003f76:	2700      	movls	r7, #0
 8003f78:	464b      	mov	r3, r9
 8003f7a:	f04f 0800 	mov.w	r8, #0
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	6831      	ldr	r1, [r6, #0]
 8003f82:	ab03      	add	r3, sp, #12
 8003f84:	2202      	movs	r2, #2
 8003f86:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003f8a:	7809      	ldrb	r1, [r1, #0]
 8003f8c:	f7fc f920 	bl	80001d0 <memchr>
 8003f90:	9b01      	ldr	r3, [sp, #4]
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d033      	beq.n	8003ffe <_scanf_i+0xd6>
 8003f96:	f1b8 0f01 	cmp.w	r8, #1
 8003f9a:	d10b      	bne.n	8003fb4 <_scanf_i+0x8c>
 8003f9c:	6862      	ldr	r2, [r4, #4]
 8003f9e:	b92a      	cbnz	r2, 8003fac <_scanf_i+0x84>
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	6062      	str	r2, [r4, #4]
 8003fa4:	6822      	ldr	r2, [r4, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	6022      	str	r2, [r4, #0]
 8003fac:	6822      	ldr	r2, [r4, #0]
 8003fae:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003fb2:	e00c      	b.n	8003fce <_scanf_i+0xa6>
 8003fb4:	f1b8 0f02 	cmp.w	r8, #2
 8003fb8:	d10a      	bne.n	8003fd0 <_scanf_i+0xa8>
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003fc0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003fc4:	d11b      	bne.n	8003ffe <_scanf_i+0xd6>
 8003fc6:	2110      	movs	r1, #16
 8003fc8:	6061      	str	r1, [r4, #4]
 8003fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fce:	6022      	str	r2, [r4, #0]
 8003fd0:	68a2      	ldr	r2, [r4, #8]
 8003fd2:	1e51      	subs	r1, r2, #1
 8003fd4:	60a1      	str	r1, [r4, #8]
 8003fd6:	b192      	cbz	r2, 8003ffe <_scanf_i+0xd6>
 8003fd8:	6832      	ldr	r2, [r6, #0]
 8003fda:	1c51      	adds	r1, r2, #1
 8003fdc:	6031      	str	r1, [r6, #0]
 8003fde:	7812      	ldrb	r2, [r2, #0]
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	1c5d      	adds	r5, r3, #1
 8003fe4:	6873      	ldr	r3, [r6, #4]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	6073      	str	r3, [r6, #4]
 8003fec:	dc06      	bgt.n	8003ffc <_scanf_i+0xd4>
 8003fee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4658      	mov	r0, fp
 8003ff6:	4798      	blx	r3
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d140      	bne.n	800407e <_scanf_i+0x156>
 8003ffc:	462b      	mov	r3, r5
 8003ffe:	f108 0801 	add.w	r8, r8, #1
 8004002:	f1b8 0f03 	cmp.w	r8, #3
 8004006:	d1ba      	bne.n	8003f7e <_scanf_i+0x56>
 8004008:	6862      	ldr	r2, [r4, #4]
 800400a:	b90a      	cbnz	r2, 8004010 <_scanf_i+0xe8>
 800400c:	220a      	movs	r2, #10
 800400e:	6062      	str	r2, [r4, #4]
 8004010:	6862      	ldr	r2, [r4, #4]
 8004012:	493d      	ldr	r1, [pc, #244]	; (8004108 <_scanf_i+0x1e0>)
 8004014:	6960      	ldr	r0, [r4, #20]
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	1a89      	subs	r1, r1, r2
 800401a:	f000 f909 	bl	8004230 <__sccl>
 800401e:	9b01      	ldr	r3, [sp, #4]
 8004020:	f04f 0800 	mov.w	r8, #0
 8004024:	461d      	mov	r5, r3
 8004026:	68a3      	ldr	r3, [r4, #8]
 8004028:	b35b      	cbz	r3, 8004082 <_scanf_i+0x15a>
 800402a:	6831      	ldr	r1, [r6, #0]
 800402c:	6960      	ldr	r0, [r4, #20]
 800402e:	780a      	ldrb	r2, [r1, #0]
 8004030:	5c80      	ldrb	r0, [r0, r2]
 8004032:	b330      	cbz	r0, 8004082 <_scanf_i+0x15a>
 8004034:	2a30      	cmp	r2, #48	; 0x30
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	d108      	bne.n	800404c <_scanf_i+0x124>
 800403a:	0510      	lsls	r0, r2, #20
 800403c:	d506      	bpl.n	800404c <_scanf_i+0x124>
 800403e:	f108 0801 	add.w	r8, r8, #1
 8004042:	b14f      	cbz	r7, 8004058 <_scanf_i+0x130>
 8004044:	3301      	adds	r3, #1
 8004046:	3f01      	subs	r7, #1
 8004048:	60a3      	str	r3, [r4, #8]
 800404a:	e005      	b.n	8004058 <_scanf_i+0x130>
 800404c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004050:	6022      	str	r2, [r4, #0]
 8004052:	780b      	ldrb	r3, [r1, #0]
 8004054:	702b      	strb	r3, [r5, #0]
 8004056:	3501      	adds	r5, #1
 8004058:	6873      	ldr	r3, [r6, #4]
 800405a:	3b01      	subs	r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	6073      	str	r3, [r6, #4]
 8004060:	dd03      	ble.n	800406a <_scanf_i+0x142>
 8004062:	6833      	ldr	r3, [r6, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	6033      	str	r3, [r6, #0]
 8004068:	e005      	b.n	8004076 <_scanf_i+0x14e>
 800406a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800406e:	4631      	mov	r1, r6
 8004070:	4658      	mov	r0, fp
 8004072:	4798      	blx	r3
 8004074:	b928      	cbnz	r0, 8004082 <_scanf_i+0x15a>
 8004076:	68a3      	ldr	r3, [r4, #8]
 8004078:	3b01      	subs	r3, #1
 800407a:	60a3      	str	r3, [r4, #8]
 800407c:	e7d3      	b.n	8004026 <_scanf_i+0xfe>
 800407e:	f04f 0800 	mov.w	r8, #0
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	05d9      	lsls	r1, r3, #23
 8004086:	d50c      	bpl.n	80040a2 <_scanf_i+0x17a>
 8004088:	454d      	cmp	r5, r9
 800408a:	d908      	bls.n	800409e <_scanf_i+0x176>
 800408c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004090:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004094:	4632      	mov	r2, r6
 8004096:	4658      	mov	r0, fp
 8004098:	4798      	blx	r3
 800409a:	1e6f      	subs	r7, r5, #1
 800409c:	463d      	mov	r5, r7
 800409e:	454d      	cmp	r5, r9
 80040a0:	d027      	beq.n	80040f2 <_scanf_i+0x1ca>
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	f012 0210 	ands.w	r2, r2, #16
 80040a8:	d11b      	bne.n	80040e2 <_scanf_i+0x1ba>
 80040aa:	702a      	strb	r2, [r5, #0]
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	9e00      	ldr	r6, [sp, #0]
 80040b0:	4649      	mov	r1, r9
 80040b2:	4658      	mov	r0, fp
 80040b4:	47b0      	blx	r6
 80040b6:	6822      	ldr	r2, [r4, #0]
 80040b8:	f8da 3000 	ldr.w	r3, [sl]
 80040bc:	f012 0f20 	tst.w	r2, #32
 80040c0:	d107      	bne.n	80040d2 <_scanf_i+0x1aa>
 80040c2:	07d2      	lsls	r2, r2, #31
 80040c4:	d505      	bpl.n	80040d2 <_scanf_i+0x1aa>
 80040c6:	1d1a      	adds	r2, r3, #4
 80040c8:	f8ca 2000 	str.w	r2, [sl]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	8018      	strh	r0, [r3, #0]
 80040d0:	e004      	b.n	80040dc <_scanf_i+0x1b4>
 80040d2:	1d1a      	adds	r2, r3, #4
 80040d4:	f8ca 2000 	str.w	r2, [sl]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6018      	str	r0, [r3, #0]
 80040dc:	68e3      	ldr	r3, [r4, #12]
 80040de:	3301      	adds	r3, #1
 80040e0:	60e3      	str	r3, [r4, #12]
 80040e2:	6923      	ldr	r3, [r4, #16]
 80040e4:	ebc9 0505 	rsb	r5, r9, r5
 80040e8:	4445      	add	r5, r8
 80040ea:	441d      	add	r5, r3
 80040ec:	6125      	str	r5, [r4, #16]
 80040ee:	2000      	movs	r0, #0
 80040f0:	e000      	b.n	80040f4 <_scanf_i+0x1cc>
 80040f2:	2001      	movs	r0, #1
 80040f4:	b007      	add	sp, #28
 80040f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fa:	bf00      	nop
 80040fc:	08004be0 	.word	0x08004be0
 8004100:	08004425 	.word	0x08004425
 8004104:	08004319 	.word	0x08004319
 8004108:	08004dab 	.word	0x08004dab

0800410c <lflush>:
 800410c:	8983      	ldrh	r3, [r0, #12]
 800410e:	f003 0309 	and.w	r3, r3, #9
 8004112:	2b09      	cmp	r3, #9
 8004114:	d101      	bne.n	800411a <lflush+0xe>
 8004116:	f000 bc47 	b.w	80049a8 <fflush>
 800411a:	2000      	movs	r0, #0
 800411c:	4770      	bx	lr
	...

08004120 <__srefill_r>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	460c      	mov	r4, r1
 8004124:	4605      	mov	r5, r0
 8004126:	b118      	cbz	r0, 8004130 <__srefill_r+0x10>
 8004128:	6983      	ldr	r3, [r0, #24]
 800412a:	b90b      	cbnz	r3, 8004130 <__srefill_r+0x10>
 800412c:	f7ff f844 	bl	80031b8 <__sinit>
 8004130:	4b3a      	ldr	r3, [pc, #232]	; (800421c <__srefill_r+0xfc>)
 8004132:	429c      	cmp	r4, r3
 8004134:	d101      	bne.n	800413a <__srefill_r+0x1a>
 8004136:	686c      	ldr	r4, [r5, #4]
 8004138:	e008      	b.n	800414c <__srefill_r+0x2c>
 800413a:	4b39      	ldr	r3, [pc, #228]	; (8004220 <__srefill_r+0x100>)
 800413c:	429c      	cmp	r4, r3
 800413e:	d101      	bne.n	8004144 <__srefill_r+0x24>
 8004140:	68ac      	ldr	r4, [r5, #8]
 8004142:	e003      	b.n	800414c <__srefill_r+0x2c>
 8004144:	4b37      	ldr	r3, [pc, #220]	; (8004224 <__srefill_r+0x104>)
 8004146:	429c      	cmp	r4, r3
 8004148:	bf08      	it	eq
 800414a:	68ec      	ldreq	r4, [r5, #12]
 800414c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004150:	2300      	movs	r3, #0
 8004152:	6063      	str	r3, [r4, #4]
 8004154:	b293      	uxth	r3, r2
 8004156:	069e      	lsls	r6, r3, #26
 8004158:	d45b      	bmi.n	8004212 <__srefill_r+0xf2>
 800415a:	0758      	lsls	r0, r3, #29
 800415c:	d41a      	bmi.n	8004194 <__srefill_r+0x74>
 800415e:	06d9      	lsls	r1, r3, #27
 8004160:	d405      	bmi.n	800416e <__srefill_r+0x4e>
 8004162:	2309      	movs	r3, #9
 8004164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004168:	602b      	str	r3, [r5, #0]
 800416a:	81a2      	strh	r2, [r4, #12]
 800416c:	e051      	b.n	8004212 <__srefill_r+0xf2>
 800416e:	071a      	lsls	r2, r3, #28
 8004170:	d50b      	bpl.n	800418a <__srefill_r+0x6a>
 8004172:	4621      	mov	r1, r4
 8004174:	4628      	mov	r0, r5
 8004176:	f000 fbed 	bl	8004954 <_fflush_r>
 800417a:	2800      	cmp	r0, #0
 800417c:	d149      	bne.n	8004212 <__srefill_r+0xf2>
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	60a0      	str	r0, [r4, #8]
 8004182:	f023 0308 	bic.w	r3, r3, #8
 8004186:	81a3      	strh	r3, [r4, #12]
 8004188:	61a0      	str	r0, [r4, #24]
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	81a3      	strh	r3, [r4, #12]
 8004192:	e010      	b.n	80041b6 <__srefill_r+0x96>
 8004194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004196:	b171      	cbz	r1, 80041b6 <__srefill_r+0x96>
 8004198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800419c:	4299      	cmp	r1, r3
 800419e:	d002      	beq.n	80041a6 <__srefill_r+0x86>
 80041a0:	4628      	mov	r0, r5
 80041a2:	f7fe fe67 	bl	8002e74 <_free_r>
 80041a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041a8:	6063      	str	r3, [r4, #4]
 80041aa:	2000      	movs	r0, #0
 80041ac:	6360      	str	r0, [r4, #52]	; 0x34
 80041ae:	b113      	cbz	r3, 80041b6 <__srefill_r+0x96>
 80041b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b6:	6923      	ldr	r3, [r4, #16]
 80041b8:	b91b      	cbnz	r3, 80041c2 <__srefill_r+0xa2>
 80041ba:	4621      	mov	r1, r4
 80041bc:	4628      	mov	r0, r5
 80041be:	f000 fc3b 	bl	8004a38 <__smakebuf_r>
 80041c2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80041c6:	b2be      	uxth	r6, r7
 80041c8:	07b3      	lsls	r3, r6, #30
 80041ca:	d00f      	beq.n	80041ec <__srefill_r+0xcc>
 80041cc:	2301      	movs	r3, #1
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	4b15      	ldr	r3, [pc, #84]	; (8004228 <__srefill_r+0x108>)
 80041d2:	4916      	ldr	r1, [pc, #88]	; (800422c <__srefill_r+0x10c>)
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	f006 0609 	and.w	r6, r6, #9
 80041da:	f7ff f859 	bl	8003290 <_fwalk>
 80041de:	2e09      	cmp	r6, #9
 80041e0:	81a7      	strh	r7, [r4, #12]
 80041e2:	d103      	bne.n	80041ec <__srefill_r+0xcc>
 80041e4:	4621      	mov	r1, r4
 80041e6:	4628      	mov	r0, r5
 80041e8:	f000 fb2c 	bl	8004844 <__sflush_r>
 80041ec:	6922      	ldr	r2, [r4, #16]
 80041ee:	6022      	str	r2, [r4, #0]
 80041f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80041f2:	6963      	ldr	r3, [r4, #20]
 80041f4:	6a21      	ldr	r1, [r4, #32]
 80041f6:	4628      	mov	r0, r5
 80041f8:	47b0      	blx	r6
 80041fa:	2800      	cmp	r0, #0
 80041fc:	6060      	str	r0, [r4, #4]
 80041fe:	dc0b      	bgt.n	8004218 <__srefill_r+0xf8>
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	bf17      	itett	ne
 8004204:	2200      	movne	r2, #0
 8004206:	f043 0320 	orreq.w	r3, r3, #32
 800420a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800420e:	6062      	strne	r2, [r4, #4]
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	f04f 30ff 	mov.w	r0, #4294967295
 8004216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004218:	2000      	movs	r0, #0
 800421a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421c:	08004d08 	.word	0x08004d08
 8004220:	08004d28 	.word	0x08004d28
 8004224:	08004d48 	.word	0x08004d48
 8004228:	08004d04 	.word	0x08004d04
 800422c:	0800410d 	.word	0x0800410d

08004230 <__sccl>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	780b      	ldrb	r3, [r1, #0]
 8004234:	2b5e      	cmp	r3, #94	; 0x5e
 8004236:	bf13      	iteet	ne
 8004238:	1c4a      	addne	r2, r1, #1
 800423a:	1c8a      	addeq	r2, r1, #2
 800423c:	784b      	ldrbeq	r3, [r1, #1]
 800423e:	2100      	movne	r1, #0
 8004240:	bf08      	it	eq
 8004242:	2101      	moveq	r1, #1
 8004244:	1e44      	subs	r4, r0, #1
 8004246:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800424a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800424e:	42ac      	cmp	r4, r5
 8004250:	d1fb      	bne.n	800424a <__sccl+0x1a>
 8004252:	b90b      	cbnz	r3, 8004258 <__sccl+0x28>
 8004254:	1e50      	subs	r0, r2, #1
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	f081 0401 	eor.w	r4, r1, #1
 800425c:	54c4      	strb	r4, [r0, r3]
 800425e:	4611      	mov	r1, r2
 8004260:	780d      	ldrb	r5, [r1, #0]
 8004262:	2d2d      	cmp	r5, #45	; 0x2d
 8004264:	f101 0201 	add.w	r2, r1, #1
 8004268:	d006      	beq.n	8004278 <__sccl+0x48>
 800426a:	2d5d      	cmp	r5, #93	; 0x5d
 800426c:	d00f      	beq.n	800428e <__sccl+0x5e>
 800426e:	b10d      	cbz	r5, 8004274 <__sccl+0x44>
 8004270:	462b      	mov	r3, r5
 8004272:	e7f3      	b.n	800425c <__sccl+0x2c>
 8004274:	4608      	mov	r0, r1
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	784e      	ldrb	r6, [r1, #1]
 800427a:	2e5d      	cmp	r6, #93	; 0x5d
 800427c:	d0f8      	beq.n	8004270 <__sccl+0x40>
 800427e:	42b3      	cmp	r3, r6
 8004280:	dcf6      	bgt.n	8004270 <__sccl+0x40>
 8004282:	3102      	adds	r1, #2
 8004284:	3301      	adds	r3, #1
 8004286:	429e      	cmp	r6, r3
 8004288:	54c4      	strb	r4, [r0, r3]
 800428a:	dcfb      	bgt.n	8004284 <__sccl+0x54>
 800428c:	e7e8      	b.n	8004260 <__sccl+0x30>
 800428e:	4610      	mov	r0, r2
 8004290:	bd70      	pop	{r4, r5, r6, pc}

08004292 <__sread>:
 8004292:	b510      	push	{r4, lr}
 8004294:	460c      	mov	r4, r1
 8004296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800429a:	f000 fc55 	bl	8004b48 <_read_r>
 800429e:	2800      	cmp	r0, #0
 80042a0:	bfab      	itete	ge
 80042a2:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042a4:	89a3      	ldrhlt	r3, [r4, #12]
 80042a6:	181b      	addge	r3, r3, r0
 80042a8:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042ac:	bfac      	ite	ge
 80042ae:	6563      	strge	r3, [r4, #84]	; 0x54
 80042b0:	81a3      	strhlt	r3, [r4, #12]
 80042b2:	bd10      	pop	{r4, pc}

080042b4 <__swrite>:
 80042b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b8:	461f      	mov	r7, r3
 80042ba:	898b      	ldrh	r3, [r1, #12]
 80042bc:	05db      	lsls	r3, r3, #23
 80042be:	4605      	mov	r5, r0
 80042c0:	460c      	mov	r4, r1
 80042c2:	4616      	mov	r6, r2
 80042c4:	d505      	bpl.n	80042d2 <__swrite+0x1e>
 80042c6:	2302      	movs	r3, #2
 80042c8:	2200      	movs	r2, #0
 80042ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ce:	f000 fb7d 	bl	80049cc <_lseek_r>
 80042d2:	89a3      	ldrh	r3, [r4, #12]
 80042d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	4632      	mov	r2, r6
 80042e0:	463b      	mov	r3, r7
 80042e2:	4628      	mov	r0, r5
 80042e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042e8:	f000 ba1c 	b.w	8004724 <_write_r>

080042ec <__sseek>:
 80042ec:	b510      	push	{r4, lr}
 80042ee:	460c      	mov	r4, r1
 80042f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f4:	f000 fb6a 	bl	80049cc <_lseek_r>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	bf15      	itete	ne
 80042fe:	6560      	strne	r0, [r4, #84]	; 0x54
 8004300:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004304:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004308:	81a3      	strheq	r3, [r4, #12]
 800430a:	bf18      	it	ne
 800430c:	81a3      	strhne	r3, [r4, #12]
 800430e:	bd10      	pop	{r4, pc}

08004310 <__sclose>:
 8004310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004314:	f000 ba86 	b.w	8004824 <_close_r>

08004318 <_strtol_r>:
 8004318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800431c:	4680      	mov	r8, r0
 800431e:	4840      	ldr	r0, [pc, #256]	; (8004420 <_strtol_r+0x108>)
 8004320:	f8d0 9000 	ldr.w	r9, [r0]
 8004324:	460f      	mov	r7, r1
 8004326:	463d      	mov	r5, r7
 8004328:	f815 4b01 	ldrb.w	r4, [r5], #1
 800432c:	eb09 0004 	add.w	r0, r9, r4
 8004330:	7840      	ldrb	r0, [r0, #1]
 8004332:	f000 0008 	and.w	r0, r0, #8
 8004336:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 800433a:	b108      	cbz	r0, 8004340 <_strtol_r+0x28>
 800433c:	462f      	mov	r7, r5
 800433e:	e7f2      	b.n	8004326 <_strtol_r+0xe>
 8004340:	2c2d      	cmp	r4, #45	; 0x2d
 8004342:	d103      	bne.n	800434c <_strtol_r+0x34>
 8004344:	1cbd      	adds	r5, r7, #2
 8004346:	787c      	ldrb	r4, [r7, #1]
 8004348:	2601      	movs	r6, #1
 800434a:	e003      	b.n	8004354 <_strtol_r+0x3c>
 800434c:	2c2b      	cmp	r4, #43	; 0x2b
 800434e:	bf04      	itt	eq
 8004350:	787c      	ldrbeq	r4, [r7, #1]
 8004352:	1cbd      	addeq	r5, r7, #2
 8004354:	b113      	cbz	r3, 800435c <_strtol_r+0x44>
 8004356:	2b10      	cmp	r3, #16
 8004358:	d10a      	bne.n	8004370 <_strtol_r+0x58>
 800435a:	e05b      	b.n	8004414 <_strtol_r+0xfc>
 800435c:	2c30      	cmp	r4, #48	; 0x30
 800435e:	d157      	bne.n	8004410 <_strtol_r+0xf8>
 8004360:	7828      	ldrb	r0, [r5, #0]
 8004362:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004366:	2858      	cmp	r0, #88	; 0x58
 8004368:	d14d      	bne.n	8004406 <_strtol_r+0xee>
 800436a:	786c      	ldrb	r4, [r5, #1]
 800436c:	2310      	movs	r3, #16
 800436e:	3502      	adds	r5, #2
 8004370:	2e00      	cmp	r6, #0
 8004372:	bf14      	ite	ne
 8004374:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8004378:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 800437c:	2700      	movs	r7, #0
 800437e:	fbbc faf3 	udiv	sl, ip, r3
 8004382:	4638      	mov	r0, r7
 8004384:	fb03 cc1a 	mls	ip, r3, sl, ip
 8004388:	eb09 0e04 	add.w	lr, r9, r4
 800438c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8004390:	f01e 0f04 	tst.w	lr, #4
 8004394:	d001      	beq.n	800439a <_strtol_r+0x82>
 8004396:	3c30      	subs	r4, #48	; 0x30
 8004398:	e00b      	b.n	80043b2 <_strtol_r+0x9a>
 800439a:	f01e 0e03 	ands.w	lr, lr, #3
 800439e:	d01b      	beq.n	80043d8 <_strtol_r+0xc0>
 80043a0:	f1be 0f01 	cmp.w	lr, #1
 80043a4:	bf0c      	ite	eq
 80043a6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80043aa:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80043ae:	ebce 0404 	rsb	r4, lr, r4
 80043b2:	42a3      	cmp	r3, r4
 80043b4:	dd10      	ble.n	80043d8 <_strtol_r+0xc0>
 80043b6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80043ba:	d00a      	beq.n	80043d2 <_strtol_r+0xba>
 80043bc:	4550      	cmp	r0, sl
 80043be:	d806      	bhi.n	80043ce <_strtol_r+0xb6>
 80043c0:	d101      	bne.n	80043c6 <_strtol_r+0xae>
 80043c2:	4564      	cmp	r4, ip
 80043c4:	dc03      	bgt.n	80043ce <_strtol_r+0xb6>
 80043c6:	fb03 4000 	mla	r0, r3, r0, r4
 80043ca:	2701      	movs	r7, #1
 80043cc:	e001      	b.n	80043d2 <_strtol_r+0xba>
 80043ce:	f04f 37ff 	mov.w	r7, #4294967295
 80043d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043d6:	e7d7      	b.n	8004388 <_strtol_r+0x70>
 80043d8:	1c7b      	adds	r3, r7, #1
 80043da:	d10c      	bne.n	80043f6 <_strtol_r+0xde>
 80043dc:	2e00      	cmp	r6, #0
 80043de:	f04f 0322 	mov.w	r3, #34	; 0x22
 80043e2:	bf14      	ite	ne
 80043e4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80043e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80043ec:	f8c8 3000 	str.w	r3, [r8]
 80043f0:	b92a      	cbnz	r2, 80043fe <_strtol_r+0xe6>
 80043f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f6:	b106      	cbz	r6, 80043fa <_strtol_r+0xe2>
 80043f8:	4240      	negs	r0, r0
 80043fa:	b172      	cbz	r2, 800441a <_strtol_r+0x102>
 80043fc:	b107      	cbz	r7, 8004400 <_strtol_r+0xe8>
 80043fe:	1e69      	subs	r1, r5, #1
 8004400:	6011      	str	r1, [r2, #0]
 8004402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004406:	2430      	movs	r4, #48	; 0x30
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1b1      	bne.n	8004370 <_strtol_r+0x58>
 800440c:	2308      	movs	r3, #8
 800440e:	e7af      	b.n	8004370 <_strtol_r+0x58>
 8004410:	230a      	movs	r3, #10
 8004412:	e7ad      	b.n	8004370 <_strtol_r+0x58>
 8004414:	2c30      	cmp	r4, #48	; 0x30
 8004416:	d0a3      	beq.n	8004360 <_strtol_r+0x48>
 8004418:	e7aa      	b.n	8004370 <_strtol_r+0x58>
 800441a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441e:	bf00      	nop
 8004420:	20000068 	.word	0x20000068

08004424 <_strtoul_r>:
 8004424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004428:	4680      	mov	r8, r0
 800442a:	483c      	ldr	r0, [pc, #240]	; (800451c <_strtoul_r+0xf8>)
 800442c:	f8d0 9000 	ldr.w	r9, [r0]
 8004430:	460e      	mov	r6, r1
 8004432:	4635      	mov	r5, r6
 8004434:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004438:	eb09 0004 	add.w	r0, r9, r4
 800443c:	7840      	ldrb	r0, [r0, #1]
 800443e:	f000 0008 	and.w	r0, r0, #8
 8004442:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8004446:	b108      	cbz	r0, 800444c <_strtoul_r+0x28>
 8004448:	462e      	mov	r6, r5
 800444a:	e7f2      	b.n	8004432 <_strtoul_r+0xe>
 800444c:	2c2d      	cmp	r4, #45	; 0x2d
 800444e:	d103      	bne.n	8004458 <_strtoul_r+0x34>
 8004450:	1cb5      	adds	r5, r6, #2
 8004452:	7874      	ldrb	r4, [r6, #1]
 8004454:	2701      	movs	r7, #1
 8004456:	e003      	b.n	8004460 <_strtoul_r+0x3c>
 8004458:	2c2b      	cmp	r4, #43	; 0x2b
 800445a:	bf04      	itt	eq
 800445c:	7874      	ldrbeq	r4, [r6, #1]
 800445e:	1cb5      	addeq	r5, r6, #2
 8004460:	b113      	cbz	r3, 8004468 <_strtoul_r+0x44>
 8004462:	2b10      	cmp	r3, #16
 8004464:	d10a      	bne.n	800447c <_strtoul_r+0x58>
 8004466:	e053      	b.n	8004510 <_strtoul_r+0xec>
 8004468:	2c30      	cmp	r4, #48	; 0x30
 800446a:	d14f      	bne.n	800450c <_strtoul_r+0xe8>
 800446c:	7828      	ldrb	r0, [r5, #0]
 800446e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004472:	2858      	cmp	r0, #88	; 0x58
 8004474:	d145      	bne.n	8004502 <_strtoul_r+0xde>
 8004476:	786c      	ldrb	r4, [r5, #1]
 8004478:	2310      	movs	r3, #16
 800447a:	3502      	adds	r5, #2
 800447c:	f04f 3cff 	mov.w	ip, #4294967295
 8004480:	2600      	movs	r6, #0
 8004482:	fbbc fcf3 	udiv	ip, ip, r3
 8004486:	fb03 fa0c 	mul.w	sl, r3, ip
 800448a:	ea6f 0a0a 	mvn.w	sl, sl
 800448e:	4630      	mov	r0, r6
 8004490:	eb09 0e04 	add.w	lr, r9, r4
 8004494:	f89e e001 	ldrb.w	lr, [lr, #1]
 8004498:	f01e 0f04 	tst.w	lr, #4
 800449c:	d001      	beq.n	80044a2 <_strtoul_r+0x7e>
 800449e:	3c30      	subs	r4, #48	; 0x30
 80044a0:	e00b      	b.n	80044ba <_strtoul_r+0x96>
 80044a2:	f01e 0e03 	ands.w	lr, lr, #3
 80044a6:	d01a      	beq.n	80044de <_strtoul_r+0xba>
 80044a8:	f1be 0f01 	cmp.w	lr, #1
 80044ac:	bf0c      	ite	eq
 80044ae:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80044b2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80044b6:	ebce 0404 	rsb	r4, lr, r4
 80044ba:	42a3      	cmp	r3, r4
 80044bc:	dd0f      	ble.n	80044de <_strtoul_r+0xba>
 80044be:	2e00      	cmp	r6, #0
 80044c0:	db08      	blt.n	80044d4 <_strtoul_r+0xb0>
 80044c2:	4560      	cmp	r0, ip
 80044c4:	d806      	bhi.n	80044d4 <_strtoul_r+0xb0>
 80044c6:	d101      	bne.n	80044cc <_strtoul_r+0xa8>
 80044c8:	4554      	cmp	r4, sl
 80044ca:	dc03      	bgt.n	80044d4 <_strtoul_r+0xb0>
 80044cc:	fb03 4000 	mla	r0, r3, r0, r4
 80044d0:	2601      	movs	r6, #1
 80044d2:	e001      	b.n	80044d8 <_strtoul_r+0xb4>
 80044d4:	f04f 36ff 	mov.w	r6, #4294967295
 80044d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044dc:	e7d8      	b.n	8004490 <_strtoul_r+0x6c>
 80044de:	2e00      	cmp	r6, #0
 80044e0:	da07      	bge.n	80044f2 <_strtoul_r+0xce>
 80044e2:	2322      	movs	r3, #34	; 0x22
 80044e4:	f8c8 3000 	str.w	r3, [r8]
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	b92a      	cbnz	r2, 80044fa <_strtoul_r+0xd6>
 80044ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f2:	b107      	cbz	r7, 80044f6 <_strtoul_r+0xd2>
 80044f4:	4240      	negs	r0, r0
 80044f6:	b172      	cbz	r2, 8004516 <_strtoul_r+0xf2>
 80044f8:	b106      	cbz	r6, 80044fc <_strtoul_r+0xd8>
 80044fa:	1e69      	subs	r1, r5, #1
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004502:	2430      	movs	r4, #48	; 0x30
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1b9      	bne.n	800447c <_strtoul_r+0x58>
 8004508:	2308      	movs	r3, #8
 800450a:	e7b7      	b.n	800447c <_strtoul_r+0x58>
 800450c:	230a      	movs	r3, #10
 800450e:	e7b5      	b.n	800447c <_strtoul_r+0x58>
 8004510:	2c30      	cmp	r4, #48	; 0x30
 8004512:	d0ab      	beq.n	800446c <_strtoul_r+0x48>
 8004514:	e7b2      	b.n	800447c <_strtoul_r+0x58>
 8004516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451a:	bf00      	nop
 800451c:	20000068 	.word	0x20000068

08004520 <__submore>:
 8004520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004524:	460c      	mov	r4, r1
 8004526:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800452c:	4299      	cmp	r1, r3
 800452e:	d11c      	bne.n	800456a <__submore+0x4a>
 8004530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004534:	f7fe fcec 	bl	8002f10 <_malloc_r>
 8004538:	b918      	cbnz	r0, 8004542 <__submore+0x22>
 800453a:	f04f 30ff 	mov.w	r0, #4294967295
 800453e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004546:	63a3      	str	r3, [r4, #56]	; 0x38
 8004548:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800454c:	6360      	str	r0, [r4, #52]	; 0x34
 800454e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004552:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004556:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800455a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800455e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004562:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004566:	6020      	str	r0, [r4, #0]
 8004568:	e012      	b.n	8004590 <__submore+0x70>
 800456a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800456c:	0077      	lsls	r7, r6, #1
 800456e:	463a      	mov	r2, r7
 8004570:	f000 fac4 	bl	8004afc <_realloc_r>
 8004574:	4605      	mov	r5, r0
 8004576:	2800      	cmp	r0, #0
 8004578:	d0df      	beq.n	800453a <__submore+0x1a>
 800457a:	eb00 0806 	add.w	r8, r0, r6
 800457e:	4601      	mov	r1, r0
 8004580:	4632      	mov	r2, r6
 8004582:	4640      	mov	r0, r8
 8004584:	f000 fa94 	bl	8004ab0 <memcpy>
 8004588:	f8c4 8000 	str.w	r8, [r4]
 800458c:	6365      	str	r5, [r4, #52]	; 0x34
 800458e:	63a7      	str	r7, [r4, #56]	; 0x38
 8004590:	2000      	movs	r0, #0
 8004592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004598 <_ungetc_r>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	1c4d      	adds	r5, r1, #1
 800459c:	4606      	mov	r6, r0
 800459e:	460f      	mov	r7, r1
 80045a0:	4614      	mov	r4, r2
 80045a2:	d102      	bne.n	80045aa <_ungetc_r+0x12>
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045aa:	b118      	cbz	r0, 80045b4 <_ungetc_r+0x1c>
 80045ac:	6983      	ldr	r3, [r0, #24]
 80045ae:	b90b      	cbnz	r3, 80045b4 <_ungetc_r+0x1c>
 80045b0:	f7fe fe02 	bl	80031b8 <__sinit>
 80045b4:	4b2e      	ldr	r3, [pc, #184]	; (8004670 <_ungetc_r+0xd8>)
 80045b6:	429c      	cmp	r4, r3
 80045b8:	d101      	bne.n	80045be <_ungetc_r+0x26>
 80045ba:	6874      	ldr	r4, [r6, #4]
 80045bc:	e008      	b.n	80045d0 <_ungetc_r+0x38>
 80045be:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <_ungetc_r+0xdc>)
 80045c0:	429c      	cmp	r4, r3
 80045c2:	d101      	bne.n	80045c8 <_ungetc_r+0x30>
 80045c4:	68b4      	ldr	r4, [r6, #8]
 80045c6:	e003      	b.n	80045d0 <_ungetc_r+0x38>
 80045c8:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <_ungetc_r+0xe0>)
 80045ca:	429c      	cmp	r4, r3
 80045cc:	bf08      	it	eq
 80045ce:	68f4      	ldreq	r4, [r6, #12]
 80045d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d4:	f023 0320 	bic.w	r3, r3, #32
 80045d8:	81a3      	strh	r3, [r4, #12]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	0759      	lsls	r1, r3, #29
 80045de:	d413      	bmi.n	8004608 <_ungetc_r+0x70>
 80045e0:	06da      	lsls	r2, r3, #27
 80045e2:	d5df      	bpl.n	80045a4 <_ungetc_r+0xc>
 80045e4:	071b      	lsls	r3, r3, #28
 80045e6:	d50b      	bpl.n	8004600 <_ungetc_r+0x68>
 80045e8:	4621      	mov	r1, r4
 80045ea:	4630      	mov	r0, r6
 80045ec:	f000 f9b2 	bl	8004954 <_fflush_r>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d1d7      	bne.n	80045a4 <_ungetc_r+0xc>
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	60a0      	str	r0, [r4, #8]
 80045f8:	f023 0308 	bic.w	r3, r3, #8
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	61a0      	str	r0, [r4, #24]
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	f043 0304 	orr.w	r3, r3, #4
 8004606:	81a3      	strh	r3, [r4, #12]
 8004608:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800460a:	6862      	ldr	r2, [r4, #4]
 800460c:	b2fd      	uxtb	r5, r7
 800460e:	b18b      	cbz	r3, 8004634 <_ungetc_r+0x9c>
 8004610:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004612:	429a      	cmp	r2, r3
 8004614:	da07      	bge.n	8004626 <_ungetc_r+0x8e>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	1e5a      	subs	r2, r3, #1
 800461a:	6022      	str	r2, [r4, #0]
 800461c:	f803 7c01 	strb.w	r7, [r3, #-1]
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	3301      	adds	r3, #1
 8004624:	e020      	b.n	8004668 <_ungetc_r+0xd0>
 8004626:	4621      	mov	r1, r4
 8004628:	4630      	mov	r0, r6
 800462a:	f7ff ff79 	bl	8004520 <__submore>
 800462e:	2800      	cmp	r0, #0
 8004630:	d0f1      	beq.n	8004616 <_ungetc_r+0x7e>
 8004632:	e7b7      	b.n	80045a4 <_ungetc_r+0xc>
 8004634:	6921      	ldr	r1, [r4, #16]
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	b151      	cbz	r1, 8004650 <_ungetc_r+0xb8>
 800463a:	4299      	cmp	r1, r3
 800463c:	d208      	bcs.n	8004650 <_ungetc_r+0xb8>
 800463e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004642:	428d      	cmp	r5, r1
 8004644:	d104      	bne.n	8004650 <_ungetc_r+0xb8>
 8004646:	3b01      	subs	r3, #1
 8004648:	3201      	adds	r2, #1
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	6062      	str	r2, [r4, #4]
 800464e:	e00c      	b.n	800466a <_ungetc_r+0xd2>
 8004650:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004656:	6363      	str	r3, [r4, #52]	; 0x34
 8004658:	2303      	movs	r3, #3
 800465a:	63a3      	str	r3, [r4, #56]	; 0x38
 800465c:	4623      	mov	r3, r4
 800465e:	6422      	str	r2, [r4, #64]	; 0x40
 8004660:	f803 7f46 	strb.w	r7, [r3, #70]!
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	2301      	movs	r3, #1
 8004668:	6063      	str	r3, [r4, #4]
 800466a:	4628      	mov	r0, r5
 800466c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466e:	bf00      	nop
 8004670:	08004d08 	.word	0x08004d08
 8004674:	08004d28 	.word	0x08004d28
 8004678:	08004d48 	.word	0x08004d48

0800467c <__swbuf_r>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	460f      	mov	r7, r1
 8004680:	4614      	mov	r4, r2
 8004682:	4606      	mov	r6, r0
 8004684:	b118      	cbz	r0, 800468e <__swbuf_r+0x12>
 8004686:	6983      	ldr	r3, [r0, #24]
 8004688:	b90b      	cbnz	r3, 800468e <__swbuf_r+0x12>
 800468a:	f7fe fd95 	bl	80031b8 <__sinit>
 800468e:	4b22      	ldr	r3, [pc, #136]	; (8004718 <__swbuf_r+0x9c>)
 8004690:	429c      	cmp	r4, r3
 8004692:	d101      	bne.n	8004698 <__swbuf_r+0x1c>
 8004694:	6874      	ldr	r4, [r6, #4]
 8004696:	e008      	b.n	80046aa <__swbuf_r+0x2e>
 8004698:	4b20      	ldr	r3, [pc, #128]	; (800471c <__swbuf_r+0xa0>)
 800469a:	429c      	cmp	r4, r3
 800469c:	d101      	bne.n	80046a2 <__swbuf_r+0x26>
 800469e:	68b4      	ldr	r4, [r6, #8]
 80046a0:	e003      	b.n	80046aa <__swbuf_r+0x2e>
 80046a2:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <__swbuf_r+0xa4>)
 80046a4:	429c      	cmp	r4, r3
 80046a6:	bf08      	it	eq
 80046a8:	68f4      	ldreq	r4, [r6, #12]
 80046aa:	69a3      	ldr	r3, [r4, #24]
 80046ac:	60a3      	str	r3, [r4, #8]
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	071a      	lsls	r2, r3, #28
 80046b2:	d509      	bpl.n	80046c8 <__swbuf_r+0x4c>
 80046b4:	6923      	ldr	r3, [r4, #16]
 80046b6:	b13b      	cbz	r3, 80046c8 <__swbuf_r+0x4c>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	6920      	ldr	r0, [r4, #16]
 80046bc:	1a18      	subs	r0, r3, r0
 80046be:	6963      	ldr	r3, [r4, #20]
 80046c0:	4298      	cmp	r0, r3
 80046c2:	b2fd      	uxtb	r5, r7
 80046c4:	db0f      	blt.n	80046e6 <__swbuf_r+0x6a>
 80046c6:	e008      	b.n	80046da <__swbuf_r+0x5e>
 80046c8:	4621      	mov	r1, r4
 80046ca:	4630      	mov	r0, r6
 80046cc:	f000 f83c 	bl	8004748 <__swsetup_r>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d0f1      	beq.n	80046b8 <__swbuf_r+0x3c>
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046da:	4621      	mov	r1, r4
 80046dc:	4630      	mov	r0, r6
 80046de:	f000 f939 	bl	8004954 <_fflush_r>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d1f6      	bne.n	80046d4 <__swbuf_r+0x58>
 80046e6:	68a3      	ldr	r3, [r4, #8]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	60a3      	str	r3, [r4, #8]
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	6022      	str	r2, [r4, #0]
 80046f2:	701f      	strb	r7, [r3, #0]
 80046f4:	6962      	ldr	r2, [r4, #20]
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <__swbuf_r+0x8a>
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	07db      	lsls	r3, r3, #31
 8004700:	d507      	bpl.n	8004712 <__swbuf_r+0x96>
 8004702:	2d0a      	cmp	r5, #10
 8004704:	d105      	bne.n	8004712 <__swbuf_r+0x96>
 8004706:	4621      	mov	r1, r4
 8004708:	4630      	mov	r0, r6
 800470a:	f000 f923 	bl	8004954 <_fflush_r>
 800470e:	2800      	cmp	r0, #0
 8004710:	d1e0      	bne.n	80046d4 <__swbuf_r+0x58>
 8004712:	4628      	mov	r0, r5
 8004714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004716:	bf00      	nop
 8004718:	08004d08 	.word	0x08004d08
 800471c:	08004d28 	.word	0x08004d28
 8004720:	08004d48 	.word	0x08004d48

08004724 <_write_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4c07      	ldr	r4, [pc, #28]	; (8004744 <_write_r+0x20>)
 8004728:	4605      	mov	r5, r0
 800472a:	4608      	mov	r0, r1
 800472c:	4611      	mov	r1, r2
 800472e:	2200      	movs	r2, #0
 8004730:	6022      	str	r2, [r4, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	f7fe fa78 	bl	8002c28 <_write>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d102      	bne.n	8004742 <_write_r+0x1e>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	b103      	cbz	r3, 8004742 <_write_r+0x1e>
 8004740:	602b      	str	r3, [r5, #0]
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	200001b8 	.word	0x200001b8

08004748 <__swsetup_r>:
 8004748:	4b32      	ldr	r3, [pc, #200]	; (8004814 <__swsetup_r+0xcc>)
 800474a:	b570      	push	{r4, r5, r6, lr}
 800474c:	681d      	ldr	r5, [r3, #0]
 800474e:	4606      	mov	r6, r0
 8004750:	460c      	mov	r4, r1
 8004752:	b125      	cbz	r5, 800475e <__swsetup_r+0x16>
 8004754:	69ab      	ldr	r3, [r5, #24]
 8004756:	b913      	cbnz	r3, 800475e <__swsetup_r+0x16>
 8004758:	4628      	mov	r0, r5
 800475a:	f7fe fd2d 	bl	80031b8 <__sinit>
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <__swsetup_r+0xd0>)
 8004760:	429c      	cmp	r4, r3
 8004762:	d101      	bne.n	8004768 <__swsetup_r+0x20>
 8004764:	686c      	ldr	r4, [r5, #4]
 8004766:	e008      	b.n	800477a <__swsetup_r+0x32>
 8004768:	4b2c      	ldr	r3, [pc, #176]	; (800481c <__swsetup_r+0xd4>)
 800476a:	429c      	cmp	r4, r3
 800476c:	d101      	bne.n	8004772 <__swsetup_r+0x2a>
 800476e:	68ac      	ldr	r4, [r5, #8]
 8004770:	e003      	b.n	800477a <__swsetup_r+0x32>
 8004772:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <__swsetup_r+0xd8>)
 8004774:	429c      	cmp	r4, r3
 8004776:	bf08      	it	eq
 8004778:	68ec      	ldreq	r4, [r5, #12]
 800477a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800477e:	b29a      	uxth	r2, r3
 8004780:	0715      	lsls	r5, r2, #28
 8004782:	d41d      	bmi.n	80047c0 <__swsetup_r+0x78>
 8004784:	06d0      	lsls	r0, r2, #27
 8004786:	d402      	bmi.n	800478e <__swsetup_r+0x46>
 8004788:	2209      	movs	r2, #9
 800478a:	6032      	str	r2, [r6, #0]
 800478c:	e03a      	b.n	8004804 <__swsetup_r+0xbc>
 800478e:	0751      	lsls	r1, r2, #29
 8004790:	d512      	bpl.n	80047b8 <__swsetup_r+0x70>
 8004792:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004794:	b141      	cbz	r1, 80047a8 <__swsetup_r+0x60>
 8004796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800479a:	4299      	cmp	r1, r3
 800479c:	d002      	beq.n	80047a4 <__swsetup_r+0x5c>
 800479e:	4630      	mov	r0, r6
 80047a0:	f7fe fb68 	bl	8002e74 <_free_r>
 80047a4:	2300      	movs	r3, #0
 80047a6:	6363      	str	r3, [r4, #52]	; 0x34
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	2300      	movs	r3, #0
 80047b2:	6063      	str	r3, [r4, #4]
 80047b4:	6923      	ldr	r3, [r4, #16]
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	f043 0308 	orr.w	r3, r3, #8
 80047be:	81a3      	strh	r3, [r4, #12]
 80047c0:	6923      	ldr	r3, [r4, #16]
 80047c2:	b94b      	cbnz	r3, 80047d8 <__swsetup_r+0x90>
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ce:	d003      	beq.n	80047d8 <__swsetup_r+0x90>
 80047d0:	4621      	mov	r1, r4
 80047d2:	4630      	mov	r0, r6
 80047d4:	f000 f930 	bl	8004a38 <__smakebuf_r>
 80047d8:	89a2      	ldrh	r2, [r4, #12]
 80047da:	f012 0301 	ands.w	r3, r2, #1
 80047de:	d005      	beq.n	80047ec <__swsetup_r+0xa4>
 80047e0:	2300      	movs	r3, #0
 80047e2:	60a3      	str	r3, [r4, #8]
 80047e4:	6963      	ldr	r3, [r4, #20]
 80047e6:	425b      	negs	r3, r3
 80047e8:	61a3      	str	r3, [r4, #24]
 80047ea:	e003      	b.n	80047f4 <__swsetup_r+0xac>
 80047ec:	0792      	lsls	r2, r2, #30
 80047ee:	bf58      	it	pl
 80047f0:	6963      	ldrpl	r3, [r4, #20]
 80047f2:	60a3      	str	r3, [r4, #8]
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	b95b      	cbnz	r3, 8004810 <__swsetup_r+0xc8>
 80047f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047fc:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8004800:	b280      	uxth	r0, r0
 8004802:	b130      	cbz	r0, 8004812 <__swsetup_r+0xca>
 8004804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	f04f 30ff 	mov.w	r0, #4294967295
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	2000      	movs	r0, #0
 8004812:	bd70      	pop	{r4, r5, r6, pc}
 8004814:	20000064 	.word	0x20000064
 8004818:	08004d08 	.word	0x08004d08
 800481c:	08004d28 	.word	0x08004d28
 8004820:	08004d48 	.word	0x08004d48

08004824 <_close_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4c06      	ldr	r4, [pc, #24]	; (8004840 <_close_r+0x1c>)
 8004828:	2300      	movs	r3, #0
 800482a:	4605      	mov	r5, r0
 800482c:	4608      	mov	r0, r1
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	f7fe fa32 	bl	8002c98 <_close>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_close_r+0x1a>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	b103      	cbz	r3, 800483e <_close_r+0x1a>
 800483c:	602b      	str	r3, [r5, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	200001b8 	.word	0x200001b8

08004844 <__sflush_r>:
 8004844:	898a      	ldrh	r2, [r1, #12]
 8004846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484a:	4605      	mov	r5, r0
 800484c:	0710      	lsls	r0, r2, #28
 800484e:	460c      	mov	r4, r1
 8004850:	d459      	bmi.n	8004906 <__sflush_r+0xc2>
 8004852:	684b      	ldr	r3, [r1, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	dc02      	bgt.n	800485e <__sflush_r+0x1a>
 8004858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	dd17      	ble.n	800488e <__sflush_r+0x4a>
 800485e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004860:	b1ae      	cbz	r6, 800488e <__sflush_r+0x4a>
 8004862:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004866:	2300      	movs	r3, #0
 8004868:	b292      	uxth	r2, r2
 800486a:	682f      	ldr	r7, [r5, #0]
 800486c:	602b      	str	r3, [r5, #0]
 800486e:	b10a      	cbz	r2, 8004874 <__sflush_r+0x30>
 8004870:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004872:	e015      	b.n	80048a0 <__sflush_r+0x5c>
 8004874:	6a21      	ldr	r1, [r4, #32]
 8004876:	2301      	movs	r3, #1
 8004878:	4628      	mov	r0, r5
 800487a:	47b0      	blx	r6
 800487c:	1c41      	adds	r1, r0, #1
 800487e:	d10f      	bne.n	80048a0 <__sflush_r+0x5c>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b16b      	cbz	r3, 80048a0 <__sflush_r+0x5c>
 8004884:	2b1d      	cmp	r3, #29
 8004886:	d001      	beq.n	800488c <__sflush_r+0x48>
 8004888:	2b16      	cmp	r3, #22
 800488a:	d103      	bne.n	8004894 <__sflush_r+0x50>
 800488c:	602f      	str	r7, [r5, #0]
 800488e:	2000      	movs	r0, #0
 8004890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	075a      	lsls	r2, r3, #29
 80048a4:	d505      	bpl.n	80048b2 <__sflush_r+0x6e>
 80048a6:	6863      	ldr	r3, [r4, #4]
 80048a8:	1ac0      	subs	r0, r0, r3
 80048aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048ac:	b10b      	cbz	r3, 80048b2 <__sflush_r+0x6e>
 80048ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048b0:	1ac0      	subs	r0, r0, r3
 80048b2:	2300      	movs	r3, #0
 80048b4:	4602      	mov	r2, r0
 80048b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048b8:	6a21      	ldr	r1, [r4, #32]
 80048ba:	4628      	mov	r0, r5
 80048bc:	47b0      	blx	r6
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	d106      	bne.n	80048d2 <__sflush_r+0x8e>
 80048c4:	6829      	ldr	r1, [r5, #0]
 80048c6:	291d      	cmp	r1, #29
 80048c8:	d83a      	bhi.n	8004940 <__sflush_r+0xfc>
 80048ca:	4a21      	ldr	r2, [pc, #132]	; (8004950 <__sflush_r+0x10c>)
 80048cc:	40ca      	lsrs	r2, r1
 80048ce:	07d6      	lsls	r6, r2, #31
 80048d0:	d536      	bpl.n	8004940 <__sflush_r+0xfc>
 80048d2:	2200      	movs	r2, #0
 80048d4:	6062      	str	r2, [r4, #4]
 80048d6:	04d9      	lsls	r1, r3, #19
 80048d8:	6922      	ldr	r2, [r4, #16]
 80048da:	6022      	str	r2, [r4, #0]
 80048dc:	d504      	bpl.n	80048e8 <__sflush_r+0xa4>
 80048de:	1c42      	adds	r2, r0, #1
 80048e0:	d101      	bne.n	80048e6 <__sflush_r+0xa2>
 80048e2:	682b      	ldr	r3, [r5, #0]
 80048e4:	b903      	cbnz	r3, 80048e8 <__sflush_r+0xa4>
 80048e6:	6560      	str	r0, [r4, #84]	; 0x54
 80048e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ea:	602f      	str	r7, [r5, #0]
 80048ec:	2900      	cmp	r1, #0
 80048ee:	d0ce      	beq.n	800488e <__sflush_r+0x4a>
 80048f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048f4:	4299      	cmp	r1, r3
 80048f6:	d002      	beq.n	80048fe <__sflush_r+0xba>
 80048f8:	4628      	mov	r0, r5
 80048fa:	f7fe fabb 	bl	8002e74 <_free_r>
 80048fe:	2000      	movs	r0, #0
 8004900:	6360      	str	r0, [r4, #52]	; 0x34
 8004902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004906:	690f      	ldr	r7, [r1, #16]
 8004908:	2f00      	cmp	r7, #0
 800490a:	d0c0      	beq.n	800488e <__sflush_r+0x4a>
 800490c:	0793      	lsls	r3, r2, #30
 800490e:	680e      	ldr	r6, [r1, #0]
 8004910:	bf08      	it	eq
 8004912:	694b      	ldreq	r3, [r1, #20]
 8004914:	600f      	str	r7, [r1, #0]
 8004916:	bf18      	it	ne
 8004918:	2300      	movne	r3, #0
 800491a:	ebc7 0806 	rsb	r8, r7, r6
 800491e:	608b      	str	r3, [r1, #8]
 8004920:	e002      	b.n	8004928 <__sflush_r+0xe4>
 8004922:	4407      	add	r7, r0
 8004924:	ebc0 0808 	rsb	r8, r0, r8
 8004928:	f1b8 0f00 	cmp.w	r8, #0
 800492c:	ddaf      	ble.n	800488e <__sflush_r+0x4a>
 800492e:	4643      	mov	r3, r8
 8004930:	463a      	mov	r2, r7
 8004932:	6a21      	ldr	r1, [r4, #32]
 8004934:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004936:	4628      	mov	r0, r5
 8004938:	47b0      	blx	r6
 800493a:	2800      	cmp	r0, #0
 800493c:	dcf1      	bgt.n	8004922 <__sflush_r+0xde>
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004944:	81a3      	strh	r3, [r4, #12]
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800494e:	bf00      	nop
 8004950:	20400001 	.word	0x20400001

08004954 <_fflush_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	690b      	ldr	r3, [r1, #16]
 8004958:	4605      	mov	r5, r0
 800495a:	460c      	mov	r4, r1
 800495c:	b1db      	cbz	r3, 8004996 <_fflush_r+0x42>
 800495e:	b118      	cbz	r0, 8004968 <_fflush_r+0x14>
 8004960:	6983      	ldr	r3, [r0, #24]
 8004962:	b90b      	cbnz	r3, 8004968 <_fflush_r+0x14>
 8004964:	f7fe fc28 	bl	80031b8 <__sinit>
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <_fflush_r+0x48>)
 800496a:	429c      	cmp	r4, r3
 800496c:	d101      	bne.n	8004972 <_fflush_r+0x1e>
 800496e:	686c      	ldr	r4, [r5, #4]
 8004970:	e008      	b.n	8004984 <_fflush_r+0x30>
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <_fflush_r+0x4c>)
 8004974:	429c      	cmp	r4, r3
 8004976:	d101      	bne.n	800497c <_fflush_r+0x28>
 8004978:	68ac      	ldr	r4, [r5, #8]
 800497a:	e003      	b.n	8004984 <_fflush_r+0x30>
 800497c:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <_fflush_r+0x50>)
 800497e:	429c      	cmp	r4, r3
 8004980:	bf08      	it	eq
 8004982:	68ec      	ldreq	r4, [r5, #12]
 8004984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004988:	b12b      	cbz	r3, 8004996 <_fflush_r+0x42>
 800498a:	4621      	mov	r1, r4
 800498c:	4628      	mov	r0, r5
 800498e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004992:	f7ff bf57 	b.w	8004844 <__sflush_r>
 8004996:	2000      	movs	r0, #0
 8004998:	bd38      	pop	{r3, r4, r5, pc}
 800499a:	bf00      	nop
 800499c:	08004d08 	.word	0x08004d08
 80049a0:	08004d28 	.word	0x08004d28
 80049a4:	08004d48 	.word	0x08004d48

080049a8 <fflush>:
 80049a8:	4601      	mov	r1, r0
 80049aa:	b920      	cbnz	r0, 80049b6 <fflush+0xe>
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <fflush+0x18>)
 80049ae:	4905      	ldr	r1, [pc, #20]	; (80049c4 <fflush+0x1c>)
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	f7fe bc89 	b.w	80032c8 <_fwalk_reent>
 80049b6:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <fflush+0x20>)
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	f7ff bfcb 	b.w	8004954 <_fflush_r>
 80049be:	bf00      	nop
 80049c0:	08004d04 	.word	0x08004d04
 80049c4:	08004955 	.word	0x08004955
 80049c8:	20000064 	.word	0x20000064

080049cc <_lseek_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4c07      	ldr	r4, [pc, #28]	; (80049ec <_lseek_r+0x20>)
 80049d0:	4605      	mov	r5, r0
 80049d2:	4608      	mov	r0, r1
 80049d4:	4611      	mov	r1, r2
 80049d6:	2200      	movs	r2, #0
 80049d8:	6022      	str	r2, [r4, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	f7fe f974 	bl	8002cc8 <_lseek>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_lseek_r+0x1e>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_lseek_r+0x1e>
 80049e8:	602b      	str	r3, [r5, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	200001b8 	.word	0x200001b8

080049f0 <__swhatbuf_r>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	460e      	mov	r6, r1
 80049f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f8:	2900      	cmp	r1, #0
 80049fa:	b090      	sub	sp, #64	; 0x40
 80049fc:	4614      	mov	r4, r2
 80049fe:	461d      	mov	r5, r3
 8004a00:	da06      	bge.n	8004a10 <__swhatbuf_r+0x20>
 8004a02:	2300      	movs	r3, #0
 8004a04:	602b      	str	r3, [r5, #0]
 8004a06:	89b3      	ldrh	r3, [r6, #12]
 8004a08:	061a      	lsls	r2, r3, #24
 8004a0a:	d50e      	bpl.n	8004a2a <__swhatbuf_r+0x3a>
 8004a0c:	2340      	movs	r3, #64	; 0x40
 8004a0e:	e00e      	b.n	8004a2e <__swhatbuf_r+0x3e>
 8004a10:	aa01      	add	r2, sp, #4
 8004a12:	f000 f8ab 	bl	8004b6c <_fstat_r>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	dbf3      	blt.n	8004a02 <__swhatbuf_r+0x12>
 8004a1a:	9a02      	ldr	r2, [sp, #8]
 8004a1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a24:	425a      	negs	r2, r3
 8004a26:	415a      	adcs	r2, r3
 8004a28:	602a      	str	r2, [r5, #0]
 8004a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a2e:	2000      	movs	r0, #0
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	b010      	add	sp, #64	; 0x40
 8004a34:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a38 <__smakebuf_r>:
 8004a38:	898b      	ldrh	r3, [r1, #12]
 8004a3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a3c:	079e      	lsls	r6, r3, #30
 8004a3e:	4605      	mov	r5, r0
 8004a40:	460c      	mov	r4, r1
 8004a42:	d410      	bmi.n	8004a66 <__smakebuf_r+0x2e>
 8004a44:	ab01      	add	r3, sp, #4
 8004a46:	466a      	mov	r2, sp
 8004a48:	f7ff ffd2 	bl	80049f0 <__swhatbuf_r>
 8004a4c:	9900      	ldr	r1, [sp, #0]
 8004a4e:	4606      	mov	r6, r0
 8004a50:	4628      	mov	r0, r5
 8004a52:	f7fe fa5d 	bl	8002f10 <_malloc_r>
 8004a56:	b968      	cbnz	r0, 8004a74 <__smakebuf_r+0x3c>
 8004a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5c:	059a      	lsls	r2, r3, #22
 8004a5e:	d422      	bmi.n	8004aa6 <__smakebuf_r+0x6e>
 8004a60:	f043 0302 	orr.w	r3, r3, #2
 8004a64:	81a3      	strh	r3, [r4, #12]
 8004a66:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a6a:	6023      	str	r3, [r4, #0]
 8004a6c:	6123      	str	r3, [r4, #16]
 8004a6e:	2301      	movs	r3, #1
 8004a70:	6163      	str	r3, [r4, #20]
 8004a72:	e018      	b.n	8004aa6 <__smakebuf_r+0x6e>
 8004a74:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <__smakebuf_r+0x74>)
 8004a76:	62ab      	str	r3, [r5, #40]	; 0x28
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	6020      	str	r0, [r4, #0]
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	9b00      	ldr	r3, [sp, #0]
 8004a84:	6163      	str	r3, [r4, #20]
 8004a86:	9b01      	ldr	r3, [sp, #4]
 8004a88:	6120      	str	r0, [r4, #16]
 8004a8a:	b14b      	cbz	r3, 8004aa0 <__smakebuf_r+0x68>
 8004a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 f87d 	bl	8004b90 <_isatty_r>
 8004a96:	b118      	cbz	r0, 8004aa0 <__smakebuf_r+0x68>
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	81a3      	strh	r3, [r4, #12]
 8004aa0:	89a0      	ldrh	r0, [r4, #12]
 8004aa2:	4330      	orrs	r0, r6
 8004aa4:	81a0      	strh	r0, [r4, #12]
 8004aa6:	b002      	add	sp, #8
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
 8004aaa:	bf00      	nop
 8004aac:	08003139 	.word	0x08003139

08004ab0 <memcpy>:
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	1e43      	subs	r3, r0, #1
 8004ab4:	440a      	add	r2, r1
 8004ab6:	4291      	cmp	r1, r2
 8004ab8:	d004      	beq.n	8004ac4 <memcpy+0x14>
 8004aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ac2:	e7f8      	b.n	8004ab6 <memcpy+0x6>
 8004ac4:	bd10      	pop	{r4, pc}

08004ac6 <memmove>:
 8004ac6:	4288      	cmp	r0, r1
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	eb01 0302 	add.w	r3, r1, r2
 8004ace:	d801      	bhi.n	8004ad4 <memmove+0xe>
 8004ad0:	1e42      	subs	r2, r0, #1
 8004ad2:	e00b      	b.n	8004aec <memmove+0x26>
 8004ad4:	4298      	cmp	r0, r3
 8004ad6:	d2fb      	bcs.n	8004ad0 <memmove+0xa>
 8004ad8:	1881      	adds	r1, r0, r2
 8004ada:	1ad2      	subs	r2, r2, r3
 8004adc:	42d3      	cmn	r3, r2
 8004ade:	d004      	beq.n	8004aea <memmove+0x24>
 8004ae0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ae4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004ae8:	e7f8      	b.n	8004adc <memmove+0x16>
 8004aea:	bd10      	pop	{r4, pc}
 8004aec:	4299      	cmp	r1, r3
 8004aee:	d004      	beq.n	8004afa <memmove+0x34>
 8004af0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004af8:	e7f8      	b.n	8004aec <memmove+0x26>
 8004afa:	bd10      	pop	{r4, pc}

08004afc <_realloc_r>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	4607      	mov	r7, r0
 8004b00:	4615      	mov	r5, r2
 8004b02:	460e      	mov	r6, r1
 8004b04:	b921      	cbnz	r1, 8004b10 <_realloc_r+0x14>
 8004b06:	4611      	mov	r1, r2
 8004b08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b0c:	f7fe ba00 	b.w	8002f10 <_malloc_r>
 8004b10:	b91a      	cbnz	r2, 8004b1a <_realloc_r+0x1e>
 8004b12:	f7fe f9af 	bl	8002e74 <_free_r>
 8004b16:	4628      	mov	r0, r5
 8004b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1a:	f000 f849 	bl	8004bb0 <_malloc_usable_size_r>
 8004b1e:	4285      	cmp	r5, r0
 8004b20:	d90e      	bls.n	8004b40 <_realloc_r+0x44>
 8004b22:	4629      	mov	r1, r5
 8004b24:	4638      	mov	r0, r7
 8004b26:	f7fe f9f3 	bl	8002f10 <_malloc_r>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	b150      	cbz	r0, 8004b44 <_realloc_r+0x48>
 8004b2e:	4631      	mov	r1, r6
 8004b30:	462a      	mov	r2, r5
 8004b32:	f7ff ffbd 	bl	8004ab0 <memcpy>
 8004b36:	4631      	mov	r1, r6
 8004b38:	4638      	mov	r0, r7
 8004b3a:	f7fe f99b 	bl	8002e74 <_free_r>
 8004b3e:	e001      	b.n	8004b44 <_realloc_r+0x48>
 8004b40:	4630      	mov	r0, r6
 8004b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b44:	4620      	mov	r0, r4
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b48 <_read_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4c07      	ldr	r4, [pc, #28]	; (8004b68 <_read_r+0x20>)
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	4608      	mov	r0, r1
 8004b50:	4611      	mov	r1, r2
 8004b52:	2200      	movs	r2, #0
 8004b54:	6022      	str	r2, [r4, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f7fe f8be 	bl	8002cd8 <_read>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_read_r+0x1e>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_read_r+0x1e>
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	200001b8 	.word	0x200001b8

08004b6c <_fstat_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4c07      	ldr	r4, [pc, #28]	; (8004b8c <_fstat_r+0x20>)
 8004b70:	2300      	movs	r3, #0
 8004b72:	4605      	mov	r5, r0
 8004b74:	4608      	mov	r0, r1
 8004b76:	4611      	mov	r1, r2
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	f7fe f895 	bl	8002ca8 <_fstat>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	d102      	bne.n	8004b88 <_fstat_r+0x1c>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	b103      	cbz	r3, 8004b88 <_fstat_r+0x1c>
 8004b86:	602b      	str	r3, [r5, #0]
 8004b88:	bd38      	pop	{r3, r4, r5, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200001b8 	.word	0x200001b8

08004b90 <_isatty_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4c06      	ldr	r4, [pc, #24]	; (8004bac <_isatty_r+0x1c>)
 8004b94:	2300      	movs	r3, #0
 8004b96:	4605      	mov	r5, r0
 8004b98:	4608      	mov	r0, r1
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	f7fe f88c 	bl	8002cb8 <_isatty>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d102      	bne.n	8004baa <_isatty_r+0x1a>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	b103      	cbz	r3, 8004baa <_isatty_r+0x1a>
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	200001b8 	.word	0x200001b8

08004bb0 <_malloc_usable_size_r>:
 8004bb0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	bfbe      	ittt	lt
 8004bb8:	1809      	addlt	r1, r1, r0
 8004bba:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8004bbe:	18c0      	addlt	r0, r0, r3
 8004bc0:	3804      	subs	r0, #4
 8004bc2:	4770      	bx	lr

08004bc4 <_init>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr

08004bd0 <_fini>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr
